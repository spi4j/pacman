[module flowManager('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::swing::common::name/]
[import fr::pacman::cinematic::swing::client::ui::pkg::manageEvent/]
[import fr::pacman::cinematic::swing::common::swing_commons/]

[comment encoding = UTF-8 /]
[template public flowManager(flow : flow::Flow)]
  [flow.licence()/]
  package [flow.namePackageFlowManager()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [flow.writeImports()/]
    
  [/protected]
  
  
  /**
   * Flow [flow.name/].
   * @author [flow.getAuthorName()/]
   */
  public class [flow.nameFlow()/] extends SpiFlowManager_Abs
  {
  
     // Attributs [flow.nameFlow()/]
     [protected (flow.getUserCodeId('Attributs ' + flow.nameFlow())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  [if (flow.flowHasMainPanel())]
       /**
        * Constructeur du flow.
        */
       public [flow.nameFlow()/] ()
       {
          this(null);
       }
    
  [/if]
     /**
      * Constructeur du flow.
      * @param p_previousPresenter
      *           le présenteur en amont de ce flow
      */
     public [flow.nameFlow()/] (final Presenter_Abs<?, ?> p_previousPresenter)
     {
        super(p_previousPresenter);
     }
  
     @Override
     public void onStart ()
     {
        // Pre onStart
        [protected (flow.getUserCodeId('Pre onStart')) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
  
  
  [for (state : flow::FlowState | Sequence{flow.getInitialState()}->union(flow.getInitialState().getAllFollowingStatesWithoutGardOrEvent(false)))]
    [if (state.oclIsKindOf(flow::ViewState))]
            [protected (state.getUserCodeId('onStart' + ' : Affichage de ' + state.oclAsType(flow::ViewState).name)) startTagPrefix('// ') endTagPrefix('// ')]
              [for (nextView : view::ViewContainer | state.oclAsType(flow::ViewState).viewContainers)]
                [if (flow.flowHasMainPanel())]
                        @SuppressWarnings("unused")
                        [nextView.getRootPresenter().namePresenter()/] v_main;
                        try
                        {
                           v_main = new [nextView.getRootPresenter().namePresenter()/]();
                        }
                        catch (ViewAlreadyRegisteredException v_e)
                        {
                           v_main = getViewManager().getPresenter([nextView.getRootPresenter().namePresenter()/].class);
                        }
                [else]
                        final [flow.getRootPresenterName()/] v_rootPresenter = getViewManager().getPresenter([flow.getRootPresenterName()/].class);
                        // affichage de l'écran [nextView.name/]
                        [nextView.namePresenter()/] v_[nextView.namePresenter().toLowerFirst()/];
                        try
                        {
                           // on tente d'instancier un nouvel écran
                  [if (flow.flowHasMainPanel())]
                             v_[nextView.namePresenter().toLowerFirst()/] = new [nextView.namePresenter()/]();
                  [else]
                             v_[nextView.namePresenter().toLowerFirst()/] = new [nextView.namePresenter()/](v_rootPresenter);
                             v_rootPresenter.getView().addView(v_[nextView.namePresenter().toLowerFirst()/].getView());
                  [/if]
                        }
                        catch (ViewAlreadyRegisteredException v_e)
                        {
                           // si l'écran existe déjà on le récupère dans le gestionnaire de vues
                           v_[nextView.namePresenter().toLowerFirst()/] = getViewManager().getPresenter([nextView.namePresenter()/].class);
                  [if (not flow.flowHasMainPanel())]
                             v_rootPresenter.getView().restoreView(v_[nextView.namePresenter().toLowerFirst()/].getView());
                  [/if]
                        }
                [/if]
              [/for]
              
            [/protected]
      
    [elseif (state.oclIsKindOf(flow::SubflowState))]
            [protected (state.getUserCodeId('onStart' + ' : Démarrage du Flow ' + state.oclAsType(flow::SubflowState).name)) startTagPrefix('// ') endTagPrefix('// ')]
                    final [state.oclAsType(flow::SubflowState).subflow.nameFlow()/] v_[state.oclAsType(flow::SubflowState).subflow.nameFlow().toLowerFirst()/] = new [state.oclAsType(flow::SubflowState).subflow.nameFlow()/](this);
                    v_[state.oclAsType(flow::SubflowState).subflow.nameFlow().toLowerFirst()/].start();
            [/protected]
      
    [elseif (state.oclIsKindOf(flow::ActionState))]
            [protected (state.getUserCodeId('onStart' + ' : Action ' + state.oclAsType(flow::ActionState).name)) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO [state.oclAsType(flow::ActionState).name/]
            [/protected]
      
      
    [/if]
  [/for]
        // Post onStart
        [protected (flow.getUserCodeId('Post onStart')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
     }
  
     // Méthodes [flow.nameFlow()/]
     [protected (flow.getUserCodeId('Méthodes ' + flow.nameFlow())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(f : flow::Flow) post(self.trim())]
  [f.initImports()/]
  [f.addImport('fr.spi4j.ui.mvp.Presenter_Abs')/]
  [f.addImport('fr.spi4j.ui.mvp.SpiFlowManager_Abs')/]
  [f.addImport('fr.spi4j.ui.mvp.ViewAlreadyRegisteredException')/]
  
  [for (state : flow::FlowState | f.getInitialState().getAllFollowingStatesWithoutGardOrEvent(false))]
    [if (state.oclIsKindOf(flow::ViewState))]
      [for (nextView : view::ViewContainer | state.oclAsType(flow::ViewState).viewContainers)]
        		[f.addImport(nextView.namePackageViewContainerPresenter() + '.' + nextView.namePresenter())/]
        [if (nextView.namePackageViewContainerPresenter() <> nextView.getRootPresenter().namePackageViewContainerPresenter())]
          			[f.addImport(nextView.getRootPresenter().namePackageViewContainerPresenter() + '.' + nextView.getRootPresenter().namePresenter())/]
        [/if]
      [/for]
    [elseif (state.oclIsKindOf(flow::SubflowState))]
      		[f.addImport(state.oclAsType(flow::SubflowState).subflow.namePackageFlowManager() + '.' + state.oclAsType(flow::SubflowState).subflow.nameFlow())/]
    [/if]
  [/for]
  
  [f.flushImports()/][/template]