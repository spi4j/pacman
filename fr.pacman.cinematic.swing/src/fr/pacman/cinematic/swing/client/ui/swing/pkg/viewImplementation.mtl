[module viewImplementation('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::standard_widgets/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::swing::common::packages/]
[import fr::pacman::cinematic::swing::common::name/]
[import fr::pacman::cinematic::swing::common::swing_widgets/]
[import fr::pacman::cinematic::swing::common::swing_commons/]

[comment encoding = UTF-8 /]
[template public viewImplementation(viewContainer : view::ViewContainer)]
  package [viewContainer.namePackageViewContainerImplementation()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [viewContainer.writeImports()/]
    
  [/protected]
  
  
  /**
   * Screen [viewContainer.nameViewImplementation()/].
   * @author [viewContainer.getAuthorName()/]
   */
  public class [viewContainer.nameViewImplementation()/] extends SpiViewPanel<[viewContainer.namePresenter()/]> implements [viewContainer.nameViewInterface()/]
  {
  
     private static final long serialVersionUID = 1L;
  
  [for (element : view::ViewElement | viewContainer.viewElements)]
       // Declaration [element.name + '_' + element.genericType(element.widget.getImplementationClass(), true)/]
       [protected (element.getUserCodeId('Declaration ' + element.name + '_' + element.genericType(element.widget.getImplementationClass(), true))) startTagPrefix('// ') endTagPrefix('// ')]
         [if (element.useMatching())]
              private final [element.genericType(element.widget.getImplementationClass(), true)/] [element.nameVariableElement()/];
         [else]
           	private final [element.genericTypeEntity(element.widget.getImplementationClass())/] [element.nameVariableElement()/];	
         [/if]
       [/protected]
    
    
  [/for]
  
     // initialisation des composants
  
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [for (viewEvent : view::ViewEvent | element.events)]
      [if (not (viewEvent.type = null) and 'onClick'.equalsIgnoreCase(viewEvent.type.name))]
           // Parametrage [element.name + '_' + element.genericType(element.widget.getImplementationClass(), true)/]
           [protected (element.getUserCodeId('Parametrage ' + element.name + '_' + element.genericType(element.widget.getImplementationClass(), true))) startTagPrefix('// ') endTagPrefix('// ')]
                private transient final ActionListener [element.nameVariableElement()/]Action = new ActionListener()
                {
                   @Override
                   public void actionPerformed (final ActionEvent p_event)
                   {
             [if (viewContainer.getViewStatesForViewContainer()->exists(viewState | viewState.getTransitionsFromState(true)->asSequence()->collect(temp1 | temp1.on)->includes(viewEvent)))]
                        getPresenter().[viewEvent.nameActionPresenteur()/]();
             [/if]
             [for (flowEvent : flow::FlowEvent | viewEvent.getFlowEventsForViewEvent())]
               [if (viewContainer.getViewStatesForViewContainer()->exists(viewState | viewState.getTransitionsFromState(true)->asSequence()->collect(temp2 | temp2.on)->includes(flowEvent)))]
                          getPresenter().[flowEvent.nameActionPresenteur()/]();
               [/if]
             [/for]
             [if (not (viewContainer.widget = null) and viewContainer.widget.name = 'Dialog')]
                        // Cet écran est une fenêtre de dialogue, donc celle-ci est fermée par défaut dès qu'un événement intervient
                        getPresenter().close();
             [/if]
                   }
                };
           [/protected]
        
      [/if]
    [/for]
  [/for]
  
     /**
      * Constructeur.
      * @param p_presenter
      *           le présenteur
      */
     public [viewContainer.nameViewImplementation()/] (final [viewContainer.namePresenter()/] p_presenter)
     {
        super(p_presenter);
        // initialize
        [protected (viewContainer.getUserCodeId('initialize')) startTagPrefix('// ') endTagPrefix('// ')]
          [if (not viewContainer.ViewIsMainPanel())]
                  final SpiPanel v_buttonsPanel = new SpiPanel(new GridLayout([viewContainer.viewElements->size()/], 1));
          [/if]
          [for (element : view::ViewElement | viewContainer.viewElements)]
            [if (element.widget.getImplementationClass() = 'SpiButton')]
              [if (element.label = null or element.label.size() = 0)]
                      [element.nameVariableElement()/] = new [element.genericType(element.widget.getImplementationClass(), true)/]("[element.name/]");
              [else]
                      [element.nameVariableElement()/] = new [element.genericType(element.widget.getImplementationClass(), true)/]("[element.label/]");
              [/if]
            [else]
              [if (element.useMatching())]
                      [element.nameVariableElement()/] = new [element.genericType(element.widget.getImplementationClass(), true)/]();
              [else]
                	  [element.nameVariableElement()/] = new [element.genericTypeEntity(element.widget.getImplementationClass())/]();
              [/if]
            [/if]
            [for (viewEvent : view::ViewEvent | element.events)]
              [if (not (viewEvent.type = null) and 'onClick'.equalsIgnoreCase(viewEvent.type.name))]
                      [element.nameVariableElement()/].addActionListener([element.nameVariableElement()/]Action);
              [/if]
            [/for]
            [if (viewContainer.ViewIsMainPanel())]
                    add([element.nameVariableElement()/]);
            [else]
                    v_buttonsPanel.add([element.nameVariableElement()/]);
            [/if]
          [/for]
          
          [if (viewContainer.ViewIsMainPanel())]
                  final SpiFrame v_frame = new SpiFrame()
                  {
                     private static final long serialVersionUID = 1L;
                  };
                  v_frame.setContentPane(this);
                  v_frame.setTitle(this.getTitle());
                  v_frame.display();
                  v_frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
          [else]
                  setLayout(new BorderLayout());
                  setBorder(BorderFactory.createEmptyBorder(5, 5, 0, 5));
                  SwingUtilities.invokeLater(new Runnable()
                  {
                     @Override
                     public void run ()
                     {
                        SpiSwingUtilities.getAncestorOfClass(JFrame.class, [viewContainer.nameViewImplementation()/].this).setDefaultCloseOperation(
                                 WindowConstants.DISPOSE_ON_CLOSE);
                     }
                  });
          [/if]
          [if (not viewContainer.ViewIsMainPanel())]
                  add(v_buttonsPanel, BorderLayout.CENTER);
          [/if]
        [/protected]
  
     }
  
     @Override
     public void addView (final View_Itf p_view)
     {
        // addView
        [protected (viewContainer.getUserCodeId('addView')) startTagPrefix('// ') endTagPrefix('// ')]
                if (p_view instanceof SpiViewPanel)
                {
                   SpiFrame.open((SpiViewPanel<?>) p_view);
                }
                else
                {
                   throw new UnsupportedOperationException("Vue inconnue : " + p_view.getClass().getName());
                }
        [/protected]
  
     }
  
     @Override
     public void restoreView (final View_Itf p_view)
     {
        // restoreView
        [protected (viewContainer.getUserCodeId('restoreView')) startTagPrefix('// ') endTagPrefix('// ')]
                if (p_view instanceof SpiViewPanel)
                {
                   final SpiFrame v_frame = SpiSwingUtilities.getAncestorOfClass(SpiFrame.class, (SpiViewPanel<?>) p_view);
                   v_frame.toFront();
                }
                else
                {
                   throw new UnsupportedOperationException("Vue inconnue : " + p_view.getClass().getName());
                }
        [/protected]
  
     }
  
     @Override
     public void removeView (final View_Itf p_view)
     {
        // removeView
        [protected (viewContainer.getUserCodeId('removeView')) startTagPrefix('// ') endTagPrefix('// ')]
                if (p_view instanceof SpiViewPanel)
                {
                   final SpiFrame v_frame = SpiSwingUtilities.getAncestorOfClass(SpiFrame.class, (SpiViewPanel<?>) p_view);
                   v_frame.dispose();
                }
                else
                {
                   throw new UnsupportedOperationException("Vue inconnue : " + p_view.getClass().getName());
                }
        [/protected]
  
     }
  
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [if (not (element.widget.name = 'Button'))]
         // Getter [element.name + '_' + element.genericType(element.widget.getImplementationClass(), true)/]
         [protected (element.getUserCodeId('Getter ' + element.name + '_' + element.genericType(element.widget.getImplementationClass(), true))) startTagPrefix('// ') endTagPrefix('// ')]
           
              @Override
              public [if (element.useMatching())] [element.genericType(element.widget.getInterfaceName(), true)/] [else][element.genericTypeEntity(element.widget.getImplementationClass())/] [/if][element.nameGetterViewElement()/] ()
              {
                 return [element.nameVariableElement()/];
              }
           
         [/protected]
      
      
    [/if]
  [/for]
     @Override
     public void beforeClose ()
     {
        disposeWindow();
        super.beforeClose();
     }
  
     // [viewContainer.nameViewImplementation()/]
     [protected (viewContainer.getUserCodeId(viewContainer.nameViewImplementation())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(v : view::ViewContainer) post(self.trim())]
  [v.initImports()/]
  [v.addImport('java.awt.BorderLayout')/]
  [v.addImport('java.awt.FlowLayout')/]
  [v.addImport('java.awt.GridLayout')/]
  [v.addImport('java.awt.event.ActionEvent')/]
  [v.addImport('java.awt.event.ActionListener')/]
  [v.addImport('javax.swing.BorderFactory')/]
  [v.addImport('javax.swing.JFrame')/]
  [v.addImport('javax.swing.SwingUtilities')/]
  [v.addImport('javax.swing.WindowConstants')/]
  [v.addImport('fr.spi4j.ui.mvp.View_Itf')/]
  [v.addImport('fr.spi4j.ui.swing.SpiFrame')/]
  [v.addImport('fr.spi4j.ui.swing.SpiPanel')/]
  [v.addImport('fr.spi4j.ui.swing.SpiSwingUtilities')/]
  [v.addImport('fr.spi4j.ui.swing.SpiViewPanel')/]
  [v.addImport(v.namePackageViewContainerInterface() + '.' + v.nameViewInterface())/]
  [v.addImport(v.namePackageViewContainerPresenter() + '.' + v.namePresenter())/]
  
  [if (not (v.widget = null))]
    [for (widget : toolkits::Widget | OrderedSet{v.widget})]
      		[v.addImport(widget.getImplementationPackage() + '.' + widget.getImplementationClassNameForImport())/]
      		[v.addImport(widget.getInterfacePackage() + '.' + widget.getInterfaceNameForImport())/]
    [/for]
  [/if]
  [v.flushImports()/][/template]

[query private nameVariableElement(element : view::ViewElement) : String = '_' + element.name/]

[query private paramViewElementInConstructor(element : view::ViewElement) : String = if not (element.widget = null) and element.widget.name = 'Table' then '"' + element.name + '"' else '' endif/]

[query private getElementType(element : view::ViewElement) : String = if not (element = null) and not (element.type = null) then if element.type.oclIsKindOf(environment::DTO) then element.type.oclAsType(environment::DTO).buildDtoClassName() else element.type.name endif else '[ERREUR : Type inconnu pour ce widget]' endif/]

[query private orderTransitions(transitions : OrderedSet(flow::Transition)) : OrderedSet(flow::Transition) = transitions->sortedBy(t | t.transitionComparator())/]

[query private transitionComparator(transition : flow::Transition) : String = if not transition.on->isEmpty() then '' + transition.on->asSequence()->collect(temp3 | temp3.name) else if transition.to = null then '' else if transition.to.oclIsKindOf(flow::NamedFlowState) then transition.to.oclAsType(flow::NamedFlowState).name else if transition.to.oclIsKindOf(flow::SubflowState) then transition.to.oclAsType(flow::SubflowState).name else transition.to.toString() endif endif endif endif/]

[query private buildEntityNameFromDto(viewContainer : view::ViewContainer) : String = if viewContainer.searchBindingFor() = null then 'Object' else if viewContainer.searchBindingFor().oclIsKindOf(environment::DTO) then viewContainer.searchBindingFor().oclAsType(environment::DTO).buildEntityClassNameImplFromDto() else 'Object' endif endif/]
