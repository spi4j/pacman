[comment encoding = UTF-8 /]
[module swingLanceur('http://www.obeonetwork.org/dsl/cinematic/3.0.0')]


[import fr::pacman::cinematic::swing::common::packages /]
[import fr::pacman::cinematic::swing::common::name /]
[import fr::pacman::cinematic::api::common::packages /]
[import fr::pacman::cinematic::api::common::name /]
[import fr::pacman::cinematic::api::common::model /]
[import fr::pacman::cinematic::swing::common::swing-commons /]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::imports /]

[template public swingLanceur(root : CinematicRoot)]
[licence()/]
package [namePackageMain()/];

// [protected ('for imports')]

import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import fr.spi4j.Parameters;
import fr.spi4j.lib.security.Spi4jSecurity_Abs;
import fr.spi4j.lib.security.client.Spi4jClientSecurity;
import fr.spi4j.ui.mvp.MVPUtils;
import fr.spi4j.ui.mvp.rda.RichViewManager;
import fr.spi4j.ui.swing.ShadowPopupFactory;
import fr.spi4j.ui.swing.SpiSwingUtilities;

import [buildPackageBusiness()/].[buildAppliUserBusinessGenClassName()/];
[for (flow : Flow | root.eAllContents(Flow)->select(f : Flow | flowHasMainPanel(f)))]
import [namePackageFlowManager(flow)/].[nameFlow(flow)/];
[/for]
import [namePackageViews()/].SwingViews;

// [/protected]

/**
 * Point d'entrée de l'application Swing.
 * @author [getAuthorName()/]
 */
public final class [nameSwingLanceur()/]
{
   /**
    * Constructeur privé.
    */
   private [nameSwingLanceur()/] ()
   {
      super();
   }

   /**
    * Lanceur.
    * 
    * @param p_args
    *            .
    */
   public static void main (final String['[]'/] p_args)
   {
      init(p_args);
      start();
   }

   /**
    * init.
    * 
    * @param p_args
    *            .
    */
   public static void init (final String['[]'/] p_args)
   {
      // Initialisation
      // [protected (root.getUserCodeId('Initialisation'))]
      // Look and feel Nimbus plutôt qu'Ocean par défaut
      for (final LookAndFeelInfo v_info : UIManager.getInstalledLookAndFeels())
      {
         if ("Nimbus".equals(v_info.getName()))
         {
            try
            {
               UIManager.setLookAndFeel(v_info.getClassName());
               break;
            }
            catch (final Exception v_e)
            {
               throw new RuntimeException(v_e);
            }
         }
      }

      SpiSwingUtilities.initEscapeClosesDialogs();
      ShadowPopupFactory.install();
	  [if useSpi4jSecurity()]
	  Initialization.initialize();
	  [/if]
      MVPUtils.setViewManager(new RichViewManager());
      MVPUtils.getInstance().getViewManager().setViewsAssociation(new SwingViews());

      final String v_defaultServerUrl = "http://localhost:8080/[getWebappProjectName()/]/remoting";
      final String v_serverUrl = Parameters.getParameter("jnlp.serverUrl", v_defaultServerUrl);
      [buildAppliUserBusinessGenClassName()/].getSingleton().initImplClient(v_serverUrl);

      // [/protected]
   }

   /**
    * start.
    */
   public static void start ()
   {
[for (flow : Flow | root.eAllContents(ViewState)
    ->select(viewState : ViewState | viewState.viewContainers
            ->exists(view : ViewContainer | not view.widget.oclIsUndefined() and view.widget.name = 'MainPanel')).eContainer(Flow))]
      // [protected (flow.getUserCodeId('Initialisation du flow ' + flow.name))]
      final [nameFlow(flow)/] v_[nameFlow(flow).toLowerFirst()/] = new [nameFlow(flow)/]();
      v_[nameFlow(flow).toLowerFirst()/].start();
      // [/protected]
[/for]
   }
}
[/template]
[query public namePackageViews(any : OclAny) : String =
   getApplicationPackage() + '.client.ui.swing'
/]
