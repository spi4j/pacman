[module swingLanceur('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0')/]

[import fr::pacman::cinematic::swing::common::packages/]
[import fr::pacman::cinematic::swing::common::name/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::swing::common::swing_commons/]
[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]

[comment encoding = UTF-8 /]
[template public swingLanceur(root : cinematic::CinematicRoot)]
  [root.licence()/]
  package [root.namePackageMain()/];
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import javax.swing.UIManager;
    import javax.swing.UIManager.LookAndFeelInfo;
    
    import fr.spi4j.Parameters;
    import fr.spi4j.lib.security.Spi4jSecurity_Abs;
    import fr.spi4j.lib.security.client.Spi4jClientSecurity;
    import fr.spi4j.ui.mvp.MVPUtils;
    import fr.spi4j.ui.mvp.rda.RichViewManager;
    import fr.spi4j.ui.swing.ShadowPopupFactory;
    import fr.spi4j.ui.swing.SpiSwingUtilities;
    
    import [root.buildPackageBusiness()/].[root.buildAppliUserBusinessGenClassName()/];
    [for (flow : flow::Flow | root.eAllContents(flow::Flow)->select(f | f.flowHasMainPanel()))]
      import [flow.namePackageFlowManager()/].[flow.nameFlow()/];
    [/for]
    import [root.namePackageViews()/].SwingViews;
    
  [/protected]
  
  
  /**
   * Point d'entrée de l'application Swing.
   * @author [root.getAuthorName()/]
   */
  public final class [root.nameSwingLanceur()/]
  {
     /**
      * Constructeur privé.
      */
     private [root.nameSwingLanceur()/] ()
     {
        super();
     }
  
     /**
      * Lanceur.
      * 
      * @param p_args
      *            .
      */
     public static void main (final String['['/]] p_args)
     {
        init(p_args);
        start();
     }
  
     /**
      * init.
      * 
      * @param p_args
      *            .
      */
     public static void init (final String['['/]] p_args)
     {
        // Initialisation
        [protected (root.getUserCodeId('Initialisation')) startTagPrefix('// ') endTagPrefix('// ')]
                // Look and feel Nimbus plutôt qu'Ocean par défaut
                for (final LookAndFeelInfo v_info : UIManager.getInstalledLookAndFeels())
                {
                   if ("Nimbus".equals(v_info.getName()))
                   {
                      try
                      {
                         UIManager.setLookAndFeel(v_info.getClassName());
                         break;
                      }
                      catch (final Exception v_e)
                      {
                         throw new RuntimeException(v_e);
                      }
                   }
                }
          
                SpiSwingUtilities.initEscapeClosesDialogs();
                ShadowPopupFactory.install();
          [if (root.useSpi4jSecurity())]
            	  Initialization.initialize();
          [/if]
                MVPUtils.setViewManager(new RichViewManager());
                MVPUtils.getInstance().getViewManager().setViewsAssociation(new SwingViews());
          
                final String v_defaultServerUrl = "http://localhost:8080/[root.getWebappProjectName()/]/remoting";
                final String v_serverUrl = Parameters.getParameter("jnlp.serverUrl", v_defaultServerUrl);
                [root.buildAppliUserBusinessGenClassName()/].getSingleton().initImplClient(v_serverUrl);
          
        [/protected]
  
     }
  
     /**
      * start.
      */
     public static void start ()
     {
  [for (flow : flow::Flow | root.eAllContents(flow::ViewState)->select(viewState | viewState.viewContainers->exists(view | not (view.widget = null) and view.widget.name = 'MainPanel'))->collect(temp1 | temp1.eContainer(flow::Flow)))]
          [protected (flow.getUserCodeId('Initialisation du flow ' + flow.name)) startTagPrefix('// ') endTagPrefix('// ')]
                  final [flow.nameFlow()/] v_[flow.nameFlow().toLowerFirst()/] = new [flow.nameFlow()/]();
                  v_[flow.nameFlow().toLowerFirst()/].start();
          [/protected]
    
  [/for]
     }
  }[/template]

[query public namePackageViews(any : ecore::EObject) : String = any.getApplicationPackage() + '.client.ui.swing'/]