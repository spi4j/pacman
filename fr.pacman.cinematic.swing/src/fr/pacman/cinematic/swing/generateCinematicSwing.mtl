[comment encoding = UTF-8 /]
[module generateCinematicSwing('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::cinematic::swing::files::genSwingLanceur /]
[import fr::pacman::cinematic::swing::files::genSwingViews /]
[import fr::pacman::cinematic::swing::files::genPresenter /]
[import fr::pacman::cinematic::swing::files::genSecurity /]
[import fr::pacman::cinematic::swing::files::genViewImplementation /]
[import fr::pacman::cinematic::swing::files::genFlowManager /]
[import fr::pacman::cinematic::api::common::model /]
[import fr::pacman::cinematic::swing::common::name /]

[template public generate(root : CinematicRoot)]
[comment @main /]
[comment : package client.ui.swing /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('SWING')]

[comment : Generation pour le lanceur et SwingView /]
[genSwingViews(root, root.eAllContents(ViewContainer)->sortedBy(name))/]
[genSwingLanceur(root)/]

[comment : Generation pour les ViewContainers /]
[for (viewContainer : ViewContainer | root.eAllContents(ViewContainer))]
[genPresenter(viewContainer)/]
[genViewImplementation(viewContainer)/]
[/for]

[comment : Generation pour les Flows /]
[for (flow : Flow | root.eAllContents(Flow))]
[genFlowManager(flow)/]
[/for]

[comment : generation pour la securite /]
[if useSpi4jSecurity()]
[genSecurity(root) /]
[/if]
    [/if]
[/for]
[/template]
