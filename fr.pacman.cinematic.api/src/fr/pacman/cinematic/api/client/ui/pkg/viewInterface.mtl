[module viewInterface('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::standard_widgets/]
[import fr::pacman::cinematic::api::common::model/]

[comment encoding = UTF-8 /]
[template public viewInterface(viewContainer : view::ViewContainer, clientPropertiesPrefix : String, IsDto : Boolean)]
  [viewContainer.licence()/]
  package [viewContainer.namePackageViewContainerInterface()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [viewContainer.writeImports(IsDto)/]
    
  [/protected]
  
  /**
   * Interface de vue.
   * @author [viewContainer.getAuthorName()/]
   */
  // annotation class
  [protected (viewContainer.getUserCodeId('annotation class')) startTagPrefix('// ') endTagPrefix('// ')]
    @UserView("[viewContainer.name/]")
  [/protected]
  public interface [viewContainer.nameViewInterface()/] extends View_Itf
  {
  
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [if (not (clientPropertiesPrefix = 'client.swing' and element.widget.name = 'Button'))]
         // [element.name + '_' + element.widget.getInterfaceName()/]
         [protected (element.getUserCodeId(element.name + '_' + element.widget.getInterfaceName())) startTagPrefix('// ') endTagPrefix('// ')]

           /**
           [if (element.description <> null)]
              * @return [element.name/] : [element.description/]
           [else]
              * @return [element.name/]
           [/if]
            */
           @Field("[element.name/]")
           [if (element.useWS())]
              [element.genericType(element.widget.getInterfaceName(), IsDto)/] [element.nameGetterViewElement()/] ();		
           [else]
              [element.genericTypeEntity(element.widget.getInterfaceName())/] [element.nameGetterViewElement()/] ();	
           [/if]
         [/protected]
      
    [/if]
  [/for]
     // [viewContainer.nameViewInterface()/]
     [protected (viewContainer.getUserCodeId(viewContainer.nameViewInterface())) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
  }
[/template]

[comment : Write all required imports. /]
[template private writeImports(v : view::ViewContainer, isDto : Boolean) post(self.trim())]
  [v.initImports()/]
  [v.addImport('fr.spi4j.ui.mvp.View_Itf')/]
  [v.addImport('fr.spi4j.ui.graal.Field', not v.viewElements->isEmpty())/]
  [v.addImport('fr.spi4j.ui.graal.UserView')/]
  
  [if (not (v.widget = null))]
    [for (widget : toolkits::Widget | OrderedSet{v.widget})]
      		[v.addImport(widget.getInterfacePackage() + '.' + widget.getInterfaceNameForImport())/]
    [/for]
  [/if]
  
  [v.flushImports()/][/template]