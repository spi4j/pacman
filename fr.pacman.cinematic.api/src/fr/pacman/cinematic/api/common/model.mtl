[module model('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::services::CinematicModelServices/]

[comment encoding = UTF-8 /]
[**
 * Retourne l'initial d'un flow
 * @param flow
*/]
[query public getInitialState(flow : flow::Flow) : flow::InitialState = flow.getInitialStateJavaService()/]

[**
 * Retourne les ViewStates débutant un Flow, sans passer par une transition avec garde ou liée à un événement
 * @param flow
*/]
[query public getFirstViewStates(flow : flow::Flow) : Sequence(flow::ViewState) = flow.getFirstViewStatesJavaService()/]

[**
 * Cherche les états suivants un état source RECURSIVEMENT, en suivant des transitions sans garde et sans événement spécifié
 * @param state l'état source des états recherchés
*/]
[query public getAllFollowingStatesWithoutGardOrEvent(state : flow::FlowState, followSubFlows : Boolean) : Sequence(flow::FlowState) = state.getAllFollowingStatesWithoutGardOrEventJavaService(followSubFlows)/]

[**
 * Cherche les transitions à partir d'un état source. Si l'état source est un SubflowState, on peut chercher à partir de l'état initial du Flow pointé si followSubFlows est positionné à true
 * On considère qu'il n'y a pas de transitions après un SubFlowState. A tort ? Cas d'exemple ?
 * @param state l'état source des transitions
*/]
[query public getTransitionsFromState(state : flow::FlowState, followSubFlows : Boolean) : OrderedSet(flow::Transition) = state.getTransitionsFromStateJavaService(followSubFlows)/]

[**
 * Cherche les ViewStates qui référencent un ViewContainer
 * @param viewContainer le ViewContainer recherché
*/]
[query public getViewStatesForViewContainer(viewContainer : view::ViewContainer) : OrderedSet(flow::ViewState) = viewContainer.getViewStatesForViewContainerJavaService()/]

[**
 * Cherche les FlowEvents lancés par un ViewEvent
 * @param viewEvent le ViewEvent traité
*/]
[query public getFlowEventsForViewEvent(viewEvent : view::ViewEvent) : OrderedSet(flow::FlowEvent) = viewEvent.getFlowEventsForViewEventJavaService()/]

[**
 * Cherche le viewState eventuellement retourne a partir d'un evenement.
 * @param viewEvent le ViewEvent traité
*/]
[query public getNextViewStateFromEvent(viewState : flow::ViewState, viewEvent : view::ViewEvent) : flow::ViewState = viewState.getNextViewStateFromEventJavaService(viewEvent)/]

[**
 * Cherche tous les evenements attaches a un viewcontainer (or les evenements 'onLoad')
 * (on ne prend pas les conteneurs mais uniquement les elements a l'interieur des conteneurs).
*/]
[query public getEventsForViewContainer(viewContainer : view::ViewContainer) : Sequence(view::ViewEvent) = viewContainer.getEventsForViewContainerJavaService()/]

[**
 * Cherche tous les elements (widgets) attaches a un viewcontainer.
*/]
[query public getViewElementsForViewContainer(viewContainer : view::ViewContainer) : Sequence(view::AbstractViewElement) = viewContainer.getViewElementsForViewContainerJavaService()/]

[**
 * Recuperation de toutes les operations pour un actionState
*/]
[query public getOperationsForActionState(actionState : flow::ActionState) : Sequence(soa::Operation) = actionState.getOperationsForActionStateJavaService()/]

[**
 * Cherche les états suivants un état source
 * @param state l'état source des états recherchés
*/]
[comment][query public getNextStates(state : FlowState, followSubFlows : Boolean) : Sequence(FlowState) =
    state.getTransitionsFromState(followSubFlows).to->asSequence()
/][/comment]
[**
 * Cherche les états suivants un état source, en suivant des transitions sans garde et sans événement spécifié, en remplacant les subflowstates par l'état initial du flow sur lequel ils pointent
 * @param state l'état source des états recherchés
*/]
[comment][query public getNextStatesWithoutGardOrEvent(state : FlowState, followSubFlows : Boolean) : Sequence(FlowState) =
    state.getTransitionsFromStateWithoutGardOrEvent(followSubFlows)->select(transition : Transition | transition.to <> null)->collect(transition : Transition | transition.to)->asSequence()
/][/comment]
[**
 * Cherche les états suivants un état source RECURSIVEMENT, de type ViewState, en suivant des transitions sans garde et sans événement spécifié
 * @param state l'état source des états recherchés
*/]
[comment][query public getAllFollowingViewStatesWithoutGardOrEvent(state : FlowState, followSubFlows : Boolean) : Sequence(FlowState) =
    state.getNextStatesWithoutGardOrEvent(followSubFlows)->union(state.getNextStatesWithoutGardOrEvent(followSubFlows)->select(nextState : FlowState | not nextState.oclIsKindOf(ViewState))->collect(nextState : FlowState | nextState.getAllFollowingViewStatesWithoutGardOrEvent(followSubFlows)))
/][/comment]
[**
 * Cherche les transitions à partir d'un état source, sans garde et sans événement spécifié
 * @param state l'état source des transitions
*/]
[comment][query public getTransitionsFromStateWithoutGardOrEvent(state : FlowState, followSubFlows : Boolean) : Set(Transition) =
    state.getTransitionsFromState(followSubFlows)->select(transition : Transition |
        (transition.guard.oclIsUndefined() or transition.guard.trim().size() = 0) and (transition.on.oclIsUndefined() or transition.on->isEmpty()))
/][/comment]
[**
 * Cherche les transitions à partir d'un état cible
 * @param state l'état cible des transitions
*/]
[comment][query public getTransitionsToState(state : FlowState) : Set(Transition) =
    state.eContainer(Flow).transitions->select(transition : Transition | transition.to = state)
        ->asSet()->sortedBy(name)
/][/comment]
[**
 * Cherche le binding d'un élément
 * @param object l'élément source
*/]
[query public searchBindingFor(object : view::ViewContainer) : environment::BoundableElement = object.searchBindingForJavaService()/]

[query public searchBindingFor(object : view::ViewElement) : environment::BoundableElement = object.searchBindingForJavaService()/]

[query public getTypeBeanEntity(viewContainer : view::ViewContainer) : String = if viewContainer.searchBindingForEntity() = null then 'Undefined' else viewContainer.searchBindingForEntity().buildEntityClassName() endif/]

[query public getTypeBeanEntity(viewElement : view::ViewElement) : String = if viewElement.type.oclIsKindOf(entity::Entity) then viewElement.type.oclAsType(entity::Entity).buildEntityClassName() else null endif/]

[query public getElementTypeEntity(object : view::ViewElement) : String = if object.searchBindingForElement() = null then object.type.name else object.searchBindingForElement().buildXtoClassNameFromEntity() endif/]

[**
 * Retourne la classe d'un XTO selon le Entity lié. Appelé à la fois par SOA et Cinematic.
*/]
[query public buildXtoClassNameForEntity(object : view::ViewContainer) : String = object.searchBindingForEntity().buildXtoClassNameFromEntity()/]

[**
 * Cherche le binding d'un élément
 * @param object l'élément source
*/]
[query public searchBindingForEntity(object : view::ViewContainer) : entity::Entity = object.searchBindingForEntityJavaService()/]

[query public searchBindingForEntity(object : view::ViewElement) : entity::Entity = object.searchBindingForEntityJavaService()/]

[**
 * Cherche le binding d'un élément
 * @param object l'élément source
*/]
[query public searchBindingForElement(object : view::ViewElement) : entity::Entity = object.searchBindingForEntityJavaService()/]

[comment : Retourne la racine pour les pages jsp. /]
[query public getJspPageUriFragment(any : ecore::EObject) : String = '/WEB-INF/jsp'/]