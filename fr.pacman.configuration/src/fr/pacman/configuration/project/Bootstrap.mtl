[module Bootstrap('http://www.eclipse.org/ocl/1.1.0/Ecore')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::configuration::common::properties/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]

[comment encoding = UTF-8 /]
[template public httpServerBootstrap(any : ecore::EObject, webapp : Boolean) post(self.trim())]
  [any.licence()/]
  package [any.getApplicationPackage()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import org.apache.commons.cli.CommandLine;
    import org.apache.commons.cli.CommandLineParser;
    import org.apache.commons.cli.DefaultParser;
    import org.apache.commons.cli.Options;
    import org.apache.commons.cli.ParseException;
    
    import org.apache.logging.log4j.LogManager;
    import org.apache.logging.log4j.Logger;
    import fr.spi4j.ws.rs.RsFilter_Abs;
    
    [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
      import java.net.URL;
      import org.eclipse.jetty.security.HashLoginService;
      import org.eclipse.jetty.security.UserStore;
      import org.eclipse.jetty.server.Server;
      import org.eclipse.jetty.server.ServerConnector;
      import org.eclipse.jetty.server.handler.HandlerCollection;
      import org.eclipse.jetty.util.security.Credential;
      import org.eclipse.jetty.webapp.WebAppContext;
    [/if]
    [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
      import java.io.File;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import org.apache.catalina.Context;
      import org.apache.catalina.startup.Tomcat;
      import org.apache.catalina.startup.VersionLoggerListener;
      import org.apache.tomcat.util.scan.StandardJarScanner;
      import fr.spi4j.exception.Spi4jRuntimeException;
      import java.net.MalformedURLException;
    [/if]
    [if ('tomee'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
    [/if]
    
  [/protected]
  
  
  public class [any.buildBoostrapClassName()/] {
  
  	private final static Logger ['log'.apply_attributeStatic()/] = LogManager.getLogger([any.buildBoostrapClassName()/].class);
  	private final static int ['default http port'.apply_attributeFinalStatic()/] = 80;
  	private final static String ['err parse msg'.apply_attributeFinalStatic()/] = "Usage : java -jar [any.getServerProjectName()/].war -p <port_Http>";
  [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
    	private final static String ['jetty include jar pattern'.apply_attributeFinalStatic()/] = "org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern";
  [/if]
  	private [any.buildServerType()/] [any.buildServerName()/];
  
  	/**
  	 * Lanceur pour le serveur embarqué [any.getHttpEmbeddedServer().toUpperFirst()/].
  	 * @param args : Liste des paramètres en provenance de la ligne de commande.
  	 */
  	public static void main(String['['/]] ['args'.apply_parameterMethodClassicIn()/]) {
  
  		try {	
  			['log'.apply_attributeStatic()/].info("Initialisation du serveur HTTP pour l'application : [any.getApplicationName()/]");
  
  			[any.buildBoostrapClassName()/] ['bootstrap'.apply_variableDefault()/] = new [any.buildBoostrapClassName()/]();
  			['bootstrap'.apply_variableDefault()/].start(['args'.apply_parameterMethodClassicIn()/]);
  			['bootstrap'.apply_variableDefault()/].waitForInterrupt();
  
  		} catch (ParseException ['e'.apply_parameterMethodClassicIn()/]) {
  		
  			['log'.apply_attributeStatic()/].warn(['err parse msg'.apply_attributeFinalStatic()/]);
  
  		} catch (Exception ['e'.apply_parameterMethodClassicIn()/]) {
  
  			['log'.apply_attributeStatic()/].fatal("Lancement du serveur [any.getApplicationName()/] : KO : " + ['e'.apply_parameterMethodClassicIn()/].getMessage());
  			Runtime.getRuntime().halt(1);
  		}
  	}
  
  	/**
  	 * Contrôle et récupération des paramètres en provenance de la ligne de commande.
  	 * @param args : Liste des paramètres en provenance de la ligne de commande.
  	 */
  	private int getDefaultHttpPort(final String['['/]] ['args'.apply_parameterMethodClassicIn()/]) throws ParseException  {
  	
  		['getDefaultHttpPort'.displayClearUserCodeId()/]
  		[protected (any.getUserCodeId('getDefaultHttpPort')) startTagPrefix('// ') endTagPrefix('// ')]
      
  		  Options ['option'.apply_variableDefault()/] = new Options();
  		  ['option'.apply_variableDefault()/].addOption("p", true, "Port HTTP du serveur");
  		  
  		  CommandLineParser ['parser'.apply_variableDefault()/]  = new DefaultParser();
  		  CommandLine ['line'.apply_variableDefault()/] = ['parser'.apply_variableDefault()/].parse(['option'.apply_variableDefault()/], ['args'.apply_parameterMethodClassicIn()/]);
  		  
  		  if (['line'.apply_variableDefault()/].hasOption("p") && null != ['line'.apply_variableDefault()/].getOptionValue("p")) {
		      return Integer.valueOf(['line'.apply_variableDefault()/].getOptionValue("p").trim());
		    }
		    return ['default http port'.apply_attributeFinalStatic()/];
		    
		[/protected]
  	} 
  
  	/**
  	 * Paramétrage et démarrage du serveur.
  	 * @param ['args'.apply_parameterMethodClassicIn()/] : Liste des paramètres en provenance de la ligne de commande.
  	 * @throws Exception N'importe quelle exception suite à un problème de démarrage du serveur embarqué.
  	 */
  	private void start (final String['['/]] ['args'.apply_parameterMethodClassicIn()/]) throws Exception {
  
  		['start'.displayClearUserCodeId()/]
  		[protected (any.getUserCodeId('start')) startTagPrefix('// ') endTagPrefix('// ')]
  		  
  		  [if ('tomee'.equalsIgnoreCase(any.getHttpEmbeddedServer()))][/if]
  		  [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
  		    // Modifier les paramètres en fonction du besoin.
  		    StandardJarScanner ['jar scanner'.apply_variableDefault()/] = new StandardJarScanner();
  		    ['jar scanner'.apply_variableDefault()/].setScanAllDirectories(Boolean.TRUE);
  		    ['jar scanner'.apply_variableDefault()/].setScanAllFiles(Boolean.TRUE);
  		    ['jar scanner'.apply_variableDefault()/].setScanClassPath(Boolean.TRUE);
  		    ['jar scanner'.apply_variableDefault()/].setScanManifest(Boolean.TRUE);
  		    ['jar scanner'.apply_variableDefault()/].setScanBootstrapClassPath(Boolean.TRUE);
  		  [/if]
  		  
  		  [any.buildServerNameWithPrefix()/] = new [any.buildServerType()/]();
  		  [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
  		    ServerConnector ['connector'.apply_variableDefault()/] = new ServerConnector([any.buildServerNameWithPrefix()/]);
  		    ['connector'.apply_variableDefault()/].setPort(getDefaultHttpPort( ['args'.apply_parameterMethodClassicIn()/]));
  		    [any.buildServerNameWithPrefix()/].addConnector(['connector'.apply_variableDefault()/]);
  		    URL ['location'.apply_variableDefault()/] = [any.buildBoostrapClassName()/].class.getProtectionDomain().getCodeSource().getLocation();
  		    URL ['location api'.apply_variableDefault()/] = new URL("file://" + ['location'.apply_variableDefault()/]
  		        .getPath().substring(0, ['location'.apply_variableDefault()/].getPath().lastIndexOf("/") +1 ) + "[any.getServerProjectName()/].war"); 
  		        
  		    HandlerCollection ['handlers'.apply_variableDefault()/] = new HandlerCollection(true);
  		    WebAppContext ['webapp'.apply_variableDefault()/] = new WebAppContext();
  		    ['webapp'.apply_variableDefault()/].setContextPath("");
  		    // Recherche des annotations dans les sources ou dans le war deployé. 
  		    ['webapp'.apply_variableDefault()/].setAttribute(['jetty include jar pattern'.apply_attributeFinalStatic()/], ".*/target/classes/|.*\\.war");
  		    // Prise en compte Jstl pour les Jsp.
  		    ['webapp'.apply_variableDefault()/].setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern",
        	    ".*/['['/]^/]*servlet-api-['['/]^/]*\\.jar$|.*/javax.servlet.jsp.jstl-.*\\.jar$|.*/['['/]^/]*taglibs.*\\.jar$");
           ['webapp'.apply_variableDefault()/].setResourceBase("[webapp.getDevWebAppContext()/]");
          [if (any.hasToWriteOtherWebappForApi())]
            WebAppContext ['webapp api'.apply_variableDefault()/] = new WebAppContext();
            ['webapp api'.apply_variableDefault()/].setContextPath("/");
            // Recherche des annotations dans les sources ou dans le war deployé. 
            ['webapp api'.apply_variableDefault()/].setAttribute(['jetty include jar pattern'.apply_attributeFinalStatic()/], ".*/target/classes/|.*\\.war");
            ['webapp api'.apply_variableDefault()/].setResourceBase("../[any.getWebappProjectName()/]/[any.getWebappDir()/]");
        [/if]
        
        [any.writeComment()/]
        //['webapp'.apply_variableDefault()/].setWar(['location'.apply_variableDefault()/].toExternalForm());
        [if (any.hasToWriteOtherWebappForApi())]
          		//['webapp api'.apply_variableDefault()/].setWar(['location api'.apply_variableDefault()/].toExternalForm());
        [/if]
        		
        		[if (any.hasToWriteOtherWebappForApi())]['handlers'.apply_variableDefault()/].addHandler(['webapp api'.apply_variableDefault()/]);[/if]
        		['handlers'.apply_variableDefault()/].addHandler(['webapp'.apply_variableDefault()/]);
        		[any.buildServerNameWithPrefix()/].setHandler(['handlers'.apply_variableDefault()/]);
      [/if]
      [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
        [any.buildServerNameWithPrefix()/].setSilent(true);
        [any.buildServerNameWithPrefix()/].setPort(getDefaultHttpPort(['args'.apply_parameterMethodClassicIn()/]));
        [any.buildServerNameWithPrefix()/].getServer().addLifecycleListener(new VersionLoggerListener());
        Path ['path'.apply_variableDefault()/] = Paths.get(new File("").getAbsolutePath() + "/tomcat." 
            + getDefaultHttpPort(['args'.apply_parameterMethodClassicIn()/]) + "/webapps");
        Files.createDirectories(['path'.apply_variableDefault()/]);
        
        [any.writeComment()/]
        // String ['doc base'.apply_variableDefault()/] = new File("").getAbsolutePath() + "/[webapp.getFinalWarName()/].war";
        [if (any.hasToWriteOtherWebappForApi())]
          // String ['doc base api'.apply_variableDefault()/] = new File("").getAbsolutePath() + "/[true.getFinalWarName()/].war";
        [/if]
        String ['doc base'.apply_variableDefault()/] =  new File("[webapp.getDevWebAppContext()/]").getAbsolutePath();
        Context ['context'.apply_variableDefault()/] = [any.buildServerNameWithPrefix()/].addWebapp("", ['doc base'.apply_variableDefault()/]);
        [if (any.hasToWriteOtherWebappForApi())]
          String ['doc base api'.apply_variableDefault()/] = new File("../[any.getWebappProjectName()/]/[any.getWebappDir()/]").getAbsolutePath();
          Context ['context api'.apply_variableDefault()/] = [any.buildServerNameWithPrefix()/].addWebapp("[false.getContext()/]", ['doc base api'.apply_variableDefault()/]);
          [any.buildServerNameWithPrefix()/].getHost().addChild(['context api'.apply_variableDefault()/]);
        [/if]
        ['context'.apply_variableDefault()/].setJarScanner(['jar scanner'.apply_variableDefault()/]);
        [any.buildServerNameWithPrefix()/].getConnector();
      [/if]
      addBasicAuthUsers();
      [if (any.useBDD())]addSpecificXmlContext(['context'.apply_variableDefault()/]);[/if]
      [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
        [any.buildServerNameWithPrefix()/].setStopTimeout(0x2710L);
        [any.buildServerNameWithPrefix()/].setStopAtShutdown(true);
      [/if]
      [any.buildServerNameWithPrefix()/].start();
      [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
        [any.buildServerNameWithPrefix()/].dumpStdErr();
      [/if]
      
    [/protected]
  
  	}
  [if (any.useBDD())]
    	/**
    	 * Récupération (si besoin) et lecture du fichier de configuration externe
    	 * "context.xml". Si la base de données n'est pas une base embarquée de type H2,
    	 * il est alors nécessaire de définir une ressource de type jndi dans ce fichier
    	 * afin de pouvoir se connecter à la base de données.
    	 *
    	 * @param ['context'.apply_parameterMethodClassicIn()/] : Le contexte de l'application.
    	 * @throws MalformedURLException Une erreur de définition pour l'URL du fichier 'context.xml'.
    	 */
    	private void addSpecificXmlContext(final Context ['context'.apply_parameterMethodClassicIn()/]) throws MalformedURLException {
    
    [if (not any.useH2EmbeddedDatabase())]
      		File ['ctx'.apply_variableDefault()/] = new File(new File(getClass().getProtectionDomain()
      			.getCodeSource().getLocation().getFile()).getParentFile()
      			.getParentFile().getParentFile().getAbsolutePath() 
      			+ "/[any.getServerProjectName()/]/[any.getServerResourcesDir()/]context.xml");
      		
      		// Permet de retrouver la racine du répertoire 
      		// une fois l'application déployée.
      		if (['ctx'.apply_variableDefault()/].getAbsolutePath().indexOf("tomcat.") > 0) {
      			 String ['deployed context path'.apply_variableDefault()/] = ['ctx'.apply_variableDefault()/].getAbsolutePath()
      				 .substring(0, ['ctx'.apply_variableDefault()/].getAbsolutePath().indexOf("tomcat.")) 
      				 + "conf/context.xml";
      			 ['ctx'.apply_variableDefault()/] = new File(['deployed context path'.apply_variableDefault()/]);
      		}
      
      		if (!['ctx'.apply_variableDefault()/].exists() || !['ctx'.apply_variableDefault()/].canRead()) {
      			throw new Spi4jRuntimeException("Impossible de lire le fichier context.xml", 
      					"Vérifier le positionnement du fichier, le fichier est recherché à "
      					+ "l'emplacement suivant : " + ['ctx'.apply_variableDefault()/].getAbsolutePath());
      		}
      		['context'.apply_parameterMethodClassicIn()/].setConfigFile(['ctx'.apply_variableDefault()/].toURI().toURL());
      		[any.buildServerNameWithPrefix()/].enableNaming();
    [else]
      		// RAS : Il s'agit d'une base H2 embarquée.
    [/if]
    	} [/if]
  
  	/**
  	 * Paramétrage de la liste des utilisateurs dans le serveur embarqué.
  	 */
  	private void addBasicAuthUsers() {
  
  		['addBasicAuthUsers'.displayClearUserCodeId()/]
  		[protected (any.getUserCodeId('addBasicAuthUsers')) startTagPrefix('// ') endTagPrefix('// ')]
      
  		  if(null != [any.buildServerNameWithPrefix()/]) {
		  [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
		    HashLoginService ['login service'.apply_variableDefault()/] = new HashLoginService("[any.getDefaultRealmParameter()/]");
		    UserStore ['user store'.apply_variableDefault()/] = new UserStore();
		    ['user store'.apply_variableDefault()/].addUser("[any.getDefaultAdminParameter()/]", 
		    Credential.getCredential("[any.getDefaultAdminParameter()/]"), new String['['/]] { "[any.getDefaultAdminParameter()/]" });
		    ['login service'.apply_variableDefault()/].setUserStore(['user store'.apply_variableDefault()/]);
		    [any.buildServerNameWithPrefix()/].addBean(['login service'.apply_variableDefault()/]);
          [/if]
          [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
            [any.buildServerNameWithPrefix()/].addRole("[any.getDefaultAdminParameter()/]", "[any.getDefaultAdminParameter()/]");
            [any.buildServerNameWithPrefix()/].addRole("[any.getDefaultAdminParameter()/]", "[any.getDefaultMonitoringParameter()/]");
            [any.buildServerNameWithPrefix()/].addUser("[any.getDefaultAdminParameter()/]", "[any.getDefaultAdminParameter()/]");
          [/if]
      }
         
      [/protected]
  
  	}
  
  	/**
  	 * Mise en écoute du serveur et tentative d'arrêt en cas de détection d'un crash
  	 * de la JVM. On place ici un test pour vérifier le bon démarrage du filtre,
  	 * cela permet de forcer l'arrêt du serveur, codé à la base pour être résilient
  	 * sur les erreurs d'initialisation des webapps.
  	 * 
  	 * @throws InterruptedException 
  	 */
  	public void waitForInterrupt() throws Exception {
  
  		['waitForInterrupt'.displayClearUserCodeId()/]
     		[protected (any.getUserCodeId('waitForInterrupt')) startTagPrefix('// ') endTagPrefix('// ')]
         
         		if (RsFilter_Abs.hasInitializationfailure()) {
         			['log'.apply_attributeStatic()/].fatal("Lancement du serveur safran : KO. Arrêt du serveur...\n" );
         			Runtime.getRuntime().halt(1);
         		} else {
         			['log'.apply_attributeStatic()/].info("Lancement du serveur [any.getApplicationName()/] : OK.\nAppuyez sur n'importe quelle touche pour stopper le serveur...\n");
         		}
         		
         		if(System.in.read()!=-1) {
         			stop();
         		}
         		// [any.buildServerNameWithPrefix()/].[any.buildWaitForInterrupt()/];
         
       [/protected]
  	}
  
  	/**
  	 * Mise en arrêt du serveur embarqué.
  	 * @throws Exception
  	 */
  	public void stop() throws Exception {
  
  		['stop'.displayClearUserCodeId()/]
     		[protected (any.getUserCodeId('stop')) startTagPrefix('// ') endTagPrefix('// ')]
         
         		['log'.apply_attributeStatic()/].info("Demande de fermeture pour le serveur [any.getApplicationName()/]...");
         		if(null != [any.buildServerNameWithPrefix()/]) {
         			try {
         				[any.buildServerNameWithPrefix()/].stop();
         [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]
           				[any.buildServerNameWithPrefix()/].destroy();
         [/if]
         				[any.buildServerNameWithPrefix()/] = null;
         				Runtime.getRuntime().halt(0);
         			} catch (Exception  ['e'.apply_variableDefault()/]) {
         				['log'.apply_attributeStatic()/].info("Fermeture du serveur OK mais avec un avertissement : " +  ['e'.apply_variableDefault()/]);
         			}
         		}
         		['log'.apply_attributeStatic()/].info("Fermeture du serveur [any.getApplicationName()/] : OK.");
         		
       [/protected]
  
  	}
  }
[/template]

[comment : /]
[template private writeComment(any : ecore::EObject) post(self.trim())]
  // Décommenter la/les ligne(s) si dessous et commenter la/les ligne(s)
  // actuelle(s) de recuperation et de l'enregistrement de la webapp dans le
  // serveur avant d'effectuer le packaging avec maven pour la mise en production
  // de l'application.[/template]

[comment : Construction nom complet (avec l'eventuel prefix) de la variable pour le serveur./]
[template private buildServerNameWithPrefix(any : ecore::EObject) post(self.trim())]
  [any.getAffectationPrefix()/][any.buildServerName()/] [/template]

[comment : Construction nom de la variable pour le serveur./]
[template private buildServerName(any : ecore::EObject) post(self.trim())]
  [(any.getHttpEmbeddedServer() + ' server').apply_attributeDefault()/] [/template]

[comment : Construction du type pour le serveur./]
[template private buildServerType(any : ecore::EObject) post(self.trim())]
  [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]Server[/if]
  [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]Tomcat[/if]
[/template]

[comment : Construction de la methode d'attente de mise en arret pour le serveur./]
[template private buildWaitForInterrupt(any : ecore::EObject) post(self.trim())]
  [if ('jetty'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]join()[/if]
  [if ('tomcat'.equalsIgnoreCase(any.getHttpEmbeddedServer()))]getServer().await()[/if]
[/template]

[comment : Recuperation du contexte pour l'application. /]
[query private getContext(mainWebapp : Boolean) : String = if mainWebapp and mainWebapp.hasToWriteOnlyWebappForApi() or not mainWebapp then '/api' else '' endif/]
