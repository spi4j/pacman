[module LivraisonHebergement('http://www.eclipse.org/ocl/1.1.0/Ecore')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::configuration::common::properties/]

[comment encoding = UTF-8 /]
[template public livraisonHebergementPom(any : ecore::EObject) post(self.trim())]
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <parent>
          <groupId>[any.getApplicationPackage()/]</groupId>
          <artifactId>[any.getApplicationName()/]</artifactId>
          <version>[any.getVersion()/]</version>
      </parent>
      <artifactId>[any.getDeliveryProjectName()/]</artifactId>
      <packaging>pom</packaging>
      <name>[any.getApplicationName()/] - Packaging de la livraison pour l'hebergement</name>
  
      <build>
          <plugins>
              <plugin>
                  <artifactId>maven-assembly-plugin</artifactId>
                  <version>${maven-assembly-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
                  <configuration>
                      <descriptors>
                          <descriptor>assembly.xml</descriptor>
                      </descriptors>
                  </configuration>
                  <executions>
                      <execution>
                          <phase>package</phase>
                          <goals>
                              <goal>single</goal>
                          </goals>
                      </execution>
                  </executions>
              </plugin>
          </plugins>
      </build>
  
      <dependencies>
  [if ('swing'.equalsIgnoreCase(any.getClient()) or any.useWS())]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getWebappProjectName()/]</artifactId>
                <version>${project.version}</version>
                <type>war</type>
            </dependency>
  [/if]
  [if ('swing'.equalsIgnoreCase(any.getClient()))]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getClientJavaWebStartProjectName()/]</artifactId>
                <version>${project.version}</version>
                <type>war</type>
            </dependency>
  [elseif ('gwt'.equalsIgnoreCase(any.getClient()))]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getClientGwtProjectName()/] </artifactId>
                <version>${project.version}</version>
                <type>jar</type>
            </dependency>
  [elseif ('jsf'.equalsIgnoreCase(any.getClient()))]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getClientJsfProjectName()/]</artifactId>
                <version>${project.version}</version>
                <type>war</type>
            </dependency>
  [elseif ('jsp'.equalsIgnoreCase(any.getClient()))]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getClientJspProjectName()/]</artifactId>
                <version>${project.version}</version>
                <type>war</type>
            </dependency>
  [elseif (any.isLibraryRS())]
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>[any.getServerProjectName()/]</artifactId>
                <version>${project.version}</version>
                <type>jar</type>
            </dependency>
  [/if]
      </dependencies>
  </project>[/template]

[template public livraisonHebergementAssembly(any : ecore::EObject) post(self.trim())]
  <?xml version='1.0' encoding='UTF-8'?>
  <assembly>
      <id>zipFile</id>
      <formats>
          <format>zip</format>
      </formats>
      <includeBaseDirectory>false</includeBaseDirectory>
  
  [if (any.isLibraryRS())]
    	<!-- Génération des deux jars de la librairie contenant : 
    		- Les fichiers du commons (ensemble des entités au format Xto)
    		- Les clients de la partie server pour les appels des différentes ressources.  
    	-->
  [else]
        <!-- On construit un zip pour livraison au centre d'hebergement et contenant :
            - les fichiers war des webapps a deployer en hebergement
            - le doc de la procedure d'installation en hebergement
            (il faut bien sûr que tous ces fichiers existent avec les noms utilises ci-dessous, 
    		ce qui depend largement des differents pom.xml)
         -->
  [/if]
        <dependencySets>
  [if ('swing'.equalsIgnoreCase(any.getClient()))]
      		<dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getServerProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp serveur -->
                    <include>[any.getApplicationPackage()/]:[any.getWebappProjectName()/]:war</include>
                </includes>
             </dependencySet> 
  [/if]
  [if (not any.hasClient() and any.useWS())]
      		<dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getWebappProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp serveur -->
                    <include>[any.getApplicationPackage()/]:[any.getWebappProjectName()/]:war</include>
                </includes>
             </dependencySet> 
  [/if]
  [if ('swing'.equalsIgnoreCase(any.getClient()))]
             <dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getClientSwingProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp client RDA -->
                    <include>[any.getApplicationPackage()/]:[any.getClientJavaWebStartProjectName()/]:war</include>
                </includes>
             </dependencySet>
  [elseif ('gwt'.equalsIgnoreCase(any.getClient()))]
             <dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getClientGwtProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp client GWT -->
                    <include>[any.getApplicationPackage()/]:[any.getApplicationName()/]-client-[any.getClient()/]:war</include>
                </includes>
             </dependencySet>
  [elseif ('jsf'.equalsIgnoreCase(any.getClient()))]
             <dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getClientJsfProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp client JSF -->
                    <include>[any.getApplicationPackage()/]:[any.getApplicationName()/]-client-[any.getClient()/]:war</include>
                </includes>
             </dependencySet>
  [elseif ('jsp'.equalsIgnoreCase(any.getClient()))]
             <dependencySet>
                <outputDirectory></outputDirectory>
                <outputFileNameMapping>[any.getClientJspProjectName()/].war</outputFileNameMapping>
                <includes>
                    <!-- Binaire pour deploiement webapp client JSP -->
                    <include>[any.getApplicationPackage()/]:[any.getApplicationName()/]-client-[any.getClient()/]:war</include>
                </includes>
             </dependencySet>
  [/if]
  [if (any.isLibraryRS())]
    		<!-- Génération des deux jars de la librairie. -->
    		 <dependencySet>
    			<outputDirectory>/</outputDirectory>
    			<useProjectArtifact>false</useProjectArtifact>
    			<includes>
    				<include>[any.getApplicationPackage()/]:[any.getServerProjectName()/]:jar</include>
    				<include>[any.getApplicationPackage()/]:[any.getCommonProjectName()/]:jar</include>
    			</includes>
    		 </dependencySet>
    		 <!-- Génération des jars pour les dépendances (projets non Maven). -->
    		 <dependencySet>
    			<outputDirectory>/dependencies</outputDirectory>
    			<useProjectArtifact>false</useProjectArtifact>
    			<excludes>
    				<exclude>[any.getApplicationPackage()/]:[any.getServerProjectName()/]:jar</exclude>
    				<exclude>[any.getApplicationPackage()/]:[any.getCommonProjectName()/]:jar</exclude>
    			</excludes>
    		 </dependencySet>
  [/if]
       </dependencySets>
  
      <fileSets>
  [if (any.isLibraryRS())]
    		<fileSet>
    			<directory>../[any.getServerProjectName()/]/</directory>
    			<outputDirectory></outputDirectory>
    			<includes>
    				<include>README.txt</include>
    			</includes>
    		</fileSet>
    		<fileSet>
    			<directory>../[any.getServerProjectName()/]/</directory>
    			<outputDirectory>poms/server</outputDirectory>
    			<includes>
    				<include>pom.xml</include>
    			</includes>
    		</fileSet>
    		<fileSet>
    			<directory>../[any.getCommonProjectName()/]/</directory>
    			<outputDirectory>poms/commons</outputDirectory>
    			<includes>
    				<include>pom.xml</include>
    			</includes>
    		</fileSet>
    		<fileSet>
    			<directory>../</directory>
    			<outputDirectory>poms</outputDirectory>
    			<includes>
    				<include>pom.xml</include>
    			</includes>
    		</fileSet>		
  [/if]
  [if (any.hasHttpEmbeddedServer())]
    		<fileSet>
    			<directory>../[any.getApplicationName()/]-[if (any.hasClientWeb())]client-[any.getClient()/][else]webapp[/if]/src/main/resources</directory>
    			<outputDirectory>bin</outputDirectory>
    			<includes>
    				<include>EmbeddedTomcat.bat</include>
    				<include>[any.getApplicationNameUpperFirst()/]Startup.bat</include>
    			</includes>
    		</fileSet>
  [/if]
  [if (any.hasHttpEmbeddedServer() and not any.useH2EmbeddedDatabase())]
    		<fileSet>
    			<directory>../[any.getServerProjectName()/]/[any.getServerResourcesDir()/]</directory>
    			<outputDirectory>conf</outputDirectory>
    			<includes>
    				<include>context.xml</include>
    			</includes>
    		</fileSet>
  [/if]
  [if (any.useH2EmbeddedDatabase())]
           	<fileSet>
            	<directory>../[any.getServerProjectName()/]/[any.getServerSQLDir()/]</directory>
            	<outputDirectory>conf</outputDirectory>
            	<includes>
            		<include>init_data_[any.getApplicationName()/].sql</include>
            		<include>create_tables_[any.getApplicationName()/]_H2.sql</include>
            	</includes>
            </fileSet>
  [/if]
          <fileSet>
  			<directory>../[any.getApplicationName()/]-[if (any.hasClientWeb())]client-[any.getClient()/][else]server[/if]/src/main/resources</directory>
              <outputDirectory>[if (any.isLibraryRS())]properties[else]conf[/if]</outputDirectory>
              <includes>
                  <!-- Exemple de configuration log4j -->
                  <include>log4j2.xml</include>
  				[if (any.isLibraryRS())]<include>[any.getApplicationName()/]Application.properties</include>[/if]
  				[if (any.isLibraryRS())]<include>[any.getApplicationName()/]Tokens.properties</include>[/if]
              </includes>
          </fileSet>
          <fileSet>
              <directory>..</directory>
              <outputDirectory></outputDirectory>
              <includes>
                  <!-- Procedure d'installation -->
                  <include>*.doc</include>
              </includes>
          </fileSet>
  
  		<!--
  		[protected ('filesets') startTagPrefix('// ') endTagPrefix('// ')]
      		-->
      
      		<!--
    [/protected]
  
  		-->
      </fileSets>
  </assembly>[/template]
