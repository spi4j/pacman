[module Servlets('http://www.eclipse.org/ocl/1.1.0/Ecore')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::configuration::common::names/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::commonRule/]

[comment encoding = UTF-8 /]
[template public buildInfoServlet(any : ecore::EObject) post(self.trim())]
  [any.licence()/]
  package [any.getApplicationPackage()/];
  
  import fr.spi4j.admin.BuildInfoServlet;
  import fr.spi4j.admin.BuildInfo_Abs;
  
  
  /**
   * La servlet utilisee pour retourner les informations sur la version deployee de
   * l'application.
   */
  
  public class [any.buildInfoServletClassName()/] extends BuildInfoServlet
  {
  
     private static final long serialVersionUID = 1L;
  
     @Override
     protected BuildInfo_Abs getBuildInfo ()
     {
        return [any.buildInfoClassName()/].['instance'.apply_methodGet()/] ();
     }
  
     @Override
     protected String getContent ()
     {
        final StringBuilder [' string content'.apply_variableFinal()/] = new StringBuilder (super.getContent());
        [' string content'.apply_variableFinal()/].append ("Identifiant unique : <b>").append ((([any.buildInfoClassName()/])getBuildInfo ()).getUniqueId ())
                 .append("</b>").append("<br>");
        // build.id pour la date et l'heure du build
        [' string content'.apply_variableFinal()/].append ("Build id : <b>").append ((([any.buildInfoClassName()/]) getBuildInfo ()).getBuildId())
                 .append("</b>").append ("<br>");
        [' string content'.apply_variableFinal()/].append("Version Java : <b>").append (System.getProperty ("java.version")).append ("</b>")
                 .append ("<br>");
        return [' string content'.apply_variableFinal()/].toString ();
     }
  }[/template]

[template public administrationServiceEnum(any : ecore::EObject) post(self.trim())]
  [any.licence()/]
  package [any.getApplicationPackage()/];
  
  import fr.spi4j.admin.AdministrationService_Itf;
  
  /**
   * Services disponibles pour le servlet d'administration.
   */
  enum [any.buildAdministrationServiceEnumName()/] implements AdministrationService_Itf {
  
  	INDEX("/", "index.html"),
  
  	CLEAR_CACHES("/clearCaches", "clearCaches.html");
  
  	private final String ['path'.apply_attributeFinal()/];
  
  	private final String ['servletContent'.apply_attributeFinal()/];
  
  	/**
  	 * Constructeur
  	 * 
  	 * @param ['path'.apply_parameterMethodClassicIn()/]
  	 *            l'url de ce service
  	 * @param ['servlet content'.apply_parameterMethodClassicIn()/]
  	 *            le chemin de la jsp a afficher a l'utilisateur (les jsp doivent se
  	 *            trouver dans src/main/resources/fr/spi4j/admin/)
  	 */
  	private [any.buildAdministrationServiceEnumName()/](final String ['path'.apply_parameterMethodClassicIn()/], final String ['servlet content'.apply_parameterMethodClassicIn()/]) {
  		[any.getAffectationPrefix()/]['path'.apply_attributeFinal()/] = ['path'.apply_parameterMethodClassicIn()/];
  		[any.getAffectationPrefix()/]['servlet content'.apply_attributeFinal()/] = ['servlet content'.apply_parameterMethodClassicIn()/];
  	}
  
  	@Override
  	public String getServletContentPath() {
  		return [' servlet content'.apply_attributeFinal()/];
  	}
  
  	/**
  	 * Retrouve un service a partir de son url
  	 * 
  	 * @param ['path'.apply_parameterMethodClassicIn()/]
  	 *            l'url cherchee
  	 * @return le service trouvee ou null si aucun service n'est defini a cette url
  	 */
  	public static [any.buildAdministrationServiceEnumName()/] ['service from path'.apply_methodGet()/] (final String ['path'.apply_parameterMethodClassicIn()/]) {
  		for (final [any.buildAdministrationServiceEnumName()/] ['service'.apply_variableDefault()/] : values()) {
  			if (['service'.apply_variableDefault()/].['path'.apply_attributeFinal()/].equalsIgnoreCase(['path'.apply_parameterMethodClassicIn()/])) {
  				return ['service'.apply_variableDefault()/];
  			}
  		}
  		return null;
  	}
  }
[/template]

[template public administrationServlet(any : ecore::EObject) post(self.trim())]
  [any.licence()/]
  package [any.getApplicationPackage()/];
  
  import java.util.Arrays;
  import java.util.List;
  import java.util.Map;
  
  import org.apache.logging.log4j.Logger;
  import org.apache.logging.log4j.LogManager;
  
  import fr.spi4j.admin.AdministrationService_Itf;
  import fr.spi4j.admin.AdministrationServlet;
  import fr.spi4j.persistence.UserPersistence_Abs;
  
  /**
   * Servlet d'administration.
   */
  public class [any.buildAdministrationServletClassName()/] extends AdministrationServlet
  {
     private static final long serialVersionUID = 1L;
  
     @Override
     protected AdministrationService_Itf findService (final String ['path'.apply_parameterMethodClassicIn()/])
     {
        final AdministrationService_Itf ['service'.apply_variableFinal()/] = [any.buildAdministrationServiceEnumName()/].['service from path'.apply_methodGet()/] (['path'.apply_parameterMethodClassicIn()/]);
        if (['service'.apply_variableFinal()/] != null)
        {
           return ['service'.apply_variableFinal()/];
        }
        return super.findService(['path'.apply_parameterMethodClassicIn()/]);
     }
  
     @Override
     @SuppressWarnings("rawtypes")
     public void executeService (final AdministrationService_Itf ['service'.apply_parameterMethodClassicIn()/], final Map ['parameters'.apply_parameterMethodClassicIn()/])
     {
        final Logger ['logger'.apply_variableFinal()/] = LogManager.getLogger([any.buildAdministrationServletClassName()/].class);
        if (['service'.apply_parameterMethodClassicIn()/] == [any.buildAdministrationServiceEnumName()/].CLEAR_CACHES)
        {
           ['logger'.apply_variableFinal()/].info("Demande de purge et rechargement du cache");
           [any.buildCacheManagerClassName()/].clearCaches();
        }
        else
        {
           super.executeService(['service'.apply_parameterMethodClassicIn()/], ['parameters'.apply_parameterMethodClassicIn()/]);
        }
     }
  
     @Override
     protected List<UserPersistence_Abs> getUserPersistences ()
     {
        return Arrays.asList(null);
     }
  }
[/template]

[template public cacheManager(any : ecore::EObject) post(self.trim())]
  [any.licence()/]
  package [any.getApplicationPackage()/];
  
  import jakarta.servlet.ServletContextEvent;
  import jakarta.servlet.ServletContextListener;
  
  import org.apache.logging.log4j.Logger;
  import org.apache.logging.log4j.LogManager;
  
  import fr.spi4j.SpiJob_Abs;
  import fr.spi4j.business.ServiceCacheProxy;
  import fr.spi4j.persistence.UserPersistence_Abs;
  
  /**
   * Classe permettant de demarrer le job de purge des caches lors de l'initialisation de la webapp.
   * @author [any.getAuthorName()/]
   */
  public class [any.buildCacheManagerClassName()/] implements ServletContextListener
  {
  
     private static final Logger ['log'.apply_attributeFinalStatic()/] = LogManager.getLogger([any.buildCacheManagerClassName()/].class);
  
     /**
      * Heure de la purge quotidienne des caches.
      */
     private static final int ['clear caches hour'.apply_attributeFinalStatic()/] = 0;
  
     /**
      * Le job pour la purge des caches.
      */
     private transient SpiJob_Abs ['job purge cache'.apply_attributeFinal()/];
  
     @Override
     public void contextInitialized (final ServletContextEvent ['sce'.apply_parameterMethodClassicIn()/])
     {
        ['job purge cache'.apply_attributeFinal()/] = new SpiJob_Abs("Purge des caches")
        {
           @Override
           protected void run () throws Throwable
           {
              clearCaches();
           }
  
           @Override
           protected boolean hasTransaction ()
           {
              return false;
           }
  
           @Override
           protected void doOnException (final Throwable ['ex'.apply_parameterMethodClassicIn()/])
           {
              ['log'.apply_attributeFinalStatic()/].warn(['ex'.apply_parameterMethodClassicIn()/].toString(), ['ex'.apply_parameterMethodClassicIn()/]);
           }
  
           @Override
           protected UserPersistence_Abs getUserPersistence ()
           {
              return null;
           }
        };
        // on purge les caches de service tous les jours a l'heure souhaitee
        ['job purge cache'.apply_attributeFinal()/].scheduleDaily(['clear caches hour'.apply_attributeFinalStatic()/]);
  
     }
  
     @Override
     public void contextDestroyed (final ServletContextEvent ['sce'.apply_parameterMethodClassicIn()/])
     {
        if (['job purge cache'.apply_attributeFinal()/] != null)
        {
           // Eviter les fuites memoires.
           ['job purge cache'.apply_attributeFinal()/].cancel();
        }
        ServiceCacheProxy.shutdown();
     }
  
     public static void clearCaches ()
     {
  
        ServiceCacheProxy.clearCaches();
        ['log'.apply_attributeFinalStatic()/].info("Caches purges");
  
  	  // for reloading caches
  	  [protected (any.getUserCodeId('for reloading caches')) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
        ['log'.apply_attributeFinalStatic()/].info("Caches recharges");
     }
  }[/template]