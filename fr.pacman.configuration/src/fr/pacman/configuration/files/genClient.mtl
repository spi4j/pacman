[comment encoding = UTF-8 /]
[module genClient('http://www.eclipse.org/ocl/1.1.0/Ecore')/]

[import fr::pacman::commons::common::properties / ]
[import fr::pacman::commons::common::log4j / ]
[import fr::pacman::commons::common::packages / ]
[import fr::pacman::commons::common::names / ]
[import fr::pacman::commons::common::classes / ]
[import fr::pacman::commons::common::scripts /]

[import fr::pacman::configuration::project::ClientSwing /]
[import fr::pacman::configuration::project::ClientIntegration /]
[import fr::pacman::configuration::project::ClientJavaWebStart /]
[import fr::pacman::configuration::project::ClientGwt /]
[import fr::pacman::configuration::project::ClientJsf /]
[import fr::pacman::configuration::project::ClientJsp /]
[import fr::pacman::configuration::project::Bootstrap /]
[import fr::pacman::configuration::files::genBDD /]

[import fr::pacman::configuration::common::listeners /]
[import fr::pacman::configuration::common::properties/]
[import fr::pacman::configuration::common::names /]
[import fr::pacman::configuration::common::startupScripts /]

[template public genClient(any : OclAny, fromStarter : Boolean)]

[comment : Creation du pom de xxx-client-swing /]
[if 'swing'.equalsIgnoreCase(getClient())]

[if fromStarter or any.hasToGenerateRootFiles()]
[file (filename(getClientSwingProjectName(), '', 'pom.xml'), false, 'UTF-8')]
[clientSwingPom() /]
[/file]
[comment : Creation du pom de xxx-Integration /]
[file (filename(getClientIntegrationProjectName(), '', 'pom.xml'), false, 'UTF-8')]
[integrationPom() /]
[/file]
[comment : Creation du pom de xxx-JavaWebStart /]
[file (filename(getClientJavaWebStartProjectName(),'', 'pom.xml'), false, 'UTF-8')]
[javaWebStartPom() /]
[/file]
[/if]

[comment : Creation des fichiers log4j /]
[if useLog4J() and (fromStarter or any.hasToGenerateRootFiles())]

[comment : Creation du fichier log4j2.xml pour le webstart /]
[file (filename(getClientJavaWebStartProjectName(), getClientJavaWebStartResourcesDir(), 'log4j2.xml'), false, 'UTF-8')]
[log4j('webstart')/]
[/file]

[comment : Creation du fichier log4j2.xml /]
[file (filename(getClientSwingProjectName(), getClientSwingResourcesDir(), 'log4j2.xml'), false, 'UTF-8')]
[log4j('swing')/]
[/file]

[/if]

[comment : Creation des fichiers pour le BDD /]
[if useTestBDD() ]
[genBDD(getClientIntegrationProjectName(), getClientSwingTestDir())/]
[/if]

[comment : Creation du build.xml utilise par le pom de xxx-JavaWebStart /]
[file (filename(getClientJavaWebStartProjectName(), '', 'build-jws.xml'), false, 'UTF-8')]
[javaWebStartBuildJwsXml() /]
[/file]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment : Creation du fichier web.xml /]
[file (filename(getClientJavaWebStartProjectName(), getClientJWebStartWebDir(), 'web.xml'), false, 'UTF-8')]
[javaWebStartWebXml() /]
[/file]
[/if]

[comment : Creation du fichier index.html /]
[file (filename(getClientJavaWebStartProjectName(), getClientJWebStartSourceDir(), 'index.html'), false, 'UTF-8')]
[javaWebStartIndexHtml() /]
[/file]

[comment : Creation du fichier client.jnlp /]
[file (filename(getClientJavaWebStartProjectName(), getClientJWebStartSourceDir(), 'client.jnlp'), false, 'UTF-8')]
[javaWebStartClientJnlp() /]
[/file]

[comment : Creation du fichier player.jnlp /]
[file (filename(getClientJavaWebStartProjectName(), getClientJWebStartSourceDir(), 'player.jnlp'), false, 'UTF-8')]
[javaWebStartPlayerJnlp() /]
[/file]

[comment Creation du fichier key/README.txt /]
[file (filename(getClientJavaWebStartProjectName(), getClientJWebStartKeyDir(), 'README.txt'), false, 'UTF-8')]
[javaWebStartReadmeTxt() /]
[/file]

[comment : Creation du fichier SwingLanceurDev.java /]
[file (filename(getClientIntegrationProjectName(), getClientIntegrationSourceDir() + buildPackageClientIntegrationLauncher(),'SwingLanceurDev.java'), false, 'UTF-8')]
[integrationSwingLanceurDev() /]
[/file]

[elseif 'gwt'.equalsIgnoreCase(getClient())]

[comment : Creation des scripts de démarrage pour les serveurs embarqués. /]
[if (fromStarter or hasToGenerateRootFiles()) and hasHttpEmbeddedServer()]
[file (filename(getClientGwtProjectName(), getClientGwtResourcesDir(), buildEmbeddedHttpScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpServerBat()/]
[/file]

[file (filename(getClientGwtProjectName(), getClientGwtResourcesDir(), buildEmbeddedHttpStartupScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpStartupBat()/]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment : Creation du pom de xxx-client-gwt /]
[file (filename(getClientGwtProjectName(), '', 'pom.xml'), false, 'UTF-8')]
[clientGwtPom() /]
[/file]
[/if]

[comment : Creation des fichiers pour le BDD /]
[if useTestBDD() ]
[genBDD(getClientGwtProjectName() , getClientGwtTestDir())/]
[/if]

[comment : Creation des fichiers log4j /]
[if useLog4J() and (fromStarter or any.hasToGenerateRootFiles())]
[comment : Creation du fichier log4j2.xml /]
[file (filename(getClientGwtProjectName(), getClientGwtResourcesDir(), 'log4j2.xml'), false, 'UTF-8')]
[log4j('swing')/]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment : Creation du web.xml /]
[file (filename(getClientGwtProjectName(), getClientGwtWebDir(), 'web.xml'), false, 'UTF-8')]
[clientGwtWebXml()/]
[/file]
[/if]

[comment : Creation d'un fichier de services services_nomAppli.xml vide pour le demarage /]
[file (filename(getClientGwtProjectName(), getClientGwtWebDir(), buildServicesXmlName()), false, 'UTF-8')]
[/file]

[elseif 'jsf'.equalsIgnoreCase(getClient())]

[comment : Creation des scripts de démarrage pour les serveurs embarqués. /]
[if (fromStarter or hasToGenerateRootFiles()) and hasHttpEmbeddedServer()]
[file (filename(getClientJsfProjectName(), getClientJsfResourcesDir(), buildEmbeddedHttpScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpServerBat()/]
[/file]

[file (filename(getClientJsfProjectName(), getClientJsfResourcesDir(), buildEmbeddedHttpStartupScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpStartupBat()/]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment Creation du pom de xxx-client-jsf /]
[file (filename(getClientJsfProjectName(), '', 'pom.xml'), false, 'UTF-8')]
[clientJsfPom() /]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment : Creation du fichier WEB-INF/faces-config.xml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'faces-config.xml'), false, 'UTF-8')]
[clientJsfFacesConfigXml() /]
[/file]
[/if]

[comment : Creation du fichier package/common/AppliIdConverter.java /]
[file (filename(getClientJsfProjectName(), getClientJsfSourceDir(), buildJsfCommonPackage(), buildAppliIdConverterXmlName() + '.java'), false, 'UTF-8')]
[clientJsfConverter() /]
[/file]

[comment : Creation des fichiers log4j /]
[if useLog4J() and (fromStarter or any.hasToGenerateRootFiles())]
[comment : Creation du fichier log4j2.xml /]
[file (filename(getClientJsfProjectName(), getClientJsfResourcesDir(), 'log4j2.xml'), false, 'UTF-8')]
[log4j('swing')/]
[/file]
[/if]

[comment : Creation du fichier WEB-INF/web.xml /]
[if fromStarter or any.hasToGenerateRootFiles()]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'web.xml'), false, 'UTF-8')]
[clientJsfWebXml() /]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment : Creation du fichier WEB-INF/templates/layout.xhtml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'templates/layout.xhtml'), false, 'UTF-8')]
[clientJsfLayoutXhtml() /]
[/file]
[comment : Creation du fichier index.xhtml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebappDir(), 'index.xhtml'), false, 'UTF-8')]
[clientJsfIndexXhtml() /]
[/file]
[comment : Creation du fichier header.xhtml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'templates/header.xhtml'), false, 'UTF-8')]
[clientJsfHeaderXhtml() /]
[/file]
[comment : Creation du fichier content.xhtml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'templates/content.xhtml'), false, 'UTF-8')]
[clientJsfContentXhtml() /]
[/file]
[comment : Creation du fichier footer.xhtml /]
[file (filename(getClientJsfProjectName(), getClientJsfWebDir(), 'templates/footer.xhtml'), false, 'UTF-8')]
[clientJsfFooterXhtml() /]
[/file]
[comment : Creation du fichier resources/css/styles.css /]
[file (filename(getClientJsfProjectName(), getClientJsfResourcesDir(), 'css/styles.css'), false, 'UTF-8')]
[clientJsfStylesCss() /]
[/file]
[/if]

[comment : Creation du fichier bean/JsfBean.java /]
[file (filename(getClientJsfProjectName(), getClientJsfSourceDir(), buildBeanPackage(), buildJsfBeanAbstractName() + '.java'), false, 'UTF-8')]
[clientJsfAbstractBean() /]
[/file]
[comment : Creation du fichier package/InitializationListener.java /]
[file (filename(getClientJsfProjectName(), getClientJsfSourceDir(), getApplicationPackage(), 'InitializationListener.java'), false, 'UTF-8')]
[clientInitialiseListener() /]
[/file]

[comment : Ajout d'une classe de boostrap dans le cas des serveurs embarques. /]
[if (fromStarter or hasToGenerateRootFiles()) and hasHttpEmbeddedServer()]
[file (filename(getClientJsfProjectName(), getClientJsfSourceDir(), getApplicationPackage(), buildBoostrapClassName() + '.java'), false, 'UTF-8')]
[httpServerBootstrap(false)/]
[/file]
[/if]

[elseif 'jsp'.equalsIgnoreCase(getClient())]

[comment : Creation des scripts de démarrage pour les serveurs embarqués. /]
[if (fromStarter or hasToGenerateRootFiles()) and hasHttpEmbeddedServer()]
[file (filename(getClientJspProjectName(), getClientJspResourcesDir(), buildEmbeddedHttpScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpServerBat()/]
[/file]

[file (filename(getClientJspProjectName(), getClientJspResourcesDir(), buildEmbeddedHttpStartupScriptName()), false, 'UTF-8')]
[clientEmbeddedHttpStartupBat()/]
[/file]
[/if]

[if fromStarter or any.hasToGenerateRootFiles()]
[comment Creation du pom de xxx-client-jsp /]
[file (filename(getClientJspProjectName(), '', 'pom.xml'), false, 'UTF-8')]
[clientJspPom() /]
[/file]
[/if]

[comment : Creation des fichiers log4j /]
[if useLog4J() and (fromStarter or any.hasToGenerateRootFiles())]
[comment : Creation du fichier log4j2.xml /]
[file (filename(getClientJspProjectName(), getClientJspResourcesDir(), 'log4j2.xml'), false, 'UTF-8')]
[log4j('jsp')/]
[/file]
[/if]

[comment : Creation du fichier index.jsp et d'un dispatcher par defaut. /]
[if fromStarter]
[file (filename(getClientJspProjectName(), getClientJspWebappDir(), 'index.jsp'), false, 'UTF-8')]
[clientJspIndex() /]
[/file]

[file (filename(getClientJspProjectName(), getClientJspSourceDir(), getApplicationPackage(), buildJspDispatcherClassName() + '.java'), false, 'UTF-8')]
[clientJspDefaultDispatcher()/]
[/file]
[/if]

[comment : Creation du fichier WEB-INF/web.xml /]
[if fromStarter or any.hasToGenerateRootFiles()]
[file (filename(getClientJspProjectName(), getClientJspWebDir(), 'web.xml'), false, 'UTF-8')]
[clientJspWebXml() /]
[/file]

[comment : Creation du fichier css/style.css /]
[file (filename(getClientJspProjectName(), getClientJspWebappDir(), 'css', 'style.css'), false, 'UTF-8')]
[clientJspCss() /]
[/file]

[comment : Creation du fichier package/InitializationListener.java /]
[file (filename(getClientJspProjectName(), getClientJspSourceDir(), getApplicationPackage(), 'InitializationListener.java'), false, 'UTF-8')]
[clientInitialiseListener() /]
[/file]

[comment : Ajout d'une classe de boostrap dans le cas des serveurs embarques. /]
[if (fromStarter or hasToGenerateRootFiles()) and hasHttpEmbeddedServer()]
[file (filename(getClientJspProjectName(), getClientJspSourceDir(), getApplicationPackage(), buildBoostrapClassName() + '.java'), false, 'UTF-8')]
[httpServerBootstrap(false)/]
[/file]
[/if]
[/if][/if]

[/template]