[module names('http://www.eclipse.org/ocl/1.1.0/Ecore')/]

[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::convention::rule::classRule/]

[comment encoding = UTF-8 /]
[query public buildJSFContextXmlName(any : ecore::EObject) : String = any.getApplicationName() + '-jsf'/]

[query public buildAppliIdConverterXmlName(any : ecore::EObject) : String = any.getApplicationNameUpperFirst() + 'Converter'/]

[query public buildInfoClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' build info').apply_classDefault()/]

[query public buildInitializationListenerClassName(any : ecore::EObject) : String = ' initialization listener'.apply_classDefault()/]

[query public buildConfigProviderClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' config provider').apply_classDefault()/]

[query public buildInfoServletClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' build info servlet').apply_classDefault()/]

[query public buildCacheManagerClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' cache manager').apply_classDefault()/]

[query public buildAdministrationServiceEnumName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' administration service').apply_classEnum()/]

[query public buildAdministrationServletClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' administration servlet').apply_classDefault()/]

[query public buildSecurityManagerClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security manager').apply_classDefault()/]

[query public buildSecurityInitializationClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security initialization').apply_classDefault()/]

[query public buildSecurityListenerClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security listener').apply_classDefault()/]

[query public buildStepsGivenClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' steps given').apply_classDefault()/]

[query public buildStepsThenClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' steps then').apply_classDefault()/]

[query public buildStoryAbstractClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' story').apply_classAbstract()/]

[query public buildXXXStoryClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + 'xxx_ story').apply_classDefault()/]

[query public buildXXXStory(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + 'xxx').apply_classDefault()/]

[query public buildMockitoViewsClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' mockito views').apply_classDefault()/]

[query public buildGwtUserBusinessIntegration(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' gwt user business integration').apply_classDefault()/]

[query public buildServicesXmlName(any : ecore::EObject) : String = 'services_' + any.getApplicationName() + '.xml'/]