package fr.appwhite2.business.api.annuaire;

// Start of user code for imports

import java.util.List;

import fr.appwhite2.business.Appli1Permissions_Itf;
import fr.appwhite2.persistence.api.annuaire.CompetenceEntity_Itf;
import fr.appwhite2.persistence.api.annuaire.PersonneEntity_Itf;
import fr.referentiel.persistence.api.ref.GradeEntity_Itf;
import fr.spi4j.entity.Service_Itf;
import fr.spi4j.exception.Spi4jValidationException;
import fr.spi4j.lib.security.annotations.Permissions;
import fr.spi4j.lib.security.annotations.PermissionsOperator_Enum;


// End of user code

/**
 * Définit le contrat de services spécifiques pour un type 'Personne'.
 * @author MINARM
 */
// Start of user code Annotations Service
@javax.ejb.Local
// End of user code
public interface PersonneService_Itf extends Service_Itf<Long, PersonneEntity_Itf>
{

   /**
    * Obtenir la liste d'objets de type 'Competence' associés à l'instance de type 'Personne'.
    * @param p_personne_id
    *           (In)(*) Personne.
    * @return une liste de CompetenceDto
    */
   List<CompetenceEntity_Itf> findListCompetencesByPersonne (final Long p_personne_id);

   // Start of user code findListPersonneByGrade_Grade_Personne

   /**
    * Recherche la liste des personnes par grade.
    * @param p_grade
    *           (In)(*) le grade recherché.
    * @return la liste des personnes qui ont ce grade.
    */
//   @Permissions(value =
//   {Appli1Permissions_Itf.c_listerPersonnes, Appli1Permissions_Itf.c_accesAnnuaire }, operator = PermissionsOperator_Enum.AND)
   List<PersonneEntity_Itf> findListPersonneByGrade (final GradeEntity_Itf p_grade);

   /* Recherche la liste des personnes par grade.
   * @param p_grade
   *           (In)(*) le grade recherché.
   * @return la liste des personnes qui ont ce grade.
   */
  @Permissions(value =
  {Appli1Permissions_Itf.c_listerPersonnes, Appli1Permissions_Itf.c_accesAnnuaire }, operator = PermissionsOperator_Enum.AND)
  List<PersonneEntity_Itf> findListPersonneByGrade (final Long p_grade);

  
   // End of user code

   // Start of user code findAllFetchAdresses_Personne

   /**
    * Recherche toutes les personnes, avec leurs adresses préchargées.
    * @return toutes les personnes avec leurs adresses.
    */
   List<PersonneEntity_Itf> findAllFetchAdresses ();
   /**
    * Recherche toutes les personnes, avec leurs adresses préchargées.
    * @return toutes les personnes avec leurs adresses.
    */

   // End of user code

   // Start of user code PersonneService_Itf

   // exemple de service spécifique ajouté manuellement par un développeur après génération
   /**
    * Effacer la personne avec tous les éléments connexes (adresses de la personne).
    * @param p_PersonneDto
    *           (In)(*) La personne à effacer (obligatoire).
    */
   @Permissions(Appli1Permissions_Itf.c_supprimerPersonne)
   void deleteCascade (PersonneEntity_Itf p_PersonneDto);
   
   @Override
   @Permissions(Appli1Permissions_Itf.c_supprimerPersonne)
   void delete (PersonneEntity_Itf p_entity) throws Spi4jValidationException;
      

   // End of user code
}
