package = fr.referentiel

idAppli = referentiel1

author = Pacman

# type de la base de données, parmi Oracle, H2, Mysql, Postgresql (plusieurs possibles, séparés par des virgules)
database.type = Oracle, H2

# type de client, pour l'instant uniquement SWING, GWT ou vide
client.type = GWT

server.sql.table.prefix = AW_
server.sql.table.additional_fields = server.sql.table.additional_field.xdmaj, server.sql.table.additional_field.xtopsup
server.sql.table.additional_field.xdmaj.name = XDMAJ
server.sql.table.additional_field.xdmaj.type = Date
#server.sql.table.additional_field.xdmaj.size = 15
server.sql.table.additional_field.xdmaj.notnull = 1
server.sql.table.additional_field.xtopsup.name =  XTOPSUP
server.sql.table.additional_field.xtopsup.type =  Boolean
server.sql.table.additional_field.xtopsup.default =  0
server.sql.table.additional_field.xtopsup.notnull =  1

# flag indiquant si la fetching strategy doit être générée dans l'application (générée par défaut)
# 0 / false = not generated
# 1 / true = generated
# default = true
fetchingstrategy.enabled = true

# flag indiquant si les annotations ejb doivent être générées dans l'application (générées par défaut)
# 0 / false = not generated
# 1 / true = generated
# default = true
ejbservice.enabled = true

# flag indiquant si le log4j2.properties doit être généré dans l'application (généré par défaut)
log4j.enabled = false

# 0 = not generated
# 1 = generated
# default = 0
#requirement.generate.structure = 1
#nombre entier indiquant le niveau de base de génération de classes pour les requirement
# niveau 0 = Une seule classe contenant les requirement, le niveau de base étant "System"
# default = 0
#requirement.category.base.level = 0

#client.source.dir = src/main/java
#client.test.dir = src/test/java

client.gwt.project = appwhite1-gwt
client.gwt.source.dir = src/main/java
client.gwt.resources.dir = src/main/resources
client.gwt.webapp.dir = src/main/webapp
client.gwt.test.dir = src/test/java

commons.project = referentiel-commons
commons.source.dir = src/main/java
commons.test.dir = src/test/java
commons.test.resources.dir = src/test/resources

server.project = referentiel-server
server.source.dir = src/main/java
server.test.dir = src/test/java
server.resources.dir = src/main/resources
server.sql.dir = src/main/sql

#prefix des attributs lors d'une affectation (this. ou rien)
affectationPrefix = 
# Le nom d'un attribut par défaut
attributeDefault = _[CamelCaseIgnoreFirst/]
# Le nom d'attribut dans une affectation dans le constructeur
attributeAffectation = {$attributeDefault}
# Le nom d'un attribut static
attributeStatic = [CamelCaseIgnoreFirst/]
# Le nom d'un attribut final static
attributeFinalStatic = c_[CamelCaseIgnoreFirst/]
# Le nom d'un attribut final
attributeFinal = {$attributeDefault}
# Le nom d'une méthode par défaut
methodDefault = [CamelCase.LowerFirst/]
# Le nom d'une méthode get
methodGet = get_[CamelCaseIgnoreFirst/]
# Le nom d'une méthode set
methodSet = set_[CamelCaseIgnoreFirst/]
# Le nom d'une méthode reset
methodReset = reset_[CamelCaseIgnoreFirst/]
# Le nom d'une classe par défaut
classDefault = [CamelCase/]
# Le nom d'une classe abstraite
classAbstract = [CamelCase/]_Abs
# Le nom d'une interface
classInterface = [CamelCase/]_Itf
# Le nom d'une classe d'implementation
classImplem = [CamelCase/]
# Le nom d'une enumeration
classEnum = [CamelCase/]_Enum
# Le nom d'une classe de test
classTest = [CamelCase/]_Test
# Le nom d'une variable final
variableFinal = v_[CamelCaseIgnoreFirst/]
# Le nom d'une variable par défaut
variableDefault = v_[CamelCaseIgnoreFirst/]
# Le nom d'une variable multiple par défaut
variableMultipleDefault = v_[LanguageC/]
# Le nom d'une variable objet final
variableObjectFinal = v_[CamelCase/]
# Le nom d'une variable par objet défaut
variableObjectDefault = v_[CamelCase/]
# Le nom d'un paramètre IN classic
parameterMethodClassicIn = p_[CamelCase.LowerFirst/]
# Le nom d'un paramètre IN objet
parameterMethodObjectIn = p_[CamelCase.UpperFirst/]
# Le nom d'un parametre OUT classique
parameterMethodClassicOut = p_[CamelCase.LowerFirst/]
# Le nom d'un parametre OUT objet
parameterMethodObjectOut = p_[CamelCase.UpperFirst/]
# Le nom d'un paramètre IN/OUT classique
parameterMethodClassicInOut = p_[CamelCase.LowerFirst/]
# Le nom d'un paramètre IN/OUT objet
parameterMethodObjectInOut = p_[CamelCase.UpperFirst/]
# Le nom d'un paramètre du méthode reset
parameterMethodReset = p_[CamelCase.LowerFirst/]
# Le nom d'un paramètre d'un setter
parameterMethodSetter = p_[CamelCase.LowerFirst/]
# Le nom du package de persistence
packagePersistence = persistence
# Le nom du package d'implementation jdbc
packageImplemJdbc = impl_jdbc
# Le nom du package d'implementation jpa
packageImplemJpa = impl_jpa
# Le nom du package d'api
packageApi = api
# Le nom du package d'implementation server
packageImplemServer = impl_server
# Le nom du package de matching
packageMatching = matching
# Le nom du package du business
packageBusiness = business
# Le nom du package de requirement
packageRequirement = requirement
# La norme à appliquer pour une annotation Java
classAnnotation = [CamelCase/]
# Le nom d'un paramètre Multiple
parameterMethodMultiple = p_[LanguageC/]
# dossier de génération des sources xmi serveur
server.xmi.dir = src/main/xmi
# Le nom d'un attribut par défaut
attributeMultiple = _[LanguageC/]
# Le prefixe des listes
listPrefix = tab
# Le prefixe des map
mapPrefix = map
# Le nom d'une méthode multiple
methodMultiple = [LanguageC/]
#-------------------------------------------------------------
# Generated properties by Pacman Tue Jul 24 11:15:22 CEST 2012
# Le nom d'une variable multiple par défaut
variableMultipleMap = v_{$mapPrefix}_[LanguageC/]
# Le nom d'un paramètre Multiple
parameterMethodMultipleMap = p_{$mapPrefix}_[LanguageC/]

# Tablespace spécifique (si base Oracle)
server.sql.oracle.index.tablespace = 
# flag indiquant si les tests unitaires sur le crud doivent être générés (générés par défaut)
tests.crud.enabled = true
# L'interface ancetre des services avec CRUD
framework.type.Service_Itf = fr.spi4j.business.Service_Itf
# La classe ancetre des services avec CRUD
framework.type.Service_Abs = fr.spi4j.business.Service_Abs
# La classe ancetre de tous les services
framework.type.ApplicationService_Itf = fr.spi4j.business.ApplicationService_Itf
# La classe ancetre de la factory des services
framework.type.UserBusiness_Abs = fr.spi4j.business.UserBusiness_Abs
# L'interface marquant un service comme ayant un cache
framework.type.ServiceReferentiel_Itf = fr.spi4j.business.ServiceReferentiel_Itf
# L'interface pour les enumerations des attributs
framework.type.AttributeNames_Itf = fr.spi4j.business.dto.AttributesNames_Itf
# L'interface des DTOs
framework.type.Dto_Itf = fr.spi4j.business.dto.Dto_Itf
# L'interface des Mappers (conversion DTO <-> XTO)
framework.type.Mapper_Itf = fr.spi4j.mapper.Mapper_Itf
# La classe ancetre des Mappers (conversion DTO <-> XTO)
framework.type.Mapper_Abs = fr.spi4j.mapper.Mapper_Abs
# L'interface des Match (conversion Entity <-> DTO)
framework.type.Match_Itf = fr.spi4j.matching.Match_Itf
# La classe ancetre des Match (conversion Entity <-> DTO)
framework.type.Match_Abs = fr.spi4j.matching.Match_Abs
# La classe ancetre de la factory des DAOs et Entities
framework.type.UserPersistence_Abs = fr.spi4j.persistence.UserPersistence_Abs
# L'interface des DAOs
framework.type.Dao_Itf = fr.spi4j.persistence.dao.Dao_Itf
# La classe ancetre des DAO JDBC
framework.type.DaoJdbc_Abs = fr.spi4j.persistence.dao.jdbc.DaoJdbc_Abs
# L'interface pour les enumerations des colonnes
framework.type.ColumnsNames_Itf = fr.spi4j.persistence.entity.ColumnsNames_Itf
# L'interface des Entities
framework.type.Entity_Itf = fr.spi4j.persistence.entity.Entity_Itf
# La classe ancetre des testeurs de beans
framework.type.BeanTester_Abs = fr.spi4j.tua.BeanTester_Abs
# La classe ancetre des testeurs de FetchingStrategy
framework.type.FetchingStrategyTester_Abs = fr.spi4j.tua.FetchingStrategyTester_Abs
# L'interface des XTOs
framework.type.Xto_Itf = fr.spi4j.ws.xto.Xto_Itf

#-------------------------------------------------------------
# Generated properties by Pacman Wed Nov 07 16:17:16 CET 2012
# Le nom d'un attribut d'enumeration
attributeEnum = [CamelCaseIgnoreFirst/]


#-------------------------------------------------------------
# Generated properties by Pacman Tue Nov 06 16:49:55 CET 2012
# niveau de base pour le découpage des exigences dans le code généré (0 : aucun découpage)
requirement.category.base.level = 0

#-------------------------------------------------------------
# Generated properties by Pacman Mon Apr 29 09:46:00 CEST 2013
# dossier de génération des sources du client Swing
client.swing.source.dir = src/main/java
# Le nom du package pour les composants PGE Swing
packagePgeSwing = client.ui.swing.widgets
# Le nom du package pour les composants PGE GWT
packagePgeGwt = client.ui.gwt.widgets

#-------------------------------------------------------------
# Generated properties by Pacman Tue Jul 09 18:20:37 CEST 2013
# Fichier de configuration des règles de validation
validation.config.file = validation.xml
# Initialisation du fichier de configuration en cas d'erreur de celui-ci
validation.init.on.error = true
# Délimiteur de ligne
new.line = \r\n

#-------------------------------------------------------------
# Generated properties by Pacman Thu Aug 01 13:28:08 CEST 2013
# Version initiale (cf. "set_versionImplem()") mise lors de la première génétration pour les tests de versionning d'exigence ("none" : exigence non implémentée ou "current" pour la version du modèle)
test.requirement.versionning.initial = none

#-------------------------------------------------------------
# Generated properties by Pacman Mon Aug 05 14:28:45 CEST 2013
# Le mode debug pour PacMan (plus d'informations en cas d'erreur de génération)
pacman.mode.isDebug = false

#-------------------------------------------------------------
# Generated properties by Pacman Wed Aug 07 15:55:16 CEST 2013
# 'true' : La génération de la couche de persistance (= Entity) se fait avec les méthodes de LazyLoading
entity.isLazyLoading = false

#-------------------------------------------------------------
# Generated properties by Pacman Mon Sep 02 14:28:40 CEST 2013
# Le nom du package pour la montée en charge
packageOverload = overload

#-------------------------------------------------------------
# Generated properties by Pacman Mon Sep 23 14:30:39 CEST 2013
# 'true' : La génération de la couche de persistance (= Entity) se fait avec les méthodes de LazyLoading
dsl.entity.isLazyLoading = false

#-------------------------------------------------------------
# Generated properties by Pacman Mon Oct 14 10:55:33 CEST 2013
# Utilisation des paramètres pour le user code des méthodes soa
deprecated.soa.usercode.params = true

#-------------------------------------------------------------
# Generated properties by Pacman Tue Jan 13 11:11:51 CET 2015
# flag indiquant si les service requirements doivent être générés dans l'application (générés par défaut)
servicerequirements.enabled = true
# projet Eclipse du client SWING
client.swing.project = myproject-client-swing
