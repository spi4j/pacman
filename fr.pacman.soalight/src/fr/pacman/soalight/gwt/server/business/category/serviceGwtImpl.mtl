[module serviceGwtImpl('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::common::imports/]
[import fr::pacman::soalight::common::packages/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::commentaires/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::soalight::common::methodes/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]

[comment encoding = UTF-8 /]
[comment le Service existe sans Entity /]
[template public serviceGwtImpl(s : soa::Service)]
  [s.licence()/]
  [let self = if not (s = null) then s else 'PACKAGE NOT FOUND FOR SERVICE' endif]
    package [s.buildPackageBusinessGwtServerService()/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      import fr.spi4j.ui.gwt.server.SpiRemoteServiceImpl;
      import java.util.List;
      import java.util.Date;
      import jakarta.servlet.http.HttpServletRequest;
      import com.google.gwt.user.server.rpc.SerializationPolicy;
      import [s.buildPackageBusinessApiService()/].[s.buildServiceInterfaceName()/];
      import [s.buildPackageBusinessGwtClientService()/].[s.buildServiceGwtInterfaceName()/];
      import [s.buildPackageBusiness()/].[s.buildAppliUserBusinessGenClassName()/];
      import [s.buildPackageMapper()/].[s.buildAppliUserMapperGenClassName()/];
      
    [/protected]
    
    
    /**
     * Interface de services appelables par le client.
     * @author [s.getAuthorName()/]
     */
    public class [s.buildServiceGwtImplementationName()/] extends SpiRemoteServiceImpl implements [s.buildServiceGwtInterfaceName()/]
    {
    
       private static final long serialVersionUID = 1L;
    
       /**
        * @return le service r√©el
        */
       protected [s.buildServiceInterfaceName()/] getService ()
       {
          return [s.buildAppliUserBusinessGenClassName()/].[('get ' + s.buildServiceName()).apply_methodDefault()/]();
       }
    
    	@Override
       protected SerializationPolicy doGetSerializationPolicy (final HttpServletRequest request,
                final String moduleBaseURL, final String strongName)
       {
          // TODO Auto-generated method stub
          return super.doGetSerializationPolicy(request, getServletContext().getInitParameter("moduleBaseURL"), strongName);
       }
    
    [if (s <> null and not (s.ownedInterface = null))]
      [if (not s.ownedInterface.ownedOperations->isEmpty())]
        [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
             // [o.userCodeForOperation()/]
             [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
                  @Override
                  public [o.paramOutXto()/] [o.name.apply_methodDefault()/] ([o.paramsInXto()/])
                  {
               [if (o.paramOutXto() <> 'void')]
                       return [if (not o.output->first().type.oclIsKindOf(environment::PrimitiveType))]
                                [o.buildAppliUserMapperGenClassName()/].[('get ' + o.output->first().buildMapperClassName()).apply_methodDefault()/] ().convert[if (o.output->first().isMultiple())]List[/if]EntityTo[if (o.output->first().isMultiple())]List[/if]Xto( [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp1 | temp1.parameterWs())->sep(', ')/]));	  
                              [else]
                                [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp2 | temp2.parameterWs())->sep(', ')/]);
                              [/if]
               [else]
                      [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp3 | temp3.parameterWs())->sep(', ')/]);
               [/if]
                  }
               
             [/protected]
          
          
        [/for]
      [/if]
    [/if]
    
       // [s.nameServiceInterfaceGwt()/]
       [protected (s.getUserCodeId(s.nameServiceInterfaceGwt())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[template private parametersInXto(p : soa::Parameter)]
        [p.name.apply_parameterMethodClassicIn()/][/template]
