[module userBusiness('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::common::imports/]
[import fr::pacman::soalight::common::packages/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]

[comment encoding = UTF-8 /]
[template public userBusiness(n : environment::Namespace)]
  [n.licence()/]
  // CHECKSTYLE:OFF
  package [n.buildPackageBusiness()/]; // NOPMD
  // CHECKSTYLE:ON
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import [n.getImportForUserBusiness_Abs()/];
    import fr.spi4j.exception.Spi4jRuntimeException;
    import [n.getImportForUserPersistence_Abs()/];
    import [n.buildPackageBusiness()/].[n.buildAppliUserBusinessEntityGenClassName()/];
    [for (srv : soa::Service | n.listeServicesFromSystem())]
      [if (srv.serviceSeul() and not srv.isFromEntityService())]
        import [srv.buildPackageBusinessImplementationService()/].[srv.buildServiceInterfaceName()/];
      [/if]
    [/for]
    
  [/protected]
  
  
  /**
   * Classe permettant de centraliser les factories business de l'application.
   * @author [n.getAuthorName()/]
   */
  public final class [n.buildAppliUserBusinessGenClassName()/] extends [n.buildAppliUserBusinessEntityGenClassName()/]
  {
  
     /** Singleton. */
     private static [n.buildAppliUserBusinessGenClassName()/] ['singleton'.apply_attributeStatic()/] = new [n.buildAppliUserBusinessGenClassName()/]();
  
     /**
      * Constructeur privé.
      */
     private [n.buildAppliUserBusinessGenClassName()/] ()
     {
        super();
     }
  [for (srv : soa::Service | n.listeServicesFromSystem())]
    [if (srv.serviceSeul() and not srv.isFromEntityService())]
      
         /**
          * Obtenir la façade de services '[srv.buildServiceInterfaceName()/]'.
          * @return L'instance désirée.
          */
         public static [srv.buildServiceInterfaceName()/] [('get ' + srv.buildServiceName()).apply_methodDefault()/] ()
         {
            return ['singleton'.apply_attributeStatic()/].getBinding([srv.buildServiceInterfaceName()/].class);
         }
    [/if]
  [/for]
  
     /**
      * @return le ['singleton'.apply_attributeStatic()/] de cette factory
      */
     public static [n.buildAppliUserBusinessGenClassName()/] getSingleton ()
     {
        return ['singleton'.apply_attributeStatic()/];
     }
  
     @Override
     protected [n.getClassNameForUserPersistence_Abs()/] getUserPersistence ()
     {
        // dans cette factory de la partie commune entre un client et le serveur
        // on ne référence pas les classes d'implémentations "serveur" des services
        // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
  
        try
        {
           return ([n.getClassNameForUserPersistence_Abs()/]) Class.forName("[n.buildPackagePersistence()/].[n.buildParamPersistenceClassName()/]")
                    .getMethod("['get user persistence'.apply_methodDefault()/]").invoke(null);
        }
        catch (final Exception ['ex'.apply_variableFinal()/])
        {
           // ne devrait jamais arriver grâce à la génération de code
           throw new Spi4jRuntimeException(['ex'.apply_variableFinal()/], ['ex'.apply_variableFinal()/].toString(), "???");
        }
     }
  
     // CHECKSTYLE:OFF
     @Override
     // CHECKSTYLE:ON
     public void initBindings () // NOPMD
     {
        // dans cette factory de la partie commune entre un client et le serveur
        // on ne référence pas les classes d'implémentations "serveur" des services
        // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
  	
        super.initBindingsEntities();
  
  [for (srv : soa::Service | n.listeServicesFromSystem())]
    [if (srv.serviceSeul() and not srv.isFromEntityService())]
            // Binding correspondant au Service [srv.buildServiceInterfaceName()/]
            [protected (srv.getUserCodeId('Binding correspondant au Service ' + srv.buildServiceInterfaceName())) startTagPrefix('// ') endTagPrefix('// ')]
                    final [srv.buildServiceInterfaceName()/] [srv.buildServiceName().apply_variableObjectDefault()/] = wrapService([srv.buildServiceInterfaceName()/].class, "[srv.buildPackageBusinessImplementationService()/].[srv.buildServiceClassName()/]");
                    bind([srv.buildServiceInterfaceName()/].class, [srv.buildServiceName().apply_variableObjectDefault()/]);
            [/protected]
      
      
    [/if]
  [/for]
  	
     }
  }[/template]