[module serviceFacade('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::common::imports/]
[import fr::pacman::soalight::common::packages/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::commentaires/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::soalight::common::methodes/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[comment le Service existe sans DTO /]
[template public serviceFacade(s : soa::Service)]
  [s.licence()/]
  package [s.buildPackageImplWs()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import java.util.List;
    
    import jakarta.jws.WebMethod;
    import jakarta.jws.WebService;
    
    import [s.buildPackageWsApi()/].[s.buildServiceFacadeInterfaceName()/];
    import [s.buildPackageBusiness()/].[s.buildAppliUserBusinessGenClassName()/];
    import [s.buildPackageMapper()/].[s.buildAppliUserMapperGenClassName()/];
    
  [/protected]
  
  
  /**
   * Implémentation de la façade du web service.
   * @author [s.getAuthorName()/]
   */
  @WebService(serviceName = "[s.buildServiceName()/]", portName = "[s.buildServiceName()/]Port", targetNamespace = "http://[s.namespace()/]/")
  public class [s.buildServiceFacadeClassName()/] implements [s.buildServiceFacadeInterfaceName()/]
  {
  
  [if (s <> null and not (s.ownedInterface = null))]
    [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
      [if (o.public)]
        	/**
        	* [o.description/]
        [o.getComParamsIn()/][o.comParamOut()/]
        	 */
           @WebMethod
           @Override
           public [o.paramOutXto()/] [o.name.apply_methodDefault()/] ([o.paramsInXto()/])
           {
        	 // [o.userCodeForOperation()/]
        	 [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
            [if (o.paramOutXto() <> 'void')]
                    return [if (not o.output->first().type.oclIsKindOf(environment::PrimitiveType))]
                             [o.buildAppliUserMapperGenClassName()/].[('get ' + o.output->first().buildMapperClassName()).apply_methodDefault()/] ().convert[if (o.output->first().isMultiple())]List[/if]EntityTo[if (o.output->first().isMultiple())]List[/if]Xto( [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp1 | temp1.parameterWs())->sep(', ')/]));	  
                           [else]
                             [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp2 | temp2.parameterWs())->sep(', ')/]);
                           [/if]
            [else]
                   [o.buildAppliUserBusinessGenClassName()/].get[s.nameService()/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp3 | temp3.parameterWs())->sep(', ')/]);
            [/if]
            
          [/protected]
        
           }
        
      [/if]
    [/for]
  [/if]
     // [s.buildServiceFacadeClassName()/]
     [protected (s.getUserCodeId(s.buildServiceFacadeClassName())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  }[/template]

[query private namespace(s : soa::Service) : String = s.buildPackageWsApi().reverse('\\.', '.')/]
