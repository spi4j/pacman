[module service('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/requirement/1.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::soalight::common::imports/]
[import fr::pacman::soalight::common::packages/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::soalight::common::methodes/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::soalight::common::commentaires/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::soalight::services::RequirementUtils/]

[comment encoding = UTF-8 /]
[comment le Service existe sans Entity /]
[template public service(s : soa::Service)]
  [s.licence()/]
  [let self = if not (s = null) then s else 'PACKAGE NOT FOUND FOR SERVICE' endif]
    package [s.buildPackageBusinessImplementationService()/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [s.getImportServiceInterface()/]
      import [s.getImportForEntityService_Abs()/];
      import java.util.List;
      [if (s.useServiceRequirements())]
        [s.getImportServiceRequirements()/]
      [/if]
      [if (s <> null and not (s.ownedInterface = null))]
        [if (s.ownedInterface.ownedOperations->exists(o | not o.getRequirements()->isEmpty()))]
          import [s.buildPackageRequirement()/].['requirement'.apply_classAnnotation()/];
          import [s.buildPackageRequirement()/].['requirement'.apply_classEnum()/];
        [/if]
      [/if]
      [if (s.useEjb())]
        import jakarta.ejb.Stateless;
      [/if]
      
    [/protected]
    
    
    /**
     * Implémentation du contrat de services spécifiques. <br>
     * Pour rappel, les services sont sans état.
     * @author [s.getAuthorName()/]
     */
    // Annotations Service
    [protected (s.getUserCodeId('Annotations Service')) startTagPrefix('// ') endTagPrefix('// ')]
      [if (s.useEjb())]
        @Stateless
      [/if]
    [/protected]
    
    public class [s.buildServiceClassName()/]  [if (s.isFromEntityService())]extends [s.getClassNameForEntityService_Abs()/]<[s.genPkType()/], [s.buildEntityInterfaceNameFromService()/], [s.buildEntityColumnEnumNamefromService()/]> [/if]implements [s.buildServiceInterfaceName()/]
    {
    
       // Rappel : les services sont sans état.
       // attributs
       [protected (s.getUserCodeId('attributs')) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
     
    [if (s.useServiceRequirements())]
         @SuppressWarnings("all")
         private final [s.buildServiceRequirementsClassName()/] ['requirements'.apply_attributeFinal()/] = new [s.buildServiceRequirementsClassName()/](); // NOPMD
    [/if]
    	
    [if (s <> null and not (s.ownedInterface = null))]
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
        [let requirements : Sequence(requirement::Requirement) = o.getRequirements()]
          	/**
          	* [o.description/]
          [o.getComParamsIn()/][o.comParamOut()/]
          	 */
          [if (o.useServiceRequirements())]
            [if (o.requirementBaseCategoryLevel() = 0 and not requirements->isEmpty())]
              [if (requirements->size() = 1)]
                   @['requirement'.apply_classAnnotation()/](['requirement'.apply_classEnum()/].[o.getServiceRequirementsPrefix()/][requirements->first().id/])
              [else]
                   @['requirement'.apply_classAnnotation()/](value =
                   {['requirement'.apply_classEnum() + '.' + o.getServiceRequirementsPrefix() + requirements->collect(temp1 | temp1.id)->sep(', ' + 'requirement'.apply_classEnum() + '.' + o.getServiceRequirementsPrefix())/] })
              [/if]
            [/if]
          [/if]
             public [o.paramOut()/] [o.name.sanitize().apply_methodDefault()/] ([o.paramsIn()/])
             {
          [if (o.useServiceRequirements())]
            [for (req : requirement::Requirement | requirements)]
                    ['requirements'.apply_attributeFinal()/].exigence[req.getServiceRequirementsPrefix()/][req.id/]();
            [/for]
          [/if]
          	  // [o.userCodeForOperation()/]
          	  [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
               	  // TODO Méthode à implémenter
                     throw new UnsupportedOperationException();
               
             [/protected]
          
             }
          
        [/let]
      [/for]
    [/if]
       // Methodes [s.buildServiceClassName()/]
       [protected (s.getUserCodeId('Methodes ' + s.buildServiceClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[query private getRequirements(o : soa::Operation) : Sequence(requirement::Requirement) = o.getRequirementsJavaService()/]
