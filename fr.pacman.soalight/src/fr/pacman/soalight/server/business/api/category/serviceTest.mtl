[module serviceTest('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::soalight::common::imports/]
[import fr::pacman::soalight::common::packages/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::soalight::common::secu/]

[comment encoding = UTF-8 /]
[comment le Service existe /]
[template public serviceTest(s : soa::Service)]
  [s.licence()/]
  [let self = if not (s = null) then s else 'PACKAGE NOT FOUND FOR SERVICE ' endif]
    package [s.buildPackageBusinessApiService()/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      import org.junit.jupiter.api.AfterEach;
      import org.junit.jupiter.api.BeforeEach;
      import org.junit.jupiter.api.BeforeAll;
      import org.junit.jupiter.api.Test;
      
      import static org.junit.jupiter.api.Assertions.fail;
      
      import java.util.Date;
      import java.util.List;
      import fr.spi4j.Parameters;
      
      [s.getImportUserBusinessGen()/]
      [s.getImportParamPersistenceClass()/]
      [s.getImportUserPersistenceClass()/]
      import [s.getImportForBeanTester_Abs()/];
      
    [/protected]
    
    
    /**
     * Classe de test du service '[s.buildServiceInterfaceName()/]'.
     * @author [s.getAuthorName()/]
     */
    // Annotation for class
    [protected (s.getUserCodeId('Annotation for class')) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
    
    public class [s.buildServiceTestClassName()/] extends [s.getClassNameForBeanTester_Abs()/]
    {
    
       /** Le 'UserPersistence' de l'application. */
       private static [s.buildUserPersistenceAppClassName()/] ['user persistence'.apply_attributeStatic()/];
    
       /** Le '[s.buildServiceInterfaceName()/]' testé. */
    
       @SuppressWarnings("all")
       private static [s.buildServiceInterfaceName()/] ['service'.apply_attributeStatic()/];
    
        // Spécifique
        [protected (s.getUserCodeId('Spécifique')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
    
    
       /**
        * Méthode d'initialisation de la classe de tests.
        */
       @BeforeClass
       public static void ['set up before class'.apply_methodDefault()/] ()
       {
          Parameters.setH2Database();
          ['user persistence'.apply_attributeStatic()/] = [s.buildParamPersistenceClassName()/].['get user persistence'.apply_methodDefault()/]();
          ['service'.apply_attributeStatic()/] = [s.buildAppliUserBusinessGenClassName()/].[('get ' + s.buildServiceName()).apply_methodDefault()/]();
    
          // set up before class
          [protected (s.getUserCodeId('set up before class')) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
    
       }
    
       /**
        * Méthode d'initialisation de tests.
        */
       @Before
       public void ['set up'.apply_methodDefault()/] ()
       {
          ['user persistence'.apply_attributeStatic()/].begin();
    
          // set up
          [protected (s.getUserCodeId('set up')) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
    
       }
    
        /**
        * Méthode de fin de test : rollback.
        */
       @After
       public void ['tear down'.apply_methodDefault()/] ()
       {
          ['user persistence'.apply_attributeStatic()/].rollback();
    
          // tear down
          [protected (s.getUserCodeId('tear down')) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
    
       }
    [if (s <> null and not (s.ownedInterface = null))]
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
           /**
            * Test de l'opération '[o.name/]'.
            * @throws Throwable
            *            exception
            */
           @Test
           public void [('test ' + o.name.replaceAll('_', ' ')).apply_methodDefault()/] () throws Throwable
           {
              // [o.userCodeForOperation().replaceAll('Dto', ' ')/]
              [protected (o.getUserCodeId(o.userCodeForOperation().replaceAll('Dto', ' '))) startTagPrefix('// ') endTagPrefix('// ')]
                      // TODO : A Implémenter
                      fail("Test non implémenté");
              [/protected]
        
           }
        
      [/for]
    [/if]
    
       // Methodes [s.buildServiceTestClassName()/]
       [protected (s.getUserCodeId('Methodes ' + s.buildServiceTestClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    
    }[/let]
[/template]