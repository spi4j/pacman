[module classes('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::services::MandatoryUtils/]
[import fr::pacman::soalight::services::ServiceUtils/]

[comment encoding = UTF-8 /]
[**
 * ****************
 * Paramétrage début
*/]
[query public buildServiceTestClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service').apply_classTest()/]

[query public buildServiceName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service').apply_classDefault()/]

[query public buildServiceName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service').apply_classDefault() else (d.buildSimpleDtoName() + ' service').apply_classDefault() endif/]

[query public buildServiceClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service').apply_classImplem()/]

[query public buildServiceFacadeClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service facade').apply_classImplem()/]

[query public buildServiceFacadeInterfaceName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service facade').apply_classInterface()/]

[query public buildServiceInterfaceName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service').apply_classInterface()/]

[query public buildServiceRequirementsClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service requirements').apply_classDefault()/]

[query public buildServiceGwtInterfaceName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' gwt service').apply_classDefault()/]

[query public buildServiceGwtImplementationName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' gwt service impl').apply_classDefault()/]

[query public buildServiceGwtAsyncClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' gwt service async').apply_classDefault()/]

[template public buildService(s : soa::Service)]
  [if (not (s = null))]
    	[s.buildSimpleServiceName()/]
  [else]
    	NAME NOT FOUND FOR SERVICE AND DTO NULL
  [/if]
[/template]

[query public buildGwtUserBusinessClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' gwt user business').apply_classDefault()/]

[**
 * ****************
 * Paramétrage fin
*/]
[comment etourne le système racine d'un Service/]
[query public getRoot(s : soa::Service) : environment::ObeoDSMObject = s.getRootJavaService().oclAsType(environment::ObeoDSMObject)/]

[comment OA : Teste si une propriété (attribut ou référence) est obligatoire/]
[query public isMandatory(p : environment::Property) : Boolean = p.isMandatorySoa()/]