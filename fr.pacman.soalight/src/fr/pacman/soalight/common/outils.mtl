[module outils('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::soalight::services::ServiceUtils/]
[import fr::pacman::soalight::services::WSUtils/]

[comment encoding = UTF-8 /]
[query public serviceSeul(s : soa::Service) : Boolean = not (s.systemeRacine() = null) and not s.systemeRacine().eAllContents(entity::Entity)->exists(e | e.buildSimpleEntityName() = s.buildSimpleServiceName())/]

[query public systemeRacine(o : environment::ObeoDSMObject) : soa::System = if o = null then null else if o.oclIsKindOf(soa::System) then o.oclAsType(soa::System) else if o.oclIsKindOf(entity::Root) then null else o.eContainer(soa::System).systemeRacine() endif endif endif/]

[query public systemeRoot(o : environment::ObeoDSMObject) : entity::Root = if o = null then null else if o.oclIsKindOf(entity::Root) then o.oclAsType(entity::Root) else if o.oclIsKindOf(soa::System) then null else o.eContainer(entity::Root).systemeRoot() endif endif endif/]

[query public namespaceRacine(o : environment::ObeoDSMObject) : environment::Namespace = if o = null then null else if o.oclIsKindOf(environment::Namespace) and o.oclAsType(environment::Namespace).eContainer() = null then o.oclAsType(environment::Namespace) else o.eContainer(environment::Namespace).namespaceRacine() endif endif/]

[query public hasPublicOperations(s : soa::Service) : Boolean = s <> null and not (s.ownedInterface = null) and s.ownedInterface.ownedOperations->exists(o | o.public)/]

[query public listeServicesFromSystemSearchable(n : environment::Namespace) : Boolean = if n.eContainer().oclAsType(environment::NamespacesContainer) = null then false else if n.eContainer().oclAsType(environment::NamespacesContainer).oclIsTypeOf(soa::System) then true else if n.eContainer().oclAsType(environment::NamespacesContainer).oclIsTypeOf(entity::Root) then false else true endif endif endif/]

[query public listeServicesFromSystem(n : environment::Namespace) : OrderedSet(soa::Service) = if n = null then null else if n.eContainer() = null then null else if n.eContainer().oclAsType(environment::NamespacesContainer) = null then null else if n.systemeRacine() = null then null else n.systemeRacine().eAllContents(soa::Service)->listeServices() endif endif endif endif/]

[query public clientNeedXto(any : ecore::EObject) : Boolean = any.getClientTypes()->exists(client | client.equalsIgnoreCase('GWT'))/]

[query public clientNeedRemotingServlet(any : ecore::EObject) : Boolean = any.getClientTypes()->exists(client | client.equalsIgnoreCase('SWING'))/]

[query public userCodeForOperation(operation : soa::Operation) : String = operation.userCodeForOperationCleanDTO().replaceAll('Dto', ' ').replaceAll('DTO', ' ')/]

[query public xtoAGenerer(o : environment::ObeoDSMObject) : OrderedSet(entity::Entity) = o.eAllContents(soa::Operation)->xtoAGenererJavaService()/]

[query public userCodeForOperationCleanDTO(operation : soa::Operation) : String = if operation.useDeprecatedSOAUserCodeParams() then if operation.input->isEmpty() and operation.output->isEmpty() then operation.name else if operation.input->isEmpty() then operation.name + '_' + operation.output->asSequence()->collect(temp1 | temp1.type)->collect(temp2 | temp2.name)->sep('_') else if operation.output->isEmpty() then operation.name + '_' + operation.input->asSequence()->collect(temp3 | temp3.type)->collect(temp4 | temp4.name)->sep('_') else operation.name + '_' + operation.input->asSequence()->collect(temp5 | temp5.type)->collect(temp6 | temp6.name)->sep('_') + '_' + operation.output->asSequence()->collect(temp7 | temp7.type)->collect(temp8 | temp8.name)->sep('_') endif endif endif else operation.name endif/]

[comment les attributs d'une entité qui ne sont pas des clé primaires /]
[query public attributes(e : entity::Entity) : OrderedSet(environment::Attribute) = e.attributes->asOrderedSet()/]

[query public isFromEntityService(s : soa::Service) : Boolean = s.isEntityService(s.name)/]

[query private isEntityService(s : soa::Service, serviceName : String) : Boolean = s.isEntityServiceJavaService(serviceName)/]