[comment encoding = UTF-8 /]
[module methodes('http://www.obeonetwork.org/dsl/soa/4.0.0',
				 'http://www.obeonetwork.org/dsl/entity/3.0.0',
                 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::soalight::common::name /]
[import fr::pacman::soalight::common::attributes /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::soalight::common::classes /]
[import fr::pacman::commons::convention::rule::classRule /]

[**
 * Paramétrage PacMan
*/]

[**
 * getters
*/]

[template public getGetter(a : Attribute)]
public [a.genPropertyType()/] [apply_methodGet(a.name.normalize())/] ()
[/template]

[**
 * setters
*/]

[template public getSetter(a : Attribute)]
public void [apply_methodSet(a.name.normalize())/] (final [a.genPropertyType()/] [apply_parameterMethodClassicIn(a.name.normalize())/])
[/template]

[**
 * Fin Paramétrage
*/]

[comment] Les Getters [/comment]
[comment]-------------[/comment]

[template public genGetter(a : Attribute)]
public [a.genPropertyType()/] [a.nameGetter()/] ()
[/template]

[comment] Les Setters [/comment]
[comment]-------------[/comment]

[template public genSetter(a : Attribute)]
public void [a.nameSetter()/] (final [a.genPropertyType()/] [apply_parameterMethodClassicIn(a.nameParam())/])
[/template]

[template public setAttribute(a : Attribute)]
set[a.nameProperty()/]([apply_parameterMethodClassicIn(a.nameParam())/]);
[/template]

[template public setId(any : OclAny)]
setId([apply_parameterMethodClassicIn(nameENUM_PK_ID().nameParam())/]);
[/template]

[comment] Paramètres [/comment]
[comment]------------[/comment]

[template public paramOut(o : Operation)]
[if o.output->size() <> 1]
void[else]
[paramType(o.output->first())/][/if]
[/template]

[template public paramsIn(o : Operation)]
[paramsIn(o.input)->sep(', ')/]
[/template]

[template public parameterWs (p : Parameter)]
[if not p.type.oclIsKindOf(PrimitiveType)][buildAppliUserMapperGenClassName()/].[apply_methodDefault('get ' + p.buildMapperClassName())/] ().convert[if isMultiple(p)]List[/if]XtoTo[if isMultiple(p)]List[/if]Entity ([apply_parameterMethodClassicIn(p.name)/])[else][apply_parameterMethodClassicIn(p.name)/][/if]
[/template]

[query private paramsIn(inputs : OrderedSet(Parameter)) : Sequence(String) =
inputs.paramIn()
/]

[query public paramIn(param : Parameter) : String =
'final ' + param.paramType() + ' ' + apply_parameterMethodClassicIn(param.name.sanitize())
 /]

[template private paramType(p : Parameter)]
[if p.multiplicity = MultiplicityKind::ZERO_STAR or p.multiplicity = MultiplicityKind::ONE_STAR]
List<[type(p)/]>[else]
[type(p)/][/if]
[/template]

[template private type(p : Parameter)]
[if not p.type.oclIsKindOf(PrimitiveType)]
[apply_classInterface(simpleName(p))/][else]
[p.type.name.toUpperFirst()/][/if]
[/template]

[query public simpleName1(name : String) : String =
if (name.size() > 3 and name.substring(name.size() - 2).equalsIgnoreCase('dto')) then
    (name.substring(1, name.size() - 3)).concat('Entity').sanitize()
else
    name.sanitize()
endif
/]

[query public simpleName(p : Parameter) : String =
if (p.type.oclIsTypeOf(DTO)) then
	if (p.type.name.size() > 3 and p.type.name.substring(p.type.name.size() - 2).equalsIgnoreCase('dto')) then
    	(p.type.name.substring(1, p.type.name.size() - 3)).concat('Entity').sanitize()
	else
    	p.type.name.sanitize().concat('Entity').sanitize()
	endif
else if (p.type.oclIsTypeOf(Entity)) then
	if (p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('Entity')) then
    	p.type.name.sanitize()
	else
    	p.type.name.concat('Entity').sanitize()
	endif
else
    p.type.name.sanitize()
endif endif
/]

[template private paramTypeXto(p : Parameter)]
[if p.multiplicity = MultiplicityKind::ZERO_STAR or p.multiplicity = MultiplicityKind::ONE_STAR]
List<[typeXto(p)/]>[else]
[typeXto(p)/][/if]
[/template]

[query public paramOutXto(o : Operation) : String =
if (o.output->isEmpty()) then
    'void'
else
    paramTypeXto(o.output->first())
endif
/]

[template public paramsInXto(o : Operation)]
[paramsInXto(o.input)->sep(', ')/]
[/template]

[template public typeXto(p : Parameter)]
[if p.type.oclIsKindOf(PrimitiveType)][p.type.name.sanitize()/][elseif ((p.type.name <> null) and (p.type.name.contains('<')))]
[p.type.name.substring(1,p.type.name.indexOf('<')-1)/][else]
[simpleTypeEntity(p)+'Xto'/][/if]
[/template]

[template private typeXtoFromEntity(p : Parameter)]
[if typePrimitif(p.type.name)]
[p.type.name.sanitize()/][else]
[simpleTypeEntity(p)+'Xto'/][/if]
[/template]

[query public typePrimitif(s : String) : Boolean =
s.equalsIgnoreCase('Integer') or s.equalsIgnoreCase('String') or s.equalsIgnoreCase('Boolean') or s.equalsIgnoreCase('Float')
	or s.equalsIgnoreCase('Binary') or s.equalsIgnoreCase('Long') or s.equalsIgnoreCase('Double') or s.equalsIgnoreCase('Date')
/]

[query private paramsInXto(inputs : OrderedSet(Parameter)) : Sequence(String) =
inputs.paramInXto()
/]

[query public paramInXto(param : Parameter) : String =
'final ' + param.paramTypeXto() + ' ' + apply_parameterMethodClassicIn(param.name.sanitize())
 /]

[comment]Retourne true si l'entité possède un attribut avec l'annotation Version[/comment]
[query public isMultiple(p : Parameter) : Boolean =
    if p.multiplicity = MultiplicityKind::ZERO_STAR or p.multiplicity = MultiplicityKind::ONE_STAR then
        true
    else
     false
    endif
/]

[query private simpleTypeEntity(p : Parameter) : String =
if (p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('entity')) then
    p.type.name.substring(1, p.type.name.size() - 6).sanitize()
else
    p.type.name.sanitize()
endif
/]

[query public isTypeEntity(p : Parameter) : Boolean =
	if (p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('entity')) then
		true
	else
	    false
    endif
/]

[query public buildMapperClassName(p : Parameter) : String =
apply_classImplem(simpleTypeEntity(p) + ' mapper')
/]

