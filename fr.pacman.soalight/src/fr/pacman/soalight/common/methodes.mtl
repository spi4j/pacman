[module methodes('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::soalight::common::name/]
[import fr::pacman::soalight::common::attributes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]

[comment encoding = UTF-8 /]
[**
 * Paramétrage PacMan
*/]
[**
 * getters
*/]
[template public getGetter(a : environment::Attribute)]
  public [a.genPropertyType()/] [a.name.normalize().apply_methodGet()/] ()[/template]

[**
 * setters
*/]
[template public getSetter(a : environment::Attribute)]
  public void [a.name.normalize().apply_methodSet()/] (final [a.genPropertyType()/] [a.name.normalize().apply_parameterMethodClassicIn()/])[/template]

[**
 * Fin Paramétrage
*/]
[comment Les Getters /]
[comment ------------/]
[template public genGetter(a : environment::Attribute)]
  public [a.genPropertyType()/] [a.nameGetter()/] ()[/template]

[comment Les Setters /]
[comment ------------/]
[template public genSetter(a : environment::Attribute)]
  public void [a.nameSetter()/] (final [a.genPropertyType()/] [a.nameParam().apply_parameterMethodClassicIn()/])[/template]

[template public setAttribute(a : environment::Attribute)]
  set[a.nameProperty()/]([a.nameParam().apply_parameterMethodClassicIn()/]);[/template]

[template public setId(any : ecore::EObject)]
  setId([any.nameENUM_PK_ID().nameParam().apply_parameterMethodClassicIn()/]);[/template]

[comment Paramètres /]
[comment -----------/]
[template public paramOut(o : soa::Operation)]
  [if (o.output->size() <> 1)]void[else][o.output->first().paramType()/][/if]
[/template]

[template public paramsIn(o : soa::Operation)]
  [o.input->asOrderedSet()->paramsIn()->sep(', ')/][/template]

[template public parameterWs(p : soa::Parameter)]
  [if (not p.type.oclIsKindOf(environment::PrimitiveType))]
    [p.buildAppliUserMapperGenClassName()/].[('get ' + p.buildMapperClassName()).apply_methodDefault()/] ().convert[if (p.isMultiple())]List[/if]
    XtoTo[if (p.isMultiple())]List[/if]
    Entity ([p.name.apply_parameterMethodClassicIn()/])[else][p.name.apply_parameterMethodClassicIn()/][/if]
[/template]

[query private paramsIn(inputs : OrderedSet(soa::Parameter)) : Sequence(String) = inputs->asSequence()->collect(temp1 | temp1.paramIn())/]

[query public paramIn(param : soa::Parameter) : String = 'final ' + param.paramType() + ' ' + param.name.sanitize().apply_parameterMethodClassicIn()/]

[template private paramType(p : soa::Parameter)]
  [if (p.multiplicity = environment::MultiplicityKind::ZERO_STAR or p.multiplicity = environment::MultiplicityKind::ONE_STAR)]List<[p.type()/]>[else][p.type()/][/if]
[/template]

[template private type(p : soa::Parameter)]
  [if (not p.type.oclIsKindOf(environment::PrimitiveType))][p.simpleName().apply_classInterface()/][else][p.type.name.toUpperFirst()/][/if]
[/template]

[query public simpleName1(name : String) : String = if name.size() > 3 and name.substring(name.size() - 2).equalsIgnoreCase('dto') then name.substring(1, name.size() - 3).concat('Entity').sanitize() else name.sanitize() endif/]

[query public simpleName(p : soa::Parameter) : String = if p.type.oclIsTypeOf(environment::DTO) then if p.type.name.size() > 3 and p.type.name.substring(p.type.name.size() - 2).equalsIgnoreCase('dto') then p.type.name.substring(1, p.type.name.size() - 3).concat('Entity').sanitize() else p.type.name.sanitize().concat('Entity').sanitize() endif else if p.type.oclIsTypeOf(entity::Entity) then if p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('Entity') then p.type.name.sanitize() else p.type.name.concat('Entity').sanitize() endif else p.type.name.sanitize() endif endif/]

[template private paramTypeXto(p : soa::Parameter)]
  [if (p.multiplicity = environment::MultiplicityKind::ZERO_STAR or p.multiplicity = environment::MultiplicityKind::ONE_STAR)]List<[p.typeXto()/]>[else][p.typeXto()/][/if]
[/template]

[query public paramOutXto(o : soa::Operation) : String = if o.output->isEmpty() then 'void' else o.output->first().paramTypeXto() endif/]

[template public paramsInXto(o : soa::Operation)]
  [o.input->asOrderedSet()->paramsInXto()->sep(', ')/][/template]

[template public typeXto(p : soa::Parameter)]
  [if (p.type.oclIsKindOf(environment::PrimitiveType))][p.type.name.sanitize()/][elseif (p.type.name <> null and p.type.name.contains('<'))][p.type.name.substring(1, p.type.name.index('<') - 1)/][else][p.simpleTypeEntity() + 'Xto'/][/if]
[/template]

[template private typeXtoFromEntity(p : soa::Parameter)]
  [if (p.type.name.typePrimitif())][p.type.name.sanitize()/][else][p.simpleTypeEntity() + 'Xto'/][/if]
[/template]

[query public typePrimitif(s : String) : Boolean = s.equalsIgnoreCase('Integer') or s.equalsIgnoreCase('String') or s.equalsIgnoreCase('Boolean') or s.equalsIgnoreCase('Float') or s.equalsIgnoreCase('Binary') or s.equalsIgnoreCase('Long') or s.equalsIgnoreCase('Double') or s.equalsIgnoreCase('Date')/]

[query private paramsInXto(inputs : OrderedSet(soa::Parameter)) : Sequence(String) = inputs->asSequence()->collect(temp2 | temp2.paramInXto())/]

[query public paramInXto(param : soa::Parameter) : String = 'final ' + param.paramTypeXto() + ' ' + param.name.sanitize().apply_parameterMethodClassicIn()/]

[comment etourne true si l'entité possède un attribut avec l'annotation Version/]
[query public isMultiple(p : soa::Parameter) : Boolean = if p.multiplicity = environment::MultiplicityKind::ZERO_STAR or p.multiplicity = environment::MultiplicityKind::ONE_STAR then true else false endif/]

[query private simpleTypeEntity(p : soa::Parameter) : String = if p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('entity') then p.type.name.substring(1, p.type.name.size() - 6).sanitize() else p.type.name.sanitize() endif/]

[query public isTypeEntity(p : soa::Parameter) : Boolean = if p.type.name.size() > 6 and p.type.name.substring(p.type.name.size() - 5).equalsIgnoreCase('entity') then true else false endif/]

[query public buildMapperClassName(p : soa::Parameter) : String = (p.simpleTypeEntity() + ' mapper').apply_classImplem()/]