[module name('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::soalight::common::classes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::classRule/]

[comment encoding = UTF-8 /]
[**
 * ****************
 * Paramétrage début
*/]
[template public getNameSetter(p : environment::Property)]
  [p.name.normalize().apply_methodSet()/][/template]

[template public getNameGetter(p : environment::Property)]
  [p.name.normalize().apply_methodGet()/][/template]

[**
 * ****************
 * Paramétrage fin
*/]
[template private nameBaseProperty(p : environment::Property)]
  [p.name.sanitize().toLowerFirst()/][/template]

[template private nameBaseParameter(p : soa::Parameter)]
  [p.name.sanitize().toLowerFirst()/][/template]

[template public nameBaseAttribute(a : environment::Attribute)]
  [a.name.sanitize().toLowerFirst()/][/template]

[comment Les Classes /]
[comment ------------/]
[template public nameService(s : soa::Service)]
  [s.nameClassService()/]Service[/template]

[template public nameServiceRequirements(s : soa::Service)]
  [s.nameService()/]Requirements[/template]

[template public nameServiceTest(s : soa::Service)]
  [s.nameService()/]_Test[/template]

[template public nameServiceInterface(s : soa::Service)]
  [s.nameService()/]_Itf[/template]

[template public nameServiceInterfaceGwt(s : soa::Service)]
  [s.nameService()/][/template]

[template public nameServiceInterfaceGwtAsync(s : soa::Service)]
  [s.nameService()/]Async[/template]

[template public nameServiceImplementationGwt(s : soa::Service)]
  [s.nameService()/]Impl[/template]

[template public nameServiceFacade(s : soa::Service)]
  [s.nameClassService()/]ServiceFacade[/template]

[template public nameServiceFacadeInterface(s : soa::Service)]
  [s.nameServiceFacade()/]_Itf[/template]

[template private nameClassService(s : soa::Service)]
  [s.buildSimpleServiceName().toUpperFirst()/][/template]

[template public buildEntityInterfaceNameFromService(s : soa::Service)]
  [(s.nameClassService() + ' entity').apply_classInterface()/][/template]

[template public buildEntityColumnEnumNamefromService(s : soa::Service)]
  [(s.nameClassService() + ' columns').apply_classEnum()/][/template]

[comment Les Paramètres /]
[comment ---------------/]
[template public nameParam(s : String)]
  [s/][/template]

[template public nameParam(p : environment::Property)]
  [p.nameBaseProperty()/][/template]

[template public nameParam(p : soa::Parameter)]
  [p.nameBaseParameter()/][/template]

[template public nameParam(a : environment::Attribute)]
  [a.nameBaseAttribute()/][/template]

[template public nameXtoParam(a : environment::Attribute)]
  [a.nameBaseAttribute()/][/template]

[comment Les Attributs  /]
[comment ---------------/]
[template public nameProperty(a : environment::Attribute)]
  _[a.nameBaseAttribute()/][/template]

[template public getpkAttributeId(any : ecore::EObject)]
  getId ()[/template]

[template public nameTUFAttribute(a : environment::Attribute)]
  [a.nameBaseAttribute().toUpperFirst()/][/template]

[query public nameSimpleProperty_(p : environment::Property) : String = if p.oclIsKindOf(environment::Reference) then if p.name = null or p.name.size() = 0 then if p.oclAsType(environment::Reference).containingType = null then 'XXXpas de nomXXX : ne devrait pas arriver car p.type est obligatoire : (1..1)' else 'ref' + p.oclAsType(environment::Reference).containingType.name.sanitize().toUpperFirst() + p.namePK_ID() endif else p.name.sanitize() + p.namePK_ID() endif else if p.name = null or p.name.size() = 0 then 'XXXattribut sans nomXXX' else p.oclAsType(environment::Reference).nameBaseReference() endif endif/]

[query public nameSimpleProperty(p : environment::Property) : String = if p.oclIsKindOf(environment::Reference) then if p.name = null or p.name.size() = 0 then if p.oclAsType(environment::Reference).containingType = null then 'XXXpas de nomXXX : ne devrait pas arriver car p.type est obligatoire : (1..1)' else 'ref' + p.oclAsType(environment::Reference).containingType.name.sanitize().toUpperFirst() + p.namePK_ID() endif else p.name.sanitize().toLowerFirst() + p.namePK_ID() endif else if p.name = null or p.name.size() = 0 then 'XXXattribut sans nomXXX' else p.oclAsType(environment::Reference).nameBaseReference() endif endif/]

[template public nameProperty(p : environment::Property)]
  _[p.nameSimpleProperty()/][/template]

[template public mandatory(p : environment::Property)]
  [if (p.isMandatory())]true[else]false[/if][/template]

[query public isMandatory(p : soa::Parameter) : Boolean = p.multiplicity = environment::MultiplicityKind::ONE or p.multiplicity = environment::MultiplicityKind::ONE_STAR/]

[template public nameComponent(s : soa::Service)]
  [s.eContainer(soa::Component).name.sanitize().toLower()/][/template]

[comment Les Setters /]
[comment ------------/]
[template public nameSetter(p : environment::Property)]
  set[p.nameProperty()/][/template]

[comment Les Getters /]
[template public nameGetter(p : environment::Property)]
  get[p.nameProperty()/][/template]

[comment Les Operations /]
[comment ---------------/]
[template public nameOperation(o : soa::Operation)]
  [o.name.sanitize().toLowerFirst()/][/template]

[template public nameOperationResponse(o : soa::Operation)]
  [o.name.sanitize().toLowerFirst()/]Response[/template]

[template public nameBaseReference(r : environment::Reference)]
  [r.name.sanitize().toLowerFirst()/][/template]

[template public nameBaseReferenceInverse(r : environment::Reference)]
  [if (r.oppositeOf = null)][r.containingType.oclAsType(entity::Entity).name.sanitize().toUpperFirst()/][else][r.oppositeOf.nameBaseReference()/][/if][/template]
