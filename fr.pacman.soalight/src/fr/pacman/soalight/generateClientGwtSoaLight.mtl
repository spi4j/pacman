[module generateClientGwtSoaLight('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::files::genGwtUserBusiness/]
[import fr::pacman::soalight::files::genServiceGwtItf/]
[import fr::pacman::soalight::files::genServiceGwtAsync/]
[import fr::pacman::soalight::files::genServiceGwtImpl/]
[import fr::pacman::soalight::files::genIndexHtml/]
[import fr::pacman::soalight::files::genServiceGwtXml/]
[import fr::pacman::soalight::files::genGwtModuleBusiness/]
[import fr::pacman::soalight::files::genGwtModuleCommons/]

[comment encoding = UTF-8 /]
[comment @main/]
[template public GenerateClientGwtSystem(n : environment::Namespace)]
  [if (n.eContainer() = null)]
    [for (clientType : String | n.getClientTypes())]
      [if (clientType.equalsIgnoreCase('GWT'))]
                [n.genGwtUserBusiness()/]
                [n.genIndexHtml()/]
                [n.genServiceGwtXml()/]
                [n.genGwtModuleBusiness()/]
                [n.genGwtModuleCommons()/]
        [for (service : soa::Service | n.eAllContents(soa::Service))]
          [if (service.serviceSeul())]
                            [service.genServiceGwtItf()/]
                            [service.genServiceGwtAsync()/]
                            [service.genServiceGwtImpl()/]
          [/if]
        [/for]
      [/if]
    [/for]
  [/if]
[/template]

[comment @main/]
[template public GenerateClientGwtComponent(component : soa::Component)]
  [for (clientType : String | component.getClientTypes())]
    [if (clientType.equalsIgnoreCase('GWT'))]
      [for (service : soa::Service | component.eAllContents(soa::Service))]
                        [service.genServiceGwtItf()/]
                        [service.genServiceGwtAsync()/]
                        [service.genServiceGwtImpl()/]
      [/for]
    [/if]
  [/for]
[/template]

[comment @main/]
[template public GenerateClientGwtService(service : soa::Service)]
  [for (clientType : String | service.getClientTypes())]
    [if (clientType.equalsIgnoreCase('GWT'))]
                      [service.genServiceGwtItf()/]
                      [service.genServiceGwtAsync()/]
                      [service.genServiceGwtImpl()/]
    [/if]
  [/for]
[/template]