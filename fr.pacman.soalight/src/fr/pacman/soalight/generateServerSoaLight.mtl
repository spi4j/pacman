[comment encoding = UTF-8 /]
[module generateServerSoaLight('http://www.obeonetwork.org/dsl/environment/3.0.0',
							   'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::soa::common::services /]
[import fr::pacman::commons::soa::files::genRSResources /]
[import fr::pacman::soalight::common::outils /]
[import fr::pacman::soalight::files::genService /]
[import fr::pacman::soalight::files::genServiceRequirements /]
[import fr::pacman::soalight::files::genServiceCXF /]
[import fr::pacman::soalight::files::genServiceRS /]
[import fr::pacman::soalight::files::genServiceTest/]
[import fr::pacman::soalight::files::genRSResources /]
[import fr::pacman::soalight::files::genLog4j /]
[import fr::pacman::soalight::files::genWebappRemotingServlet/]
[import fr::pacman::soalight::files::genCXFServlet /]

[template public GenerateServerSystemLight(n : Namespace)]
[comment @main /]
    [if (useLog4J())]
        [n.genLog4j('server')/]
    [/if]
    [comment : agglomération des mains /]
    [for (service : Service | n.eAllContents(Service))]
        [if service.serviceSeul()  and ( not isFromEntityService(service))]
            [genService(service)/]
			[if useServiceRequirements()]
            	[genServiceRequirements(service)/]
			[/if]
            [genServiceTest(service)/]
        [/if]
		[if service.hasRSOperations()] 
			[genServiceRS(service)/]
			[genRSResource(service)/]
		[/if]
		[if service.hasCXFOperations()]
			[genServiceCXF(service)/]
		[/if]
    [/for]

	[if useWS()]
		[genCXFServlet(n) /]
		[if useWsServiceInjection()]
			[comment : n.genRSApplicationConfig()/]
		[else]
			[comment : n.genRSServicesFacadeFactory()/]
		[/if]
	[/if]

    [comment : Si client type SWING, génération de WebappRemotingServlet /]  
	[if clientNeedRemotingServlet()]
        [genWebappRemotingServlet()/]
    [/if]

[/template]

[template public GenerateServerPackageLight(c : Namespace)]
[comment @main /]
    [for (service : Service | c.eAllContents(Service))]
        [if not systemeRacine(c).oclIsUndefined()]            
                [genService(service)/]
				[genServiceTest(service)/]
        [/if]
		[if service.hasRSOperations()] 
			[genServiceRS(service)/]
			[genRSResource(service)/]
		[/if]
		[if service.hasCXFOperations()]
			[genServiceCXF(service)/]
		[/if]
    [/for]
[/template]

[template public GenerateServerComponentLight(component : Component)]
[comment @main /]
    [for (service : Service | component.eAllContents(Service))]
            [genService(service)/]
			[genServiceTest(service)/]
		[if service.hasRSOperations()] 
			[genServiceRS(service)/]
			[genRSResource(service)/]
		[/if]
		[if service.hasCXFOperations()]
			[genServiceCXF(service)/]
		[/if]
    [/for]
[/template]

[template public GenerateServerServiceLight(service : Service)]
[comment @main /]
            [genService(service)/]
		[if useServiceRequirements()]
            [genServiceRequirements(service)/]
        [/if]
            [genServiceTest(service)/]
		[if service.hasRSOperations()] 
			[genServiceRS(service)/]
			[genRSResource(service)/]
		[/if]
		[if service.hasCXFOperations()]
			[genServiceCXF(service)/]
		[/if]
[/template]

