[module generateServerSoaLight('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::commons::soa::files::genRSResources/]
[import fr::pacman::soalight::common::outils/]
[import fr::pacman::soalight::files::genService/]
[import fr::pacman::soalight::files::genServiceRequirements/]
[import fr::pacman::soalight::files::genServiceCXF/]
[import fr::pacman::soalight::files::genServiceRS/]
[import fr::pacman::soalight::files::genServiceTest/]
[import fr::pacman::soalight::files::genRSResources/]
[import fr::pacman::soalight::files::genLog4j/]
[import fr::pacman::soalight::files::genWebappRemotingServlet/]
[import fr::pacman::soalight::files::genCXFServlet/]

[comment encoding = UTF-8 /]
[comment @main/]
[template public GenerateServerSystemLight(n : environment::Namespace)]
  [if (n.useLog4J())]
            [n.genLog4j('server')/]
  [/if]
  [for (service : soa::Service | n.eAllContents(soa::Service))]
    [if (service.serviceSeul() and not service.isFromEntityService())]
                  [service.genService()/]
      [if (service.useServiceRequirements())]
                    	[service.genServiceRequirements()/]
      [/if]
                  [service.genServiceTest()/]
    [/if]
    [if (service.hasRSOperations())]
      			[service.genServiceRS()/]
      			[service.genRSResource()/]
    [/if]
    [if (service.hasCXFOperations())]
      			[service.genServiceCXF()/]
    [/if]
  [/for]
  
  [if (n.useWS())]
    		[n.genCXFServlet()/]
    [if (n.useWsServiceInjection())]
    [else]
    [/if]
  [/if]
  
  [if (n.clientNeedRemotingServlet())]
            [n.genWebappRemotingServlet()/]
  [/if]
  
[/template]

[comment @main/]
[template public GenerateServerPackageLight(c : environment::Namespace)]
  [for (service : soa::Service | c.eAllContents(soa::Service))]
    [if (not (c.systemeRacine() = null))]
                      [service.genService()/]
      				[service.genServiceTest()/]
    [/if]
    [if (service.hasRSOperations())]
      			[service.genServiceRS()/]
      			[service.genRSResource()/]
    [/if]
    [if (service.hasCXFOperations())]
      			[service.genServiceCXF()/]
    [/if]
  [/for]
[/template]

[comment @main/]
[template public GenerateServerComponentLight(component : soa::Component)]
  [for (service : soa::Service | component.eAllContents(soa::Service))]
                [service.genService()/]
    			[service.genServiceTest()/]
    [if (service.hasRSOperations())]
      			[service.genServiceRS()/]
      			[service.genRSResource()/]
    [/if]
    [if (service.hasCXFOperations())]
      			[service.genServiceCXF()/]
    [/if]
  [/for]
[/template]

[comment @main/]
[template public GenerateServerServiceLight(service : soa::Service)]
              [service.genService()/]
  [if (service.useServiceRequirements())]
                [service.genServiceRequirements()/]
  [/if]
              [service.genServiceTest()/]
  [if (service.hasRSOperations())]
    			[service.genServiceRS()/]
    			[service.genRSResource()/]
  [/if]
  [if (service.hasCXFOperations())]
    			[service.genServiceCXF()/]
  [/if]
[/template]