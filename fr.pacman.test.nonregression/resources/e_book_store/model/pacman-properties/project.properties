# Le nom de l'application (sert de prefixe pour l'ensemble des projets)
idAppli = test
# La version de Java pour la compilation des projets
java.version = 11
# L'auteur par defaut des fichiers generes
author = safr@n
# Le package racine des sources du projet
package = fr.test
# La version de l'application
version = 0.0.1-SNAPSHOT
# La version de SPI4J utilisee par les generateurs
spi4j.version = 4.3.0
# Type de la base de donnees, parmi Oracle, H2, Mysql, MariaDB, Postgresql (plusieurs possibles, separes par des virgules)
database.type = 
# Type de client, pour l'instant uniquement SWING, GWT, JSF, JSP ou vide
client.type = 
# Norme de nommage pour Java
naming.type = 
# Delimiteur de ligne (WINDOWS / LINUX)
new.line = WINDOWS
# Le prefixe pour les annotations requirement
requirement.prefix = REQ_
# Prefixe pour les tables de l'application ( format : xxx_ )
server.sql.table.prefix = 
# Nom du schema pour les tables de l'application ( format : xxx. )
server.sql.table.schema = 
# Tablespace specifique (si base Oracle)
server.sql.oracle.index.tablespace = 
# Flag indiquant si le mode debug pour PacMan est actif (plus d'informations en cas d'erreur de generation)
pacman.mode.debug = false
# Flag indiquant si le formattage auto des imports est actif (CTRL + SHIFT + O)
pacman.import.format = true
# Flag indiquant si identifiants de balise user code sont en clair
pacman.userCode.clear = false
# Flag indiquant si la generation de la couche de persistance (= Entity) se fait avec les methodes de LazyLoading
dsl.entity.isLazyLoading = false
# Flag indiquant si la fetching strategy doit etre generee dans l'application (non generee par defaut)
fetchingstrategy.enabled = false
# Flag indiquant si les service requirements doivent etre generes dans l'application (generes par defaut)
servicerequirements.enabled = true
# Flag indiquant si le log4j2.xml doit etre genere dans l'application (genere par defaut)
log4j.enabled = true
# Flag indiquant si les annotations ejb doivent etre generees dans l'application (non generees par defaut)
ejbservice.enabled = false
# Flag pour la generation de la couche Matching et les objets DTO (generee par defaut)
matching.layer.enabled = true
# Flag pour la generation de la couche de securite (serveur / client) (non generee par defaut)
spi4j.security.enabled = false
# Flag indiquant si une application des gestion des entites (crud) doit etre generee (non generee par defaut)
application.crud.enabled = false
# Flag indiquant si les tests de comportement (JBehave) doivent etre generes (non generes par defaut)
tests.bdd.enabled = false
# Flag indiquant si le projet va servir comme librairie
project.isLibrary = false
# Flag indiquant si le projet va servir comme librairie avec un import swagger
project.isLibraryRs = false
# Flag indiquant si on permet la regeneration des fichiers pom.xml, web.xml et log4j2.xml (non par defaut)
# ATTENTION : IL S'AGIT D'UNE RESTAURATION D'USINE ! PERTE DES VERSIONS ET DES AJOUTS.
project.rootfiles.generate.enabled = false
# Flag indiquant si on veut generer des services web (non genere par defaut)
ws.layer.enabled = false
# Flag indiquant si on veut generer des micro services web (non genere par defaut)
wms.layer.enabled = false
# Flag indiquant si on veut utiliser l'injection pour les services web REST (oui par defaut)
ws.layer.hk2.enabled = false
# Flag indiquant si les tests unitaires sur le crud doivent etre generes (generes par defaut)
tests.crud.enabled = true
# Niveau de base pour le decoupage des exigences dans le code genere (0 : aucun decoupage)
requirement.category.base.level = 0
# Version initiale (cf. "set_versionImplem()") mise lors de la premiere genetration pour les tests de versionning d'exigence ("none" : exigence non implementee ou "current" pour la version du modele)
test.requirement.versionning.initial = none
# Fichier de configuration des regles de validation
validation.config.file = validation.xml
# Initialisation du fichier de configuration en cas d'erreur de celui-ci
validation.init.on.error = true
# Utilisation du framework spi4j pour la gestion de fichiers de configuration
config.files.frwk.enabled = false
# Utilisation des parametres pour le user code des methodes soa
deprecated.soa.usercode.params = true
# Projet Eclipse pour la partie serveur de l'application
server.project = test-server
# Dossier de generation des sources serveur
server.source.dir = src/main/java
# Dossier de generation des sources serveur
server.resources.dir = src/main/resources
# Dossier de generation des sources test serveur
server.test.dir = src/test/java
# Dossier de generation des sources sql serveur
server.sql.dir = src/main/sql
# Dossier de generation des sources xmi serveur
server.xmi.dir = src/main/xmi
# Package pour la generation des servlets CXF (SOAP)
server.cfx.pkg = ws.servlet
# Projet Eclipse de la partie commune entre la partie cliente et la partie serveur
commons.project = test-commons
# Dossier de generation des sources common
commons.source.dir = src/main/java
# Dossier du repertoire de configuration common
commons.conf.dir = conf
# Dossier de generation des sources test common
commons.test.dir = src/test/java
# Dossier de generation des resources de test de commons
commons.test.resources.dir = src/test/resources
# Projet Eclipse de la partie modele de l'application
model.project = test-model
# Projet Eclipse de la partie livraison de l'application
delivery.project = test-livraison-hebergement
# Champs additionnels pour les librairies supplémentaires de l'application
server.jar.additional = 
# Champs additionnels pour les tables SQL de l'application
server.sql.table.additional_fields = 
# Mode de fonctionnement pour la pagination (auto, user, vide par defaut)
paging.mode = 
