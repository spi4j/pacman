[module RSResources('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]

[comment encoding = UTF-8 /]
[comment : ****************************************************************/]
[comment : Generate the facade factory for RS services facade (no @Inject)./]
[comment : ****************************************************************/]
[template public RSServicesFacadeFactory(m : soa::System)]
  [m.licence()/]
  package [m.buildPackageRS()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [m.writeImports('RSServicesFacadeFactory')/]
    
  [/protected]
  
  
  /**
   *  Fabrique pour l'ensemble des facades internes.
   *
   * @author [m.getAuthorName()/]
   */
  public class [m.buildRSServicesFacadeFactoryClassName()/]
  {
  
  [if (not (m = null))]
    [for (s : soa::Service | m.eAllContents(soa::Service))]
      [if (s.hasRSOperations())]
        	/**
        	 * Récupération de l'interface pour la facade du service : [s.name/]. 
        	 * @return [s.buildServiceFacadeRSInterfaceName(null)/] : L'interface pour le service.
        	 */
        	public static [s.buildServiceFacadeRSInterfaceName(null)/] [s.buildServiceFacadeRSInterfaceName(null).apply_methodGet()/](){
        		
        		return [s.buildServiceFacadeRSClassName(null)/].['instance'.apply_attributeFinal()/];
        	}
        
      [/if]
    [/for]
    [if (m.isCrudApplication())]
      [for (d : environment::DTO | m.eAllContents(environment::DTO))]
        	/**
        	 * Récupération de l'interface pour la facade du service : [d.name/]. 
        	 * @return [null.buildServiceFacadeRSInterfaceName(d)/] : L'interface pour le service.
        	 */
        	public static [null.buildServiceFacadeRSInterfaceName(d)/] [null.buildServiceFacadeRSInterfaceName(d).apply_methodGet()/](){
        		
        		return [null.buildServiceFacadeRSClassName(d)/].['instance'.apply_attributeFinal()/];
        	}
      [/for]
    [/if]
  [/if]
  }[/template]

[comment : ***********************************************************************/]
[comment : Generate the binding hk2 / cdi injection for services facade (@Inject)./]
[comment : ***********************************************************************/]
[template public RSApplicationConfig(m : soa::System)]
  [m.licence()/]
  package [m.buildPackageRS()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [m.writeImports('RSApplicationConfig')/]
    
  [/protected]
  
  /**
   * Enregistrement des liaisons (implémentation / interface) dans le cadre 
   * de l'injection CDI / HK2 pour Jersey.
   *
   * @author [m.getAuthorName()/].
   */
  public class [m.buildRSApplicationConfigClassName()/] extends ResourceConfig
  {
  	public [m.buildRSApplicationConfigClassName()/]() {
  
  		packages("[m.writePackagesToScan()/]");
  
  		register(new AbstractBinder() {
  			@Override
  			protected void configure() {
  
  [for (s : soa::Service | m.eAllContents(soa::Service))]
    [if (s.hasRSOperations())]
      				bind([s.buildServiceFacadeRSClassName(null)/].class).to([s.buildServiceFacadeRSInterfaceName(null)/].class);
    [/if]
  [/for]
  [if (m.isCrudApplication())]
    [for (d : environment::DTO | m.eAllContents(environment::DTO))]
      				bind([null.buildServiceFacadeRSClassName(d)/].class).to([null.buildServiceFacadeRSInterfaceName(d)/].class);
    [/for]
  [/if]
  			}
  		});
  	}
  }[/template]

[comment : Write the list of packages to scan for jersey. /]
[template private writePackagesToScan(m : soa::System) post(self.trim())]
  [m.buildPackageRsResources(false)/][if (m.isCrudApplication())],[m.buildPackageRsResources(true)/][/if][/template]

[comment : Write all required imports. /]
[template private writeImports(m : soa::System, s : String) post(self.trim())]
  [m.initImports()/]
  [if (not (m = null))]
    [if ('RSApplicationConfig'.equalsIgnoreCase(s))]
      	[m.addImport('org.glassfish.jersey.internal.inject.AbstractBinder')/]
      	[m.addImport('org.glassfish.jersey.server.ResourceConfig')/]
    [/if]
    
    [for (service : soa::Service | m.eAllContents(soa::Service))]
      [if (service.hasRSOperations())]
        	[m.addImport(service.buildPackageImplWs() + '.' + service.buildServiceFacadeRSClassName(null))/]
        	[m.addImport(service.buildPackageWsApi() + '.' + service.buildServiceFacadeRSInterfaceName(null))/]
      [/if]
    [/for]
  [/if]
  [m.flushImports()/][/template]
