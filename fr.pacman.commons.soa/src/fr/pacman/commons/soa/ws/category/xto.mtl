[module xto('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::soa::common::packages/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[comment : Generation de la classe commune (application) pour les champs additionnels. /]
[template public xtoAppliAbs(s : soa::System)]
  [s.licence()/]
  package [s.buildPackageBusiness()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.writeImports()/]
    
  [/protected]
  
  
  /**
   * Classe abstraite contenant les attributs additionnels qui sont communs à tous les xtos.
   *
   * @author [s.getAuthorName()/]
   */
  public abstract class [s.buildAppliXtoAbstractClassName()/] {
  
  	// CONSTANTES
  
  	// Constantes
  	[protected (s.getUserCodeId('Constantes')) startTagPrefix('// ') endTagPrefix('// ')]
     
   [/protected]
  
  
  	// ATTRIBUTS
  [for (columnProp : String | s.get_automaticColumnsProperties())]
    [if (columnProp.hasToWriteColumn())]
         	/** [columnProp.getNameColumn().toUpperFirst()/] */
         	@XmlElement(namespace = "", name = "[columnProp.getNameColumn().sanitize().toLowerFirst()/]")
         	[if (columnProp.useWS())]@JsonProperty("[columnProp.getNameColumn().sanitize().toLowerFirst()/]")[/if]
         	private [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_attributeDefault()/];[columnProp.lineSeparator()/]
    [/if]
  [/for]
  
  	// Commons Attributs 
  	[protected (s.getUserCodeId('Commons Attributs')) startTagPrefix('// ') endTagPrefix('// ')]
     
   [/protected]
  
  
   	// METHODES
  
  [for (columnProp : String | s.get_automaticColumnsProperties())]
    	[columnProp.getAutomaticGetter()/]
    
    	[columnProp.getAutomaticSetter()/]
    
  [/for]
  }[/template]

[comment : Generation des getter pour les champs additionnels. /]
[template private getAutomaticGetter(columnProp : String)]
  [if (columnProp.hasToWriteColumn())]
    public [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_methodGet()/] ()
    {
    	return [columnProp.getNameColumn().apply_attributeDefault()/];
    }[/if]
[/template]

[comment : Generation des setter pour les champs additionnels. /]
[template private getAutomaticSetter(columnProp : String)]
  [if (columnProp.hasToWriteColumn())]
    public void [columnProp.getNameColumn().apply_methodSet()/] (final [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_parameterMethodClassicIn()/])
    {
    	[columnProp.getAffectationPrefix()/][columnProp.getNameColumn().apply_attributeDefault()/] = [columnProp.getNameColumn().apply_parameterMethodClassicIn()/];
    }[/if]
[/template]

[template private getImplementation(d : environment::DTO) post(self.trim())]
  [if (d.hasAutomaticColumns() and not d.hasParent())]extends [d.buildAppliXtoAbstractClassName()/][/if] [d.getImplementationForNoAutomaticColumns()/][/template]

[template private getImplementationForNoAutomaticColumns(d : environment::DTO) post(self.trim())]
  [if (d.hasParent())]
    [if (not d.hasAutomaticColumns())]extends[else], [/if]
    [d.supertype.oclAsType(environment::DTO).buildXtoClassNameFromDto()/][/if]
   [d.getImplementationForSimpleXto()/][/template]

[comment : For REST services, the Xto implements the RsXto_Itf which is just a markup interface. /]
[template private getImplementationForSimpleXto(d : environment::DTO) post(self.trim())]
  implements [if (not d.isLibraryRS())][if (d.hasParent())][if (d.useSpi4jSecurity() and d.dtoIsUser())]User_Itf[/if][else][d.getClassNameForXto_Itf()/]<[d.genPkType()/]>, RsXto_Itf[if (d.useSpi4jSecurity() and d.dtoIsUser())], User_Itf[/if][/if][else]Serializable[/if][/template]

[comment : No need of persistence for REST services but do not rely on the metadata 'NOT_PERSISTENT'./]
[template public xto(d : environment::DTO)]
  [d.licence()/]
  package [d.buildPackageWsApiDto()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.writeImports()/]
    
  [/protected]
  
  
  /**
  [if (d.isParent())]
     * XTO abstrait pour le type '[d.nameClassDto()/]'.
  [else]
     * Implémentation XTO pour le type '[d.nameClassDto()/]'.
  [/if]
   * @author [d.getAuthorName()/]
   */
  @XmlRootElement(name = "[d.buildXtoClassNameFromDto()/]", namespace = "http://[d.getNamespaceXto()/]/xto")
  @XmlAccessorType(XmlAccessType.FIELD)
  public [if (d.isParent())]abstract [/if]class [d.buildXtoClassNameFromDto()/] [d.getImplementation()/]
  {
  
     private static final long serialVersionUID = 1L;
  
     // ATTRIBUTS
  
  [if (not d.hasParent() and not d.isLibraryRS())]
       /** L'identifiant. */
       // for annotation_[d.nameENUM_PK_ID()/]
       [protected (d.getUserCodeId('for annotation_' + d.nameENUM_PK_ID())) startTagPrefix('// ') endTagPrefix('// ')]
            @XmlElement(namespace = "", name = "[d.nameENUM_PK_ID()/]")
            [if (d.useWS())]@JsonProperty("[d.nameENUM_PK_ID()/]")[/if]
            private [d.genPkType()/] [d.namePK_ID()/];
       [/protected]
    
    
  [/if]
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [if (not a.isPropertyFromParent(d))]
         /** [a.description/]. */
         // for annotation_[a.nameBaseAttribute()/]
         [protected (d.getUserCodeId('for annotation_' + a.nameBaseAttribute())) startTagPrefix('// ') endTagPrefix('// ')]
              @XmlElement(namespace = "", name = "[a.nameBaseAttribute()/]")
              [if (a.useWS())]@JsonProperty("[a.nameBaseAttribute()/]")[/if]
         [/protected]
      
         [a.getProperty()/];
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.isPropertyFromParent(d))]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent() and not r.isLibraryRS())]
           /** La FK sur le Type '[r.nameClassXto()/]'. */
           // for annotation_1_[r.nameBaseReference() + r.namePK_ID()/]
           [protected (r.getUserCodeId('for annotation_1_' + r.nameBaseReference() + r.namePK_ID())) startTagPrefix('// ') endTagPrefix('// ')]
                @XmlElement(namespace = "", name = "[r.nameBaseReference()/][r.namePK_ID()/]")
                [if (r.useWS())]@JsonProperty("[r.nameBaseReference()/][r.namePK_ID()/]")[/if]
           [/protected]
        
           [r.getXtoReferenceId()/]
      [/if]
      
         /** L'instance de '[r.referencedType.oclAsType(environment::DTO).genTypeName()/]' associee a  l'instance de '[d.nameClassXto()/]' courante. */
         // for annotation_[r.nameBaseReference()/]
         [protected (r.getUserCodeId('for annotation_' + r.nameBaseReference())) startTagPrefix('// ') endTagPrefix('// ')]
              @XmlElement(namespace = "", name = "[r.nameBaseReference()/]")
              [if (r.useWS())]@JsonProperty("[r.nameBaseReference()/]")[/if]
         [/protected]
      
         [r.getXtoReference()/]
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
    [if (not r.isPropertyFromParent(d))]
         /** La liste de type '[r.nameClassXto()/]' associee a  l'instance de '[d.nameClassXto()/]' courante. */
         // for annotation_1_[r.name.toLowerFirst().apply_attributeMultiple()/]
         [protected (r.getUserCodeId('for annotation_1_' + r.name.toLowerFirst().apply_attributeMultiple())) startTagPrefix('// ') endTagPrefix('// ')]
              @XmlElement(namespace = "", name = "[r.nameBaseReference()/]")
              [if (r.useWS())]@JsonProperty("[r.nameBaseReference()/]")[/if]
         [/protected]
      
         [r.getRefListeXto()/]
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
    [if (not r.isPropertyFromParent(d))]
         /** La liste de type '[r.nameClassXto()/]' associee a  l'instance de '[d.nameClassXto()/]' courante. */
         // for annotation_[r.name.toLowerFirst().apply_attributeMultiple()/]
         [protected (r.getUserCodeId('for annotation_' + r.name.toLowerFirst().apply_attributeMultiple())) startTagPrefix('// ') endTagPrefix('// ')]
              @XmlElement(namespace = "", name = "[r.nameBaseReference()/]")
              [if (r.useWS())]@JsonProperty("[r.nameBaseReference()/]")[/if]
         [/protected]
      
         [r.getRefListeXto()/]
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [if (not r.isPropertyFromParent(d) and not r.isLibraryRS())]
         /** La FK sur le type '[r.containingType.oclAsType(environment::DTO).nameBaseXtoUP()/]'. */
         // for annotation_2[r.nameBaseReferenceInverse() + r.namePK_ID()/]
         [protected (r.getUserCodeId('for annotation_2' + r.nameBaseReferenceInverse() + r.namePK_ID())) startTagPrefix('// ') endTagPrefix('// ')]
              @XmlElement(namespace = "", name = "[r.nameBaseReferenceInverse()/][r.namePK_ID()/]")
              [if (r.useWS())]@JsonProperty("[r.nameBaseReferenceInverse()/][r.namePK_ID()/]")[/if]
         [/protected]
      
         [r.getXtoReferenceInverseId()/]
      
    [/if]
  [/for]
  [if (not d.isNotPersistent() and d.hasEntityWithVersion())]
       /** La valeur de la version. */
       @SuppressWarnings("all")
       @XmlTransient
       private Serializable _versionValue;
    
  [/if]
     // METHODES
  
  [if (not d.hasParent() and not d.isLibraryRS())]
       @Override
       public [d.genPkType()/] getId ()
       {
          return [d.namePK_ID()/];
       }
    
       @Override
       public void setId (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/])
       {
          [d.getAffectationPrefix()/][d.namePK_ID()/] = [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/];
       }
    
  [/if]
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [if (not a.isPropertyFromParent(d))]
         /**
          * [a.comPrefix('Obtenir')/]
          * [a.comReturn()/]
          */
      [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
           @Override
           public String getIdentifiant ()
      [else]
           [a.getGetter()/]
      [/if]
         {
            return [a.name.normalize().apply_attributeDefault()/];
         }
      
         /**
          * [a.comPrefix('Affecter')/]
          * [a.getComParamIn()/]
          */
      [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
           public void setIdentifiant (final [a.genPropertyType()/] [a.name.normalize().apply_parameterMethodClassicIn()/])
      [else]
           [a.getSetter()/]
      [/if]
         {
            [a.getAffectationPrefix()/][a.name.normalize().apply_attributeDefault()/] = [a.name.normalize().apply_parameterMethodClassicIn()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.isPropertyFromParent(d))]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent() and not r.isLibraryRS())]
           /**
            * [r.comPrefix('Obtenir')/]
            * [r.comReturn()/]
            */
           [r.getGetterIdDto()/]
           {
              if ([r.name.toLowerFirst().apply_attributeDefault()/] != null)
              {
                 [r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.toLowerFirst().apply_attributeDefault()/].getId();
              }
              return [r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/];
           }
        
           /**
            * [r.comPrefix('Affecter')/]
            * [r.getComParamIdIn()/]
            */
           [r.getSetterIdDto()/]
           {
              [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.toLowerFirst().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
              [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/] = null;
           }
        
      [/if]
         /**
          * Obtenir l'instance de '[r.nameClassXto()/]' associee a  l'instance de '[d.nameClassXto()/]' courante.
          * @return L'instance desiree.
          */
         [r.getGetterXto()/]
         {
            return [r.name.toLowerFirst().apply_attributeDefault()/];
         }
      
         /**
          * Affecter [r.nameBaseReference()/] de [d.nameBaseXto()/].
          * [r.getComParamIn()/]
          */
         [r.getSetterXtoReference()/]
         {
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent() and not r.isLibraryRS())]
              if ([r.name.toLowerFirst().apply_parameterMethodClassicIn()/] == null)
              {
                 [r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/](null);
              }
              else
              {
                 [r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/]([r.name.toLowerFirst().apply_parameterMethodClassicIn()/].getId());
              }
      [/if]
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/] = [r.name.toLowerFirst().apply_parameterMethodClassicIn()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
          * Obtenir la liste de type '[r.nameClassXto()/]' associee à  l'instance de '[d.nameClassXto()/]' courante.
          * @return La liste desiree.
          */
         [r.getGetterListXto()/]
         {
            return [r.name.toLowerFirst().apply_attributeMultiple()/];
         }
      
         /**
          * Affecter les [r.nameClassXto()/] de [d.nameBaseXto()/].
          * [r.getComParamTabIn()/]
          */
         [r.getSetterListXto()/]
         {
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
          * Obtenir la liste de type '[r.nameClassXto()/]' associee à  l'instance de '[d.nameClassXto()/]' courante.
          * @return La liste desiree.
          */
         [r.getGetterListXto()/]
         {
            return [r.name.toLowerFirst().apply_attributeMultiple()/];
         }
      
         /**
          * Affecter les [r.nameClassXto()/] de [d.nameBaseXto()/].
          * [r.getComParamTabIn()/]
          */
         [r.getSetterListXto()/]
         {
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [if (not r.isPropertyFromParent(d) and not r.isLibraryRS())]
         /**
          * Obtenir [r.nameBaseReferenceInverse()/] de [d.nameBaseXto()/].
          * [r.comReturnInverse()/]
          */
         [r.getGetterInverseIdDto()/]
         {
            return [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];
         }
      
         /**
          * Affecter [r.nameBaseReferenceInverse()/] de [d.nameBaseXto()/].
          * [r.getComParamInverseIdIn()/]
          */
         [r.getSetterInverseIdDto()/]
         {
            [r.getAffectationPrefix()/][r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
         }
      
    [/if]
  [/for]
  [if (not d.isParent())]
       @Override
       public String toString ()
       {
          // toString
          [protected (d.getUserCodeId('toString')) startTagPrefix('// ') endTagPrefix('// ')]
            
                  return [d.toString()/]
            
          [/protected]
    
       }
  [/if]
  }[/template]

[comment : Add required imports for app auto fields /]
[template private writeImports(s : soa::System) post(self.trim())]
  [s.initImports()/]
  [s.addImport('java.util.List')/]
  [s.addImport('java.util.Date')/]
  [s.addImport('fr.spi4j.type.XtopSup')/]
  [s.addImport(s.getApplicationPackage() + '.Binary')/]
  [s.addImport('com.fasterxml.jackson.annotation.JsonProperty')/]
  [s.addImport('jakarta.xml.bind.annotation.XmlAccessType')/]
  [s.addImport('jakarta.xml.bind.annotation.XmlAccessorType')/]
  [s.addImport('jakarta.xml.bind.annotation.XmlRootElement')/]
  [s.addImport('jakarta.xml.bind.annotation.XmlElement')/]
  [s.flushImports()/][/template]

[comment : Write all the required imports. /]
[template private writeImports(d : environment::DTO) post(self.trim())]
  [d.initImports()/]
  [d.addImport('java.util.List')/]
  [d.addImport('java.util.Date')/]
  [d.addImport('java.io.Serializable')/]
  [d.addImport(d.getApplicationPackage() + '.Binary')/]
  [d.addImport('jakarta.xml.bind.annotation.XmlAccessType')/]
  [d.addImport('jakarta.xml.bind.annotation.XmlAccessorType')/]
  [d.addImport('jakarta.xml.bind.annotation.XmlRootElement')/]
  [d.addImport('jakarta.xml.bind.annotation.XmlElement', d.hasAttributes())/]
  [d.addImport('com.fasterxml.jackson.annotation.JsonProperty', d.hasAttributes() and d.useWS())/]
  [d.addImport('fr.spi4j.lib.security.User_Itf', d.useSpi4jSecurity() and d.dtoIsUser())/]
  [d.addImport('jakarta.xml.bind.annotation.XmlTransient', d.hasEntityWithVersion())/]
  [d.addImport(d.buildPackageBusiness() + '.' + d.buildAppliXtoAbstractClassName(), d.hasAutomaticColumns() and not d.hasParent())/]
  [d.addImport(d.getImportForXto_Itf(), not d.isLibraryRS())/]
  [d.addImport(d.getImportForRsXto_Itf(), not d.isLibraryRS())/]
  
  [for (r : environment::Reference | d.referencesNoStar())]
    [d.addImport(r.referencedType.oclAsType(environment::DTO).buildPackageWsApiDto() + '.' + r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto(), not r.isPropertyFromParent(d))/]
  [/for]
  
  [for (r : environment::Reference | d.referencesStarStar())]
    [d.addImport(r.referencedType.oclAsType(environment::DTO).buildPackageWsApiDto() + '.' + r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto(), not r.isPropertyFromParent(d))/]
  [/for]
  
  [for (r : environment::Reference | d.referencesStarNoStar())]
    [d.addImport(r.referencedType.oclAsType(environment::DTO).buildPackageWsApiDto() + '.' + r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto(), not r.isPropertyFromParent(d))/]
  [/for]
  [d.flushImports()/][/template]

[comment : First part for the ToString() method, for simplication in REST services, we dont have getId ad SetId so send a "NO-ID". /]
[template private toString(d : environment::DTO)]
  getClass().getName() + '['['/]' [if (d.isLibraryRS())]+ "NO-ID" [d.endToString()/] [else] + getId () [d.endToString()/] [/if]+ ']';[/template]

[comment : Second part of the "toString()" method. /]
[template private endToString(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())] + ", " + [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')] getIdentifiant () [else][a.name.normalize().apply_methodGet()/]()[/if]  [/for][for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent() and not r.isLibraryRS())] + ", " + [r.name.toLowerFirst().apply_methodGet()/][r.namePK_ID()/] ()[/if][/for][/template]
