[module references('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::convention::rule::attributeRule/]

[comment encoding = UTF-8 /]
[comment : les references multiples. /]
[query public referencesStar(s : environment::DTO) : OrderedSet(environment::Reference) = s.references->select(r | r.isMultiple() and r.navigable and not r.isComputed())->asOrderedSet()->sortedBy(temp1 | temp1.name.toLower())/]

[comment :les references d'un Dto sans multiplicite ./]
[query public referencesNoStar(s : environment::DTO) : OrderedSet(environment::Reference) = s.references->select(r | not r.isMultiple() and r.navigable and not r.isComputed())->asOrderedSet()->sortedBy(temp2 | temp2.name.toLower())/]

[comment : les references multiples ayant une reference opposee elle aussi multiple. /]
[query public referencesStarStar(s : environment::DTO) : OrderedSet(environment::Reference) = s.references->select(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null) and r.oppositeOf.isMultiple() and not r.isComputed())->asOrderedSet()->sortedBy(temp3 | temp3.name.toLower())/]

[comment : les references multiples n'ayant pas de reference opposee multiple. /]
[comment : autrement dit les references multiples ayant une reference opposee simple ou pas de reference opposee. /]
[query public referencesStarNoStar(s : environment::DTO) : OrderedSet(environment::Reference) = s.references->select(r | r.isMultiple() and r.navigable and not (not (r.oppositeOf = null) and r.oppositeOf.isMultiple()) and not r.isComputed())->asOrderedSet()->sortedBy(temp4 | temp4.name.toLower())/]

[comment : les references avec multiplicite vers un Dto. /]
[query public referencingStar(s : environment::DTO) : OrderedSet(environment::Reference) = s.biggestParentUntilDtoRegistry().eAllContents(environment::Reference)->select(r | r.isMultiple() and r.referencedType = s and r.navigable and (r.oppositeOf = null or not r.oppositeOf.isMultiple()) and not r.containingType.oclAsType(environment::DTO).isNotPersistent() and not r.isComputed())->asOrderedSet()->sortedBy(temp5 | temp5.name.toLower())/]

[comment : /]
[query public biggestParentUntilDtoRegistry(o : environment::ObeoDSMObject) : environment::ObeoDSMObject = if o.eContainer() = null then o else o.eContainer().oclAsType(environment::ObeoDSMObject).biggestParentUntilDtoRegistry() endif/]

[comment : /]
[template public getXtoReferenceId(r : environment::Reference)]
  private [r.genPkType()/] [r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/];[/template]

[comment : /]
[template public getXtoReference(r : environment::Reference)]
  private [r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto()/] [r.name.toLowerFirst().apply_attributeDefault()/];[/template]

[template public getXtoReferenceInverseId(r : environment::Reference)]
  private [r.genPkType()/] [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];[/template]

[template public getRefListeXto(r : environment::Reference)]
  private List<[r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto()/]> [r.name.toLowerFirst().apply_attributeMultiple()/];[/template]