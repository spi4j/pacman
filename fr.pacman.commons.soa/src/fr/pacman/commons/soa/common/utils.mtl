[module utils('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::services::MandatoryUtils/]

[comment encoding = UTF-8 /]
[comment : /]
[query public isParent(d : environment::DTO) : Boolean = not (d.systemeRacine() = null) and d.systemeRacine().eAllContents(environment::DTO)->exists(child | child.supertype = d)/]

[comment : /]
[query public hasParent(d : environment::DTO) : Boolean = not (d.supertype = null)/]

[comment : /]
[query public isPropertyFromParent(p : environment::Property, d : environment::DTO) : Boolean = d.hasParent() and d.supertype.properties->exists(parentProp | parentProp.name = p.name)/]

[comment Détermine si un attribut ou une référence possède une méta-donnée Annotation de titre "COMPUTED". /]
[query public isComputed(p : environment::Property) : Boolean = not (p.metadatas = null) and p.metadatas.metadatas->exists(m | not (m = null) and not (m.oclAsType(environment::Annotation).title = null) and m.oclAsType(environment::Annotation).title.equalsIgnoreCase('COMPUTED'))/]

[comment Renvoie sous la forme d'un OrderedSet la liste des attributs d'un DTO qui possèdent une méta-donnée Annotation de titre "COMPUTED". /]
[query public attributesNotComputed(s : environment::DTO) : OrderedSet(environment::Attribute) = s.getAttributes()->select(a | not a.isComputed())->asOrderedSet()/]

[comment : ??????????????????????????????!!!!!!!!!!!!/]
[template public mandatory(p : environment::Property)]
  [if (p.isMandatory())]true[else]false[/if]
[/template]

[comment : Teste si une propriété (attribut ou référence) est obligatoire. /]
[query public isMandatory(p : environment::Property) : Boolean = p.isMandatorySoa()/]

[query public serviceFromDto(d : environment::DTO) : soa::Service = if not (d.systemeRacine() = null) and d.systemeRacine().eAllContents(soa::Service)->exists(s | d.buildSimpleDtoName() = s.buildSimpleServiceName()) then d.systemeRacine().eAllContents(soa::Service)->select(s | d.buildSimpleDtoName() = s.buildSimpleServiceName())->first() else null endif/]

[comment : /]
[query public systemeRacine(o : environment::ObeoDSMObject) : soa::System = if o = null then null else if o.oclIsKindOf(soa::System) then o.oclAsType(soa::System) else if o.oclIsKindOf(entity::Root) then null else o.eContainer(soa::System).systemeRacine() endif endif endif/]