[comment encoding = UTF-8 /]
[module genRSFrontServer('http://www.obeonetwork.org/dsl/soa/4.0.0',
                         'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]

[import fr::pacman::commons::soa::common::services /]

[import fr::pacman::soapifirst::common::classes /]
[import fr::pacman::soapifirst::server::RSFrontResources /]
[import fr::pacman::soapifirst::server::RSFrontResourcesTest /]

[comment : ***********************************************************************/]
[comment : Generate a README.txt file for the localisation of configuration file. /]
[comment : ***********************************************************************/]
[template public genRSReadMeFile(any : OclAny)]
[file (filename('', '' , 'README.txt'), false, 'UTF-8')]
[any.rsReadMe()/]
[/file]
[/template]

[comment : ****************************************************************************/]
[comment : Generate a .properties file with the default configuration for the library. /]
[comment : ****************************************************************************/]
[template public genRSConfigurationFile(c : Component)]
[file (filename(getServerResourcesDir(), '' , getApplicationName() + 'Application.properties'), false, 'UTF-8')]
[c.rsConfigurationFile()/]
[/file]
[/template]

[comment : *****************************************************/]
[comment : Generation for the delegate on every front resource. /]
[comment : *****************************************************/]
[template public genRSFrontDelegate(s : Service)]
[file (filename(getServerSourceDir(),  buildPackageRsFrontDelegates(), s.buildRSFrontDelegateClassName() + '.java'), false, 'UTF-8')]
[s.rsFrontDelegate()/]
[/file]
[/template]

[comment : ****************************************************************/]
[comment : Generation for all the REST operations in every front resource. /]
[comment : ****************************************************************/]
[template public genRSFrontResource(s : Service)]
[file (filename(getServerSourceDir(),  buildPackageRsFrontResources(), s.buildRSFrontResourceClassName() + '.java'), false, 'UTF-8')]
[s.rsFrontResource()/]
[/file]
[/template]

[comment : *******************************************************/]
[comment : Generation of the configurator class for the token(s). /]
[comment : *******************************************************/]
[template public genRSFrontResourceTokensConfigurator(c : Component)]
[file (filename(getServerSourceDir(),  buildPackageRsFront(), buildRSFrontTokensConfigClassName() + '.java'), false, 'UTF-8')]
[c.rsFrontTokensConfiguration()/]
[/file]
[/template]

[comment : ****************************************************************/]
[comment : Generation of the helper class for testing the front resources. /]
[comment : ****************************************************************/]
[template public genRSFrontResourceTestHelper(c : Component)]
[file (filename(getServerTestDir(),  buildPackageRsFrontResources(), buildRSFrontResourceTestHelperClassName() + '.java'), false, 'UTF-8')]
[c.rsFrontResourceTestHelper()/]
[/file]
[/template]

[comment : ***************************************************/]
[comment : Generation for JUnit test in every front resource. /]
[comment : ***************************************************/]
[template public genRSFrontResourceTest(s : Service)]
[file (filename(getServerTestDir(),  buildPackageRsFrontResources(), s.buildRSFrontResourceTestClassName() + '.java'), false, 'UTF-8')]
[s.rsFrontResourceTest()/]
[/file]
[/template]
