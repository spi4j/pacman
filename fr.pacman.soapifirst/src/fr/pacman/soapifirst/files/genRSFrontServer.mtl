[module genRSFrontServer('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::soapifirst::common::classes/]
[import fr::pacman::soapifirst::server::RSFrontResources/]
[import fr::pacman::soapifirst::server::RSFrontResourcesTest/]

[comment encoding = UTF-8 /]
[comment : ***********************************************************************/]
[comment : Generate a README.txt file for the localisation of configuration file. /]
[comment : ***********************************************************************/]
[template public genRSReadMeFile(any : ecore::EObject)]
  [file (''.filename('', 'README.txt'), overwrite, 'UTF-8')]
    [any.rsReadMe()/]
  [/file]
[/template]

[comment : ****************************************************************************/]
[comment : Generate a .properties file with the default configuration for the library. /]
[comment : ****************************************************************************/]
[template public genRSConfigurationFile(c : soa::Component)]
  [file (c.getServerResourcesDir().filename('', c.getApplicationName() + 'Application.properties'), overwrite, 'UTF-8')]
    [c.rsConfigurationFile()/]
  [/file]
[/template]

[comment : *****************************************************/]
[comment : Generation for the delegate on every front resource. /]
[comment : *****************************************************/]
[template public genRSFrontDelegate(s : soa::Service)]
  [file (s.getServerSourceDir().filename(s.buildPackageRsFrontDelegates(), s.buildRSFrontDelegateClassName() + '.java'), overwrite, 'UTF-8')]
    [s.rsFrontDelegate()/]
  [/file]
[/template]

[comment : ****************************************************************/]
[comment : Generation for all the REST operations in every front resource. /]
[comment : ****************************************************************/]
[template public genRSFrontResource(s : soa::Service)]
  [file (s.getServerSourceDir().filename(s.buildPackageRsFrontResources(), s.buildRSFrontResourceClassName() + '.java'), overwrite, 'UTF-8')]
    [s.rsFrontResource()/]
  [/file]
[/template]

[comment : *******************************************************/]
[comment : Generation of the configurator class for the token(s). /]
[comment : *******************************************************/]
[template public genRSFrontResourceTokensConfigurator(c : soa::Component)]
  [file (c.getServerSourceDir().filename(c.buildPackageRsFront(), c.buildRSFrontTokensConfigClassName() + '.java'), overwrite, 'UTF-8')]
    [c.rsFrontTokensConfiguration()/]
  [/file]
[/template]

[comment : ****************************************************************/]
[comment : Generation of the helper class for testing the front resources. /]
[comment : ****************************************************************/]
[template public genRSFrontResourceTestHelper(c : soa::Component)]
  [file (c.getServerTestDir().filename(c.buildPackageRsFrontResources(), c.buildRSFrontResourceTestHelperClassName() + '.java'), overwrite, 'UTF-8')]
    [c.rsFrontResourceTestHelper()/]
  [/file]
[/template]

[comment : ***************************************************/]
[comment : Generation for JUnit test in every front resource. /]
[comment : ***************************************************/]
[template public genRSFrontResourceTest(s : soa::Service)]
  [file (s.getServerTestDir().filename(s.buildPackageRsFrontResources(), s.buildRSFrontResourceTestClassName() + '.java'), overwrite, 'UTF-8')]
    [s.rsFrontResourceTest()/]
  [/file]
[/template]