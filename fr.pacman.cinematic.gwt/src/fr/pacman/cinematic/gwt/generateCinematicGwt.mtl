[comment encoding = UTF-8 /]
[module generateCinematicGwt('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::cinematic::gwt::files::genGwtLanceur /]
[import fr::pacman::cinematic::gwt::files::genAppliAsyncCallback /]
[import fr::pacman::cinematic::gwt::files::genGwtViews /]
[import fr::pacman::cinematic::gwt::files::genPresenter /]
[import fr::pacman::cinematic::gwt::files::genViewImplementation /]
[import fr::pacman::cinematic::gwt::files::genModuleGwtXml /]
[import fr::pacman::cinematic::gwt::files::genFlowManager /]
[import fr::pacman::cinematic::api::common::model /]
[import fr::pacman::cinematic::gwt::common::name /]

[template public generate(root : CinematicRoot)]
[comment @main /]
[comment : package client.ui.gwt /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]

[genModuleGwtXml(root)/]
[genGwtLanceur(root)/]
[genAppliAsyncCallback(root)/]
[genGwtViews(root, root.eAllContents(ViewContainer)->sortedBy(name))/]

[comment : génération pour les ViewContainers /]
[for (viewContainer : ViewContainer | root.eAllContents(ViewContainer))]
[genPresenter(viewContainer)/]
[genViewImplementation(viewContainer)/]
[/for]

[comment : génération pour les Flows /]
[for (flow : Flow | root.eAllContents(Flow))]
[genFlowManager(flow)/]
[/for]
    [/if]
[/for]
[/template]
