[module gwtViews('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::gwt::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::gwt::common::name/]

[comment encoding = UTF-8 /]
[template public gwtViews(r : cinematic::CinematicRoot, viewContainers : Sequence(view::ViewContainer))]
  [r.licence()/]
  package [r.namePackageGwt()/]; // NOPMD
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [r.writeImports()/]
    
  [/protected]
  
  /**
   * Association des vues pour GWT.
   * @author [r.getAuthorName()/]
   */
  public class [r.nameGwtViews()/] extends ViewsAssociation
  {
  
     // CHECKSTYLE:OFF
     @SuppressWarnings("unchecked")
     @Override
     // CHECKSTYLE:ON
     public <TypeView extends View_Itf> TypeView getViewForPresenter (final Presenter_Abs<TypeView, ?> p_presenter)
     {
        if (p_presenter == null)
        {
           throw new Spi4jRuntimeException("Le paramètre presenter ne peut pas être null",
                 "Précisez un présenteur non null dont vous cherchez la vue");
        }
  [for (viewContainer : view::ViewContainer | viewContainers)]
          else if (p_presenter instanceof [viewContainer.namePresenter()/])
          {
             return (TypeView) new [viewContainer.nameViewImplementation()/](([viewContainer.namePresenter()/]) p_presenter);
          }
  [/for]
        // Vues supplémentaires
        [protected (r.getUserCodeId('Vues supplémentaires')) startTagPrefix('// ') endTagPrefix('// ')]

        [/protected]
  
        throw new Spi4jRuntimeException("Vue inconnue pour le presenteur : " + p_presenter.getClass().getName(),
                 "Ajouter une association dans GWTViews");
     }
  
     @Override
     public Presenter_Abs<? extends View_Itf, ?> getPresenterForAnnotatedView (final String p_userView)
     {
        throw new Spi4jRuntimeException(
                 "Cette méthode devrait être utilisée uniquement lors des tests JBehave, hors cette classe n'est utilisée qu'en production",
                 "Ne recherchez pas un présenteur selon son annotation @UserView dans vos écrans");
     }
  
     // GwtViews
     [protected (r.getUserCodeId('GwtViews')) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(r : cinematic::CinematicRoot) post(self.trim())]
  [r.initImports()/]
  [r.addImport('fr.spi4j.ui.mvp.ViewsAssociation')/]
  [r.addImport('fr.spi4j.ui.mvp.View_Itf')/]
  [r.addImport('fr.spi4j.ui.mvp.Presenter_Abs')/]
  [r.addImport('fr.spi4j.exception.Spi4jRuntimeException')/]
  
  [for (viewContainer : view::ViewContainer | r.viewContainers)]
    	[r.addImport(viewContainer.namePackageViewContainerPresenter() + '.' + viewContainer.namePresenter())/]
    	[r.addImport(viewContainer.namePackageViewContainerImplementation() + '.' + viewContainer.nameViewImplementation())/]
  [/for]
  
  [r.flushImports()/][/template]