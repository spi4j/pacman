[module presenter('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::gwt::common::name/]
[import fr::pacman::cinematic::gwt::common::packages/]
[import fr::pacman::cinematic::gwt::client::ui::pkg::manageEvent/]
[import fr::pacman::cinematic::gwt::common::gwt_commons/]
[import fr::pacman::commons::convention::rule::variableRule/]

[comment encoding = UTF-8 /]
[template public presenter(viewContainer : view::ViewContainer)]
  [viewContainer.licence()/]
  package [viewContainer.namePackageViewContainerPresenter()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [viewContainer.writeImports()/]
    
  [/protected]
  
  
  /**
   * Presenter.
   * @author [viewContainer.getAuthorName()/]
   */
  // Class definition
  [protected (viewContainer.getUserCodeId('Class definition')) startTagPrefix('// ') endTagPrefix('// ')]
    public class [viewContainer.namePresenter()/] extends Presenter_Abs<[viewContainer.nameViewInterface()/], [viewContainer.getTypePresenter()/]>
  [/protected]
  
  {
  
     // Constructeur(s)
     [protected (viewContainer.getUserCodeId('Constructeur(s)')) startTagPrefix('// ') endTagPrefix('// ')]
          /**
           * Constructeur.
           */
          public [viewContainer.namePresenter()/] ()
          {
             super(null);
          }
       
          /**
           * Constructeur avec présenteur parent.
           * 
           * @param p_parent
           *           le présenteur parent
           */
          public [viewContainer.namePresenter()/] (final Presenter_Abs<? extends View_Itf, ?> p_parent)
          {
             super(p_parent);
          }
       [if (viewContainer.getTypePresenter() <> 'Object')]
         
            /**
             * Constructeur avec présenteur parent et DTO (dans le cas d'une interface en GWT, les présenteurs et vues manipulent uniquement des XTO).
             * @param p_parent
             *           le présenteur parent
             * @param p_dto
             *           le dto de ce présenteur
             */
            public [viewContainer.namePresenter()/] (final Presenter_Abs<? extends View_Itf, ?> p_parent, final [viewContainer.getTypePresenter()/] p_obj)
            {
               super(p_parent, p_obj);
            }
       [/if]
     [/protected]
  
  
     @Override
     public void initView ()
     {
        // Initialisation de la vue
        [protected (viewContainer.getUserCodeId('Initialisation de la vue')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
     }
  
     @Override
     protected String doGenerateTitle ()
     {
        // Titre de l\'écran
        [protected (viewContainer.getUserCodeId('Titre de l\'écran')) startTagPrefix('// ') endTagPrefix('// ')]
                return "[viewContainer.name/]";
        [/protected]
  
     }
  
  [for (viewState : flow::ViewState | viewContainer.getViewStatesForViewContainer())]
    [for (transition : flow::Transition | viewState.getTransitionsFromState(true).orderTransitions())]
      [for (event : cinematic::Event | transition.on)]
        [if (event.name = null)]
             // FIXME : Un événement ne porte pas de nom ! Attention à nommer tous les événements des transitions issues de l'état [viewState.name/]
        [else]
             /**
              * Gestion de l'événement [event.name/].
              */
          [if (event.getViewEvents()->exists(viewEvent | 'onClick'.equalsIgnoreCase(viewEvent.type.name)))]
               @UserAction(UserAction.c_BOUTON + "[event.name/]")
          [else]
               [protected (event.getUserCodeId('Annotation ' + event.name)) startTagPrefix('// ') endTagPrefix('// ')]
                 
               [/protected]
            
          [/if]
             public void [event.nameActionPresenteur()/]()
             {
                [protected (event.getUserCodeId('Pre ' + event.name)) startTagPrefix('// ') endTagPrefix('// ')]
                  [if (viewContainer.shouldClosePresenter(transition))]
                          close();
                  [/if]
                  
                  [if (not transition.to.getAllFollowingStatesWithoutGardOrEvent(false)->union(Sequence{transition.to})->filter(flow::ViewState)->collect(temp1 | temp1.viewContainers)->isEmpty())]
                          final [viewContainer.getRootPresenterName()/] ['rootPresenter'.apply_variableDefault()/] = getViewManager().getPresenter([viewContainer.getRootPresenterName()/].class);
                    
                  [/if]
                [/protected]
          
          
          [if (not (transition.to = null))]
            [transition.to.gestionTransition(event.name, false)/]
          [/if]
                [protected (event.getUserCodeId('Post ' + event.name)) startTagPrefix('// ') endTagPrefix('// ')]
                  
                [/protected]
          
             }
        [/if]
        
      [/for]
    [/for]
  [/for]
     // [viewContainer.namePresenter()/]
     [protected (viewContainer.getUserCodeId(viewContainer.namePresenter())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(v : view::ViewContainer) post(self.trim())]
  [v.initImports()/]
  [v.addImport('fr.spi4j.ui.graal.UserAction')/]
  [v.addImport('fr.spi4j.ui.mvp.Presenter_Abs')/]
  [v.addImport('fr.spi4j.ui.mvp.ViewAlreadyRegisteredException')/]
  [v.addImport('fr.spi4j.ui.mvp.View_Itf')/]
  [v.addImport(v.getRootPresenter().namePackageViewContainerPresenter() + '.' + v.getRootPresenter().namePresenter())/]
  
  [if (v.getTypePresenter() <> 'Object')]
    [if (v.useMatching())][v.addImport(v.searchBindingFor().oclAsType(environment::DTO).namePackageXto() + '.' + v.getTypePresenter())/][/if]
    
  [/if]
  
  [for (viewState : flow::ViewState | v.getViewStatesForViewContainer())]
    [for (transition : flow::Transition | viewState.getTransitionsFromState(true).orderTransitions())]
      [for (event : cinematic::Event | transition.on)]
        [if (not (event.name = null) and not (transition.to = null))]
          [for (state : flow::FlowState | transition.to.getAllFollowingStatesWithoutGardOrEvent(true)->union(Sequence{transition.to}))]
            [if (state.oclIsKindOf(flow::ViewState))]
              [for (nextView : view::ViewContainer | state.oclAsType(flow::ViewState).viewContainers)]
                				[v.addImport(nextView.namePackageViewContainerPresenter() + '.' + nextView.namePresenter())/]
              [/for]
            [elseif (state.oclIsKindOf(flow::SubflowState))]
              				[v.addImport(state.oclAsType(flow::SubflowState).subflow.namePackageFlowManager() + '.' + state.oclAsType(flow::SubflowState).subflow.nameFlow())/]
            [/if]
          [/for]
        [/if]
      [/for]
    [/for]
  [/for]
  
  [v.flushImports()/][/template]

[query private getTypePresenter(viewContainer : view::ViewContainer) : String = if viewContainer.searchBindingFor() = null then 'Object' else if viewContainer.searchBindingFor().oclIsKindOf(environment::DTO) then viewContainer.searchBindingFor().oclAsType(environment::DTO).buildXtoClassNameFromDto() else if viewContainer.searchBindingForEntity() = null then 'Object' else viewContainer.buildXtoClassNameForEntity() endif endif endif/]

[query private orderTransitions(transitions : OrderedSet(flow::Transition)) : OrderedSet(flow::Transition) = transitions->sortedBy(t | t.transitionComparator())/]

[query private transitionComparator(transition : flow::Transition) : String = if not transition.on->isEmpty() then '' + transition.on->asSequence()->collect(temp2 | temp2.name) else if transition.to = null then '' else if transition.to.oclIsKindOf(flow::NamedFlowState) then transition.to.oclAsType(flow::NamedFlowState).name else if transition.to.oclIsKindOf(flow::SubflowState) then transition.to.oclAsType(flow::SubflowState).name else transition.to.toString() endif endif endif endif/]

[query private shouldClosePresenter(viewContainer : view::ViewContainer, transition : flow::Transition) : Boolean = (viewContainer.widget = null or viewContainer.widget.name <> 'MainPanel') and not transition.to.getAllFollowingStatesWithoutGardOrEvent(true)->union(Sequence{transition.to})->filter(flow::ViewState)->isEmpty() and not transition.to.getAllFollowingStatesWithoutGardOrEvent(true)->union(Sequence{transition.to})->filter(flow::ViewState)->collect(temp3 | temp3.viewContainers)->includes(viewContainer)/]