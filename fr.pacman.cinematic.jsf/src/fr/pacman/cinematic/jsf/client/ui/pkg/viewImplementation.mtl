[module viewImplementation('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::api::common::standard_widgets/]
[import fr::pacman::cinematic::jsf::common::packages/]
[import fr::pacman::cinematic::jsf::common::name/]
[import fr::pacman::cinematic::jsf::common::common/]
[import fr::pacman::cinematic::jsf::requests::requests/]
[import fr::pacman::cinematic::jsf::services::cinematicServices/]

[comment encoding = UTF-8 /]
[template public viewImplementation(viewContainer : view::ViewContainer, aViewState : flow::ViewState)]
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:p="http://primefaces.org/ui">
  <!-- 
  [protected ('Xhtml use code')]
     -->
    <h:body>	
    <ui:composition template="/WEB-INF/templates/layout.xhtml">
    	<ui:define name="title">				
    			[viewContainer.getLabel()/]				
    	</ui:define>
    	<ui:define name="welcome">
    	    <p:link value="Accueil" outcome="/pages/index"/>
    	</ui:define>
    	<ui:define name="content">	
    		<h:form id="[viewContainer.genNameWebForm()/]">
    [if (not aViewState.viewContainers->isEmpty())]
      			<h:panelGrid columns="2">
      [for (aVC : view::ViewContainer | aViewState.viewContainers)]
        [for (anAVE : view::AbstractViewElement | aVC.ownedElements)]
          [if (not anAVE.isButton())]
            					[anAVE.genJsfWidget(aViewState, viewContainer)/]																		
          [/if]
        [/for]
      [/for]
      			</h:panelGrid>
    [/if]
    			<br>
    [if (viewContainer.getNbButtons() > 0)]
      			<h:panelGrid columns="[viewContainer.getNbButtons()/]">
      			<div>	
      [for (aVC : view::ViewContainer | aViewState.viewContainers)]
        [for (anAVE : view::AbstractViewElement | aVC.ownedElements)]
          [if (anAVE.isButton())]
            [for (transition : flow::Transition | aViewState.getTransitionsFromState(true)->orderTransitions())]
              [if (not transition.on->isEmpty())]
                [for (flowEvent : flow::FlowEvent | transition.on->select(var0 | var0.oclIsTypeOf(flow::FlowEvent)))]
                  [if (not flowEvent.binds->isEmpty())]
                    [for (eventElement : view::ViewEvent | anAVE.events)]
                      [for (viewEvent : view::ViewEvent | flowEvent.binds)]
                        [if (eventElement.name = viewEvent.name)]
                          					[anAVE.genJsfButtonEvent(viewContainer)/]		
                        [/if]
                      [/for]
                    [/for]
                  [/if]
                [/for]
                [for (ev : cinematic::Event | transition.on->select(var1 | var1.oclIsTypeOf(view::ViewEvent)))]
                  [for (eventElement : view::ViewEvent | anAVE.events)]
                    [if (eventElement.name = ev.name)]
                      					[anAVE.genJsfButtonEvent(viewContainer)/]		
                    [/if]
                  [/for]
                [/for]
              [/if]
            [/for]
          [/if]
        [/for]
      [/for]
      			</div>
      			</h:panelGrid>
    [/if]
    		</h:form>
    	</ui:define>
    </ui:composition>
    </h:body>
    <!-- 
  [/protected]
   
  -->
  </html>
[/template]

[query private nameVariableElement(element : view::ViewElement) : String = element.name/]

[template private genJsfWidget(anAVE : view::AbstractViewElement, aViewState : flow::ViewState, viewContainer : view::ViewContainer) post(self.trim())]
  [if (anAVE.isPage())]
    [anAVE.genJsfPanel(aViewState, viewContainer)/]
  [elseif (anAVE.isPanel())]
    [anAVE.genJsfPanel(aViewState, viewContainer)/]
  [elseif (anAVE.isTable())]
    [anAVE.genJsfTable(aViewState, viewContainer)/]
  [elseif (anAVE.isText())]
    [anAVE.genJsfText(viewContainer)/]
  [elseif (anAVE.isTextarea())]
    [anAVE.genJsfTextarea()/]
  [elseif (anAVE.isCombo())]
    [anAVE.genJsfCombo(viewContainer)/]
  [elseif (anAVE.isLabel())]
    [anAVE.genJsfLabel()/]
  [elseif (anAVE.isImage())]
    [anAVE.genJsfImage()/]
  [elseif (anAVE.isLink())]
    [anAVE.genJsfLink(aViewState)/]
  [elseif (anAVE.isPassword())]
    [anAVE.genJsfPassword(viewContainer)/]
  [elseif (anAVE.isRadio())]
    [anAVE.genJsfRadio(viewContainer)/]
  [elseif (anAVE.isCheckbox())]
    [anAVE.genJsfCheckbox(viewContainer)/]
  [elseif (anAVE.isDateField())]
    [anAVE.genJsfCalendar(viewContainer)/]
  [elseif (not anAVE.isButton())]
    <!-- TODO widget [anAVE.widget.qualifiedName()/] non gere -->
  [/if]
  [if (anAVE.eContainer(view::ViewContainer).isTopLevelViewContainer() and not anAVE.isPanel())]
  [/if]
[/template]

[template private genEventsDropdown(anAVE : view::AbstractViewElement, aViewState : flow::ViewState)]
  [if (not anAVE.events->isEmpty())]
    <span>
      <p:link outcome="#menu[anAVE.getID()/]" />
      <ul>    
       <p:link outcome="#" value="Click to simulate an event"/>    
    [for (event : view::ViewEvent | anAVE.events)]
          <li><p:link outcome="[event.genLink(aViewState)/]" value="[event.name/]" /></li>
    [/for]
      </ul>
    </span>
  [/if]
[/template]

[template private genJsfPanel(anAVE : view::AbstractViewElement, aViewState : flow::ViewState, viewContainer : view::ViewContainer) post(self.trim())]
  <h:panelGrid>
  [for (element : view::AbstractViewElement | anAVE.oclAsType(view::ViewContainer).ownedElements)]
    		[element.genJsfWidget(aViewState, viewContainer)/]		
  [/for]
  </h:panelGrid>[/template]

[template private genJsfTable(anAVE : view::AbstractViewElement, aViewState : flow::ViewState, viewContainer : view::ViewContainer) post(self.trim())]
  </h:panelGrid>
  <br>
  [if (anAVE.oclIsTypeOf(view::ViewContainer))]
    <p:dataTable border="1" id="table[anAVE.name.toUpperFirst()/]" paginator="true" sortMode="multiple" selectionMode="single" lazy="true">
    [for (element : view::AbstractViewElement | anAVE.oclAsType(view::ViewContainer).ownedElements)]
      		<p:column headerText="[aViewState.name/]">
      			<h:outputText value="[element.genJsfWidget(aViewState, viewContainer)/]" />			
      		</p:column>		
    [/for]
    </p:dataTable>	
    <h:panelGrid columns="3">
  [else]
    <p:dataTable border="1" id="table[anAVE.name.toUpperFirst()/]" paginator="true" sortMode="multiple" selectionMode="single" title="[anAVE.getLabel()/]" lazy="true">
    	<p:column>
    		<f:facet name="header">
    			<h:outputText value="Column 1" />
    		</f:facet>
    		<h:outputText value="Lorem ipsum" />
    	</p:column>
    	<p:column>
    		<f:facet name="header">
    			<h:outputText value="Column 2" />
    		</f:facet>
    		<h:outputText value="Lorem ipsum" />
    	</p:column>
    	<p:column>
    		<f:facet name="header">
    			<h:outputText value="Column 3" />
    		</f:facet>
    		<h:outputText value="Lorem ipsum" />
    	</p:column>
    	<p:column>
    		<f:facet name="header">
    			<h:outputText value="Column 4" />
    		</f:facet>
    		<h:outputText value="Lorem ipsum" />
    	</p:column>	
    </p:dataTable>
    <h:panelGrid>
  [/if]
[/template]

[template private genJsfText(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:inputText id="txt[anAVE.name.toUpperFirst()/]"  value="#{[viewContainer.nameBeanFirstLower()/].[anAVE.name.toLowerFirst()/]}"/>[/template]

[template public genJsfTextarea(anAVE : view::AbstractViewElement) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:inputTextArea  value="[anAVE.name/]" rows="3"></textarea>[/template]

[template private genJsfCombo(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:selectOneMenu id="selectMenu[anAVE.name.toUpperFirst()/]" name="[anAVE.name/]" [if (not anAVE.events->isEmpty())] valueChangeListener="[anAVE.genElementEvent(viewContainer)/]" [/if]>
  </p:selectOneMenu> 			    [/template]

[template private genJsfLabel(anAVE : view::AbstractViewElement) post(self.trim())]
  <p:outputLabel  id="label[anAVE.name.toUpperFirst()/]"  value="[anAVE.getLabel()/]" />[/template]

[template private genJsfRadio(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:selectOneRadio id="radio[anAVE.name.toUpperFirst()/]" value="#{[viewContainer.nameBeanFirstLower()/].[anAVE.name.toLowerFirst()/]}">
  </p:selectOneRadio>[/template]

[template private genJsfCheckbox(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:selectBooleanCheckbox id="chBox[anAVE.name.toUpperFirst()/]" value="#{[viewContainer.nameBeanFirstLower()/].[anAVE.name.toLowerFirst()/]}" valueChangeListener="[viewContainer.nameBeanFirstLower()/].valueChangeChBox[anAVE.name.toUpperFirst()/]">
  </p:selectBooleanCheckbox>[/template]

[template private genJsfImage(anAVE : view::AbstractViewElement) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:graphicImage library="/resources/img/" name="[anAVE.name/]"/>[/template]

[template private genJsfLink(anAVE : view::AbstractViewElement, aViewState : flow::ViewState) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:link outcome="[anAVE.genLink(aViewState)/]" value="[anAVE.getLabel()/]"/>[/template]

[template private genJsfPassword(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:password id="pwd[anAVE.name.toUpperFirst()/]" value="#{[viewContainer.nameBeanFirstLower()/].[anAVE.name.toLowerFirst()/]}"/>[/template]

[template private genJsfButtonFlowEvent(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  <p:commandButton value="[anAVE.getLabel()/]" id="cmdBt[anAVE.name/]" actionListener="[anAVE.genElementEvent(viewContainer)/]"/>&nbsp;[/template]

[template private genJsfButtonEvent(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  <p:commandButton value="[anAVE.getLabel()/]" id="cmdBt[anAVE.name/]" actionListener="[anAVE.genElementEvent(viewContainer)/]"/>&nbsp;[/template]

[template private genJsfCalendar(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [anAVE.genJsfLabel()/]
  <p:calendar id="date[anAVE.name.toUpperFirst()/]" value="#{[viewContainer.nameBeanFirstLower()/].[anAVE.name.toLowerFirst()/]}" locale="fr" />[/template]

[template private genEventOnClick(aViewEvent : view::ViewEvent, aViewState : flow::ViewState) post(self.trim())]
  onclick="self.location.href='[aViewEvent.genLink(aViewState)/]'"[/template]

[template private genLink(anAVE : view::AbstractViewElement, aViewState : flow::ViewState) post(self.trim())]
  [anAVE.events->select(temp1 | not (temp1 = null))->first().genLink(aViewState)/][/template]

[template private genLink(aViewEvent : view::ViewEvent, aViewState : flow::ViewState) post(self.trim())]
  [if (aViewEvent.getFlowEvent() = null)]
    [let nexts : OrderedSet(flow::FlowState) = aViewState.getNextStates(aViewEvent)]
      [if (nexts->isEmpty())]
        javascript:alert('No transition found on this event.\nPlease check your model.');
      [elseif (nexts->size() = 1)]
        [aViewState.getRootContainerPath()/][nexts->asOrderedSet()->first().genFullQualifiedFileName()/]
      [else]
        [aViewState.getRootContainerPath()/][aViewState.genFullQualifiedFileName(aViewEvent)/]
      [/if]
    [/let]
  [else]
    [let f : flow::FlowEvent = aViewEvent.getFlowEvent()]
      [let nexts : OrderedSet(flow::FlowState) = aViewState.getNextStates(f)]
        [if (nexts->isEmpty())]
          javascript:alert('No transition found on this event.\nPlease check your model.');
        [elseif (nexts->size() = 1)]
          [aViewState.getRootContainerPath()/][nexts->asOrderedSet()->first().genFullQualifiedFileName()/]
        [else]
          [aViewState.getRootContainerPath()/][aViewState.genFullQualifiedFileName(f)/]
        [/if]
      [/let]
    [/let]
  [/if]
[/template]

[template private genEvents(anAVE : view::AbstractViewElement, aViewState : flow::ViewState) post(self.trim())]
  [anAVE.events->select(temp2 | not (temp2 = null))->asSequence()->collect(temp3 | temp3.genEvent(aViewState))->sep(' ')/][/template]

[template private genEvent(aViewEvent : view::ViewEvent, aViewState : flow::ViewState) post(self.trim())]
  [aViewEvent.genEventOnClick(aViewState)/][/template]

[template private genEventOld(aViewEvent : view::ViewEvent, aViewState : flow::ViewState) post(self.trim())]
  [if (not (aViewEvent.type = null))]
    [if (aViewEvent.type.qualifiedName().getProperty() = 'jsf.event.onClick')]
      [aViewEvent.genEventOnClick(aViewState)/]
    [/if]
  [/if]
[/template]

[template private genNameWebForm(viewContainer : view::ViewContainer) post(self.trim())]
  		form[viewContainer.nameViewImplementation().sanitize()/][/template]

[template private genElementEvent(anAVE : view::AbstractViewElement, viewContainer : view::ViewContainer) post(self.trim())]
  [for (eventElement : view::ViewEvent | anAVE.events)]
    [if (not eventElement.getFlowEventsForViewEvent()->isEmpty())]
      [for (flowEvent : flow::FlowEvent | eventElement.getFlowEventsForViewEvent())]
        			#{[viewContainer.nameBeanFirstLower()/].[flowEvent.nameActionBean()/]}
      [/for]
    [else]
      			#{[viewContainer.nameBeanFirstLower()/].[eventElement.nameActionBean()/]}
    [/if]
  [/for]
[/template]

[query private paramViewElementInConstructor(element : view::ViewElement) : String = if not (element.widget = null) and element.widget.name = 'Table' then '"' + element.name + '"' else '' endif/]

[query private getElementType(element : view::ViewElement) : String = if not (element = null) and not (element.type = null) then if element.type.oclIsKindOf(environment::DTO) then element.type.oclAsType(environment::DTO).buildXtoClassNameFromDto() else element.type.name endif else '[ERREUR : Type inconnu pour ce widget]' endif/]

[query private genJsfButton(anAVE : view::AbstractViewElement, flowEvent : flow::FlowEvent, viewContainer : view::ViewContainer) : String = '<p:commandButton value="' + anAVE.getLabel() + '" id="cmdBt' + anAVE.name + '" actionListener="#{' + viewContainer.nameBeanFirstLower() + '.' + flowEvent.name.sanitize().toLowerFirst() + '}"/>'/]

[query private getFlowEvent(aViewEvent : view::ViewEvent) : flow::FlowEvent = let s : Sequence(flow::FlowEvent) = aViewEvent.ancestors(cinematic::CinematicRoot)->first().eAllContents(flow::FlowEvent)->select(temp4 | temp4.binds->select(v | v = aViewEvent)->notEmpty()) in if s->notEmpty() then s->first() else null endif/]

[query private getTransition(aViewEvent : view::ViewEvent, aEvent : cinematic::Event, aViewState : flow::ViewState) : flow::Transition = aViewEvent.ancestors(cinematic::CinematicRoot)->first().eAllContents(flow::Transition)->select(temp5 | temp5.on->select(e | e = aEvent)->notEmpty() and temp5.from = aViewState)->first()/]

[query private orderTransitions(transitions : OrderedSet(flow::Transition)) : OrderedSet(flow::Transition) = transitions->sortedBy(t | t.transitionComparator())/]

[query private transitionComparator(transition : flow::Transition) : String = if not transition.on->isEmpty() then '' + transition.on->asSequence()->collect(temp6 | temp6.name) else if transition.to = null then '' else if transition.to.oclIsKindOf(flow::NamedFlowState) then transition.to.oclAsType(flow::NamedFlowState).name else if transition.to.oclIsKindOf(flow::SubflowState) then transition.to.oclAsType(flow::SubflowState).name else transition.to.toString() endif endif endif endif/]
