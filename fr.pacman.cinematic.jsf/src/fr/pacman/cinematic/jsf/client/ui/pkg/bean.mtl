[module bean('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::cinematic::api::common::name/]
[import fr::pacman::cinematic::api::common::standard_widgets/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::jsf::common::name/]
[import fr::pacman::cinematic::jsf::common::packages/]
[import fr::pacman::cinematic::jsf::common::jsf_commons/]

[comment encoding = UTF-8 /]
[template public bean(viewContainer : view::ViewContainer, aViewState : flow::ViewState)]
  [viewContainer.licence()/]
  package [viewContainer.namePackageContainerBean()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [viewContainer.writeImports()/]
    
  [/protected]
  
  
  /**
   * Bean [viewContainer.nameBeanFirstLower()/]
   * @author [viewContainer.getAuthorName()/]
   */
  ['Annotation'.displayClearUserCodeId()/]
  [protected (viewContainer.getUserCodeId('Annotation')) startTagPrefix('// ') endTagPrefix('// ')]
    @SuppressWarnings("serial")
    @ManagedBean(name="[viewContainer.nameBeanFirstLower()/]")
    @ViewScoped
  [/protected]
  
  public class [viewContainer.nameBean()/] extends [viewContainer.buildJsfBeanAbstractName()/] implements Serializable
  {
  
      /** Log applicatifs */
      private static final Logger LOG = LoggerManager.getLogger([viewContainer.nameBean()/].class);
  
  [if (viewContainer.useMatching())]
    [if (viewContainer.searchBindingFor().oclIsKindOf(environment::DTO))]
          /**    [viewContainer.getTypeBean()/]    */
          private [viewContainer.getTypeBean()/] [viewContainer.nameFieldFirstLower()/];	
    [/if]
  [else]
    [if (viewContainer.searchBindingFor().oclIsKindOf(environment::DTO))]
          /**    [viewContainer.buildEntityNameFromDto()/]    */
          private [viewContainer.buildEntityNameFromDto()/] [viewContainer.nameFieldFirstLower()/];	
    [else]
      [if (not (viewContainer.getTypeBeanEntity() = 'Undefined'))]
        	private [viewContainer.getTypeBeanEntity()/] [viewContainer.nameFieldFirstLower()/];
      [/if]
    [/if]
  [/if]
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [if (element.widget.name = 'Table' or element.widget.name = 'ComboBox')]
      [if (element.type.oclIsKindOf(environment::DTO) or element.type.name <> null or element.searchBindingFor().oclIsKindOf(environment::DTO))]
        
            /** [element.nameFieldFirstLower()/]   */
        	[element.genericTypeListJsf()/]
      [/if]
    [elseif (not (element.widget.name = 'Button'))]
      			
      	/**	Attribut [element.name/] */
      	private [element.genericTypeJsf(element.widget.getInterfaceName().transformList(), true)/] [element.nameVariableElement()/];
    [/if]
  [/for]
  	
     ['Attributs'.displayClearUserCodeId()/]
     [protected (viewContainer.getUserCodeId('Attributs')) startTagPrefix('// ') endTagPrefix('// ')]
           
     [/protected]
  
  
  	/**
  	 * Méthode d'initialisation du Managed Bean JSF.
  	 * 	 
  	 */
  	@PostConstruct
  	public void init() {
  		['init'.displayClearUserCodeId()/]
  		[protected (viewContainer.getUserCodeId('init')) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  
  	}
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [if (element.widget.name = 'Table' or element.widget.name = 'ComboBox')]
      [if (element.type.oclIsKindOf(environment::DTO) or element.type.name <> null or element.searchBindingFor().oclIsKindOf(environment::DTO))]
        	/**
            * return [element.nameVariableElement()/].
            */
           public ArrayList<[element.getTypeListJsf()/]> [element.nameGetterBeanElement()/] ()
           {
              return [element.nameVariableElement()/];
           }
        	
        	/**
            * set this.[element.nameVariableElement()/].
            */
        	public void [element.nameSetterBeanElement()/] (final ArrayList<[element.getTypeListJsf()/]> [element.nameVariableElement().toLower()/])
           {
              this.[element.nameVariableElement()/] = [element.nameVariableElement().toLower()/] ;
           }	
      [/if]
    [elseif (not (element.widget.name = 'Button'))]
         
      	/**
          * return [element.nameVariableElement()/].
          */
         public [element.genericTypeJsf(element.widget.getInterfaceName().transformList(), true)/] [element.nameGetterBeanElement()/] ()
         {
            return [element.nameVariableElement()/];
         }
      	
      	/**
          * set this.[element.nameVariableElement()/].
          */
      	public void [element.nameSetterBeanElement()/] (final [element.genericTypeJsf(element.widget.getInterfaceName().transformList(), true)/] [element.nameVariableElement().toLower()/])
         {
            this.[element.nameVariableElement()/] = [element.nameVariableElement().toLower()/] ;
         }	 
    [/if]
  [/for]
  
  [for (element : view::ViewElement | viewContainer.viewElements)]
    [if (element.widget.name = 'CheckBox')]
       /**
          * Gestion de l'événement Listener [element.name/].
      	*	
          */      
      						
          public void valueChangeChBox[element.name.toUpperFirst()/](ValueChangeEvent e){
      		[('Value Change Event' + '\'' + element.name + '\'').displayClearUserCodeId()/]
      		[protected (element.getUserCodeId('Value Change Event' + '[element.name/]')) startTagPrefix('// ') endTagPrefix('// ')]
          		
        [/protected]
      
      	} 	
    [/if]
  [/for]
  [for (aVC : view::ViewContainer | aViewState.viewContainers)]
    [for (anAVE : view::AbstractViewElement | aVC.ownedElements)]
      [for (eventElement : view::ViewEvent | anAVE.events)]
        [if (not eventElement.getFlowEventsForViewEvent()->isEmpty())]
          [for (flowEvent : flow::FlowEvent | eventElement.getFlowEventsForViewEvent())]
            [if (eventElement.name = null)]
                 	// FIXME : Un événement ne porte pas de nom ! Attention à nommer tous les événements des transitions issues de l'état [aViewState.name/]
            [else]
                 /**
                  * Gestion de l'événement [flowEvent.name/].
              	*	
                  */      
              [if ('onChange'.equalsIgnoreCase(eventElement.type.name))]
                    public void [flowEvent.nameActionBean()/](ValueChangeEvent e){
                		['Value Change Event'.displayClearUserCodeId()/]
                		[protected (viewContainer.getUserCodeId('Value Change Event With Param')) startTagPrefix('// ') endTagPrefix('// ')]
                    		
                  [/protected]
                
                	} 	
              [else]
                    public String [flowEvent.nameActionBean()/]()
                    {		
                		 // URL de redirection;		
                		String urlRedirect = "";
                      [eventElement.nameActionBean().displayClearUserCodeId()/]
                      [protected (eventElement.getUserCodeId(eventElement.nameActionBean() + 'flow')) startTagPrefix('// ') endTagPrefix('// ')]
                        		
                      [/protected]
                	   
                	 	return urlRedirect;		
                    }	
              [/if]
            [/if]
          [/for]
        [else]
          [if ('onChange'.equalsIgnoreCase(eventElement.type.name))]
                public void [eventElement.nameActionBean()/](ValueChangeEvent e){
            		['Value Change Event'.displayClearUserCodeId()/]
            		[protected (viewContainer.getUserCodeId('Value Change Event')) startTagPrefix('// ') endTagPrefix('// ')]
                		
              [/protected]
            
            	} 	
          [else]
                public String [eventElement.nameActionBean()/]()
                {
            	    // URL de redirection;		
            		String urlRedirect = "";
                  [eventElement.nameActionBean().displayClearUserCodeId()/]
                  [protected (eventElement.getUserCodeId(eventElement.nameActionBean())) startTagPrefix('// ') endTagPrefix('// ')]
                    		
                  [/protected]
            	   
            	 	return urlRedirect;			
                }	
          [/if]
        [/if]
      [/for]
    [/for]
  [/for]
  
  [if (viewContainer.useMatching())]
    [if (viewContainer.searchBindingFor().oclIsKindOf(environment::DTO))]
      	/**    
      	* return [viewContainer.getTypeBean()/]    
      	*/
      	public [viewContainer.getTypeBean()/] get[viewContainer.nameFieldFirstLower().toUpperFirst()/]()
      	{
      		return [viewContainer.nameFieldFirstLower()/];
      	}
      
      	/**    
      	* Set [viewContainer.getTypeBean()/]    
      	*/
      	public void set[viewContainer.nameFieldFirstLower().toUpperFirst()/](final  [viewContainer.getTypeBean()/]  [viewContainer.getTypeBean().toLowerFirst()/])
      	{
      		[viewContainer.nameFieldFirstLower()/] = [viewContainer.getTypeBean().toLowerFirst()/];
      	}
    [/if]
  [else]
    [if (viewContainer.searchBindingFor().oclIsKindOf(environment::DTO))]
      	/**    
      	* return [viewContainer.buildEntityNameFromDto()/]    
      	*/
      	public [viewContainer.buildEntityNameFromDto()/] get[viewContainer.nameFieldFirstLower().toUpperFirst()/]()
      	{
      		return [viewContainer.nameFieldFirstLower()/];
      	}
      
      	/**    
      	* Set [viewContainer.buildEntityNameFromDto()/]    
      	*/
      	public void set[viewContainer.nameFieldFirstLower().toUpperFirst()/](final  [viewContainer.buildEntityNameFromDto()/]  [viewContainer.buildEntityNameFromDto().toLowerFirst()/])
      	{
      		[viewContainer.nameFieldFirstLower()/] = [viewContainer.buildEntityNameFromDto().toLowerFirst()/];
      	}	
    [else]
      [if (not (viewContainer.getTypeBeanEntity() = 'Undefined'))]
        [let typeBeanEntity : String = viewContainer.getTypeBeanEntity()]
          	/**    
          	* return [typeBeanEntity/]    
          	*/
          	public [typeBeanEntity/] get[viewContainer.nameFieldFirstLower().toUpperFirst()/]()
          	{
          		return [viewContainer.nameFieldFirstLower()/];
          	}
          
          	/**    
          	* Set [typeBeanEntity/]    
          	*/
          	public void set[viewContainer.nameFieldFirstLower().toUpperFirst()/](final  [typeBeanEntity/]  [typeBeanEntity.toLowerFirst()/])
          	{
          		[viewContainer.nameFieldFirstLower()/] = [typeBeanEntity.toLowerFirst()/];
          	}
        [/let]
      [/if]
    [/if]
  [/if]
  	
  	/**
      * Méthodes utilisateurs
  	*	
      */ 
     ['Methode'.displayClearUserCodeId()/]
     [protected (viewContainer.getUserCodeId('Methode')) startTagPrefix('// ') endTagPrefix('// ')]
           
     [/protected]
  
  }	[/template]

[comment : Write all required imports. /]
[template private writeImports(v : view::ViewContainer) post(self.trim())]
  [v.initImports()/]
  [v.addImport('java.io.Serializable')/]
  [v.addImport('java.util.List')/]
  [v.addImport('java.util.ArrayList')/]
  [v.addImport('java.util.Date')/]
  [v.addImport('jakarta.annotation.PostConstruct')/]
  [v.addImport('jakarta.faces.bean.ManagedBean')/]
  [v.addImport('jakarta.faces.bean.ViewScoped')/]
  [v.addImport('jakarta.faces.event.ActionEvent')/]
  [v.addImport('jakarta.faces.event.ValueChangeEvent')/]
  [v.addImport('org.apache.logging.log4j.Logger')/]
  [v.addImport('org.apache.logging.log4j.LogManager')/]
  [v.addImport(v.importAbstractBean())/]
  
  [if (v.useMatching())]
    [if (v.getTypeBean() <> 'Object')]
      	[v.addImport(v.searchBindingFor().oclAsType(environment::DTO).namePackageDtoJsf() + '.' + v.getTypeBean())/]
    [/if]
  [else]
    [if (not (v.getTypeBeanEntity() = 'Undefined'))]
      	[v.addImport(v.searchBindingForEntity().namePackageEntityJsf() + '.' + v.getTypeBeanEntity())/]
    [/if]
  [/if]
  
  [v.flushImports()/][/template]

[query private orderTransitions(transitions : OrderedSet(flow::Transition)) : OrderedSet(flow::Transition) = transitions->sortedBy(t | t.transitionComparator())/]

[query private transitionComparator(transition : flow::Transition) : String = if not transition.on->isEmpty() then '' + transition.on->asSequence()->collect(temp1 | temp1.name) else if transition.to = null then '' else if transition.to.oclIsKindOf(flow::NamedFlowState) then transition.to.oclAsType(flow::NamedFlowState).name else if transition.to.oclIsKindOf(flow::SubflowState) then transition.to.oclAsType(flow::SubflowState).name else transition.to.toString() endif endif endif endif/]

[query private getTypeBean(viewContainer : view::ViewContainer) : String = if viewContainer.searchBindingFor() = null then 'Object' else if viewContainer.searchBindingFor().oclIsKindOf(environment::DTO) then viewContainer.searchBindingFor().oclAsType(environment::DTO).buildDtoClassName() else 'Object' endif endif/]

[query private buildEntityNameFromDto(viewContainer : view::ViewContainer) : String = if viewContainer.searchBindingFor() = null then 'Object' else if viewContainer.searchBindingFor().oclIsKindOf(environment::DTO) then viewContainer.searchBindingFor().oclAsType(environment::DTO).buildDtoClassName() else 'Object' endif endif/]

[query private nameVariableElement(element : view::ViewElement) : String = element.name.toLowerFirst()/]

[query public genericTypeJsf(viewElement : view::ViewElement, implementation : String, IsDto : Boolean) : String = if implementation.endsWith('<T>') then if viewElement.type = null then 'ERROR : [Cet élément n\'a pas défini de DTO ou String en tant que type]' else if viewElement.type.oclIsKindOf(environment::DTO) then if IsDto then implementation.replace('<T>', '<' + viewElement.type.oclAsType(environment::DTO).buildDtoClassName() + '>') else implementation.replace('<T>', '<' + viewElement.type.oclAsType(environment::DTO).buildXtoClassNameFromDto() + '>') endif else if viewElement.type.oclIsKindOf(environment::PrimitiveType) then implementation.replace('<T>', '<' + viewElement.type.oclAsType(environment::PrimitiveType).name + '>') else implementation.replace('<T>', '<TODO>') endif endif endif else implementation.typeJava() endif/]

[query private typeJava(s : String) : String = if s.equalsIgnoreCase('HasBoolean_Itf') then 'Boolean' else if s.equalsIgnoreCase('HasDate_Itf') then 'Date' else if s.equalsIgnoreCase('HasDouble_Itf') then 'Double' else if s.equalsIgnoreCase('HasInteger_Itf') then 'Integer' else if s.equalsIgnoreCase('HasList_Itf<T>') then 'List' else if s.equalsIgnoreCase('HasLong_Itf') then 'Long' else if s.equalsIgnoreCase('HasSelection_Itf<T>') then 'List<T>' else if s.equalsIgnoreCase('HasString_Itf') then 'String' else 'String' endif endif endif endif endif endif endif endif/]

[query public genericTypeListJsf(viewElement : view::ViewElement) : String = if not (viewElement.getTypeBeanEntity() = null) then 'private ArrayList<' + viewElement.getTypeBeanEntity() + '> ' + viewElement.nameFieldFirstLower() + ';' else if viewElement.type.oclIsKindOf(environment::DTO) then if viewElement.useMatching() then 'private ArrayList<' + viewElement.type.oclAsType(environment::DTO).buildDtoClassName() + '> ' + viewElement.nameFieldFirstLower() + ';' else 'private ArrayList<' + viewElement.type.oclAsType(environment::DTO).buildDtoClassName() + '>  ' + viewElement.nameFieldFirstLower() + ';' endif else 'private ArrayList<' + viewElement.type.name + '>  ' + viewElement.nameFieldFirstLower() + ';' endif endif/]

[query public getTypeListJsf(viewElement : view::ViewElement) : String = if not (viewElement.getTypeBeanEntity() = null) then viewElement.getTypeBeanEntity() else if viewElement.type.oclIsKindOf(environment::DTO) then if viewElement.useMatching() then viewElement.type.oclAsType(environment::DTO).buildDtoClassName() else viewElement.type.oclAsType(environment::DTO).buildDtoClassName() endif else viewElement.type.name endif endif/]
