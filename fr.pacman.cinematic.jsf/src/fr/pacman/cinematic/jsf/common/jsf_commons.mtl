[module jsf_commons('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0')/]

[comment encoding = UTF-8 /]
[query public getRootBean(any : ecore::EObject) : view::ViewContainer = if any.hasRootBean() then any.eContainer(cinematic::CinematicRoot).eAllContents(view::ViewContainer)->select(view | not (view.widget = null) and 'MainPanel'.equalsIgnoreCase(view.widget.name))->first() else null endif/]

[query public hasRootBean(any : ecore::EObject) : Boolean = not any.eContainer(cinematic::CinematicRoot).eAllContents(view::ViewContainer)->select(view | not (view.widget = null) and 'MainPanel'.equalsIgnoreCase(view.widget.name))->isEmpty()/]

[query public flowHasMainPanel(flow : flow::Flow) : Boolean = flow.states->filter(flow::ViewState)->exists(viewState | viewState.viewContainers->exists(view | not (view.widget = null) and 'MainPanel'.equalsIgnoreCase(view.widget.name)))/]

[query public getViewEvents(event : cinematic::Event) : OrderedSet(view::ViewEvent) = if event.oclIsTypeOf(view::ViewEvent) then OrderedSet{event} else if event.oclIsTypeOf(flow::FlowEvent) then event.oclAsType(flow::FlowEvent).binds->asOrderedSet()->collect(temp1 | temp1.getViewEvents()) else OrderedSet{} endif endif/]

[template public genFullQualifiedFileName(aFS : flow::FlowState)]
  //TODO handle [aFS.eClass().name/][/template]

[**
 * The documentation of the template genFullQualifiedFileName.
 * @param aViewState
*/]
[template public genFullQualifiedFileName(aViewState : flow::ViewState)]
  ['src.folder.pages'.getProperty()/]/[aViewState.eContainer(cinematic::CinematicRoot).name/]/[aViewState.ancestors(cinematic::Package)->reverse()->collect(temp2 | temp2.name)->sep('/')/][if (aViewState.ancestors(cinematic::Package)->notEmpty())]/[/if][aViewState.eContainer(flow::Flow).name/]/[aViewState.name/].html[/template]

[**
 * The documentation of the template genFullQualifiedFileName.
 * @param aViewState
 * @param aEvent
*/]
[template public genFullQualifiedFileName(aViewState : flow::ViewState, aEvent : cinematic::Event)]
  ['src.folder.pages'.getProperty()/]/[aViewState.eContainer(cinematic::CinematicRoot).name/]/[aViewState.ancestors(cinematic::Package)->reverse()->collect(temp3 | temp3.name)->sep('/')/][if (aViewState.ancestors(cinematic::Package)->notEmpty())]/[/if][aViewState.eContainer(flow::Flow).name/]/MultipleTransitions/[aViewState.name/][aEvent.name/].html[/template]

[**
 * The documentation of the template genFullQualifiedFileName.
 * @param aViewState
*/]
[template public genFullQualifiedFileName(aActionState : flow::ActionState)]
  ['src.folder.pages'.getProperty()/]/[aActionState.eContainer(cinematic::CinematicRoot).name/]/[aActionState.ancestors(cinematic::Package)->reverse()->collect(temp4 | temp4.name)->sep('/')/][if (aActionState.ancestors(cinematic::Package)->notEmpty())]/[/if][aActionState.eContainer(flow::Flow).name/]/ActionStates/[aActionState.name/].html[/template]

[**
 * The documentation of the template genRelativeName.
 * @param aViewState
*/]
[template public getRootContainerPath(aFS : flow::FlowState)]
  //TODO handle [aFS.eClass().name/][/template]

[template public getRootContainerPath(aViewState : flow::ViewState)]
  ['../../' + aViewState.genPackageRelativePath() + '../'/][/template]

[template public getRootContainerPath(aViewState : flow::ViewState, aEvent : cinematic::Event)]
  ['../../' + aViewState.genPackageRelativePath() + '../../'/][/template]

[template public getRootContainerPath(aActionState : flow::ActionState)]
  ['../../' + aActionState.genPackageRelativePath() + '../../'/][/template]

[template public genPackageRelativePath(aNFS : flow::NamedFlowState)]
  [for (it : cinematic::Package | aNFS.ancestors(cinematic::Package))]../[/for][/template]

[template public getLabel(anAVE : view::AbstractViewElement) post(self.trim())]
  [if (not (anAVE.label = null) and anAVE.label.size() > 0)][anAVE.label/][else][anAVE.name/][/if]
[/template]

[template public getName(aFS : flow::FlowState) post(self.trim())]
  //TODO handle [aFS.eClass().name/][/template]

[template public getName(aViewState : flow::ViewState) post(self.trim())]
  [aViewState.name/][/template]

[template public getName(aActionState : flow::ActionState) post(self.trim())]
  [aActionState.name/][/template]
