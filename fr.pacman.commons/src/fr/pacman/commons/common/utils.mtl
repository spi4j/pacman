[module utils('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::services::AnnotationUtils/]
[import fr::pacman::commons::services::ResourceUtils/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[comment : /]
[query public sanitizeReqID(s : String) : String = if not (s = null) then s.replaceAll('-', '_') else 'ID_INVALID' endif/]

[query public sanitize(msg : String) : String = msg.normalize().sanitizeJavaService()/]

[query public sanitizeRJK(var : String) : String = var.sanitizeJavaKeywords()/]

[query public normalize(msg : String) : String = msg.normalizeJavaService()/]

[query public genSlashedLine(str : String, size : Integer) : String = str.genSlashedLineJavaService(size)/]

[query public date(format : String) : String = format.dateJavaService()/]

[query public escape(str : String) : String = str.escapeJavaService()/]

[query public isLibraryEntity(e : entity::Entity, s : String) : Boolean = if not e.hasAdditionnalLibraries() then false else e.isLibraryEntity_invoke(s) endif/]

[query public isLibraryEntity_invoke(e : entity::Entity, s : String) : Boolean = e.isLibraryEntityJavaService(s)/]

[query public getLibraryNameForEntity(e : entity::Entity, s : String) : String = e.getLibraryName(s)/]

[query public toPath(pkg : String) : String = pkg.replaceAll('\\.', '/')/]

[query public normalizePath(path : String) : String = path.replaceAll('/+', '/').trim()/]

[query public ensureTrailingSlash(path : String) : String = if path = null then '/' else if path.endsWith('/') then path else path + '/' endif endif/]

[comment : VÃ©rifie si un DTO/ENTITY?/Attribut ne doit pas etre persistant. /]
[comment : Cette methode est tres importante elle est remontee au plus haut pour l'instant (peut-etre a tord)/]
[comment : Les objets ne sont pas persistants dans les cas suivants : 
	- Le projet n'est pas un projet lie a la persistance (starter).
	- Une annotation NOT_PERSISTENT est presente au niveau du systeme (au plus haut niveau).
	- Une annotation NOT_PERSISTENT est presente au niveau de l'objet.
/]
[query public isNotPersistent(e : environment::ObeoDSMObject) : Boolean = not e.usePersistence() or e.isNotPersistentObject()/]

[query private isNotPersistentObject(e : environment::ObeoDSMObject) : Boolean = e.annotationExistsRecursively('NOT_PERSISTENT')/]

[**
 * Retrouve le package parent d'un objet,
 * on prend la ressource physique de l'objet,
 * on extrait la partie de l'uri qui correspond au folder.
*/]
[query public getModuleFolderFromUri(any : ecore::EObject) : String = any.getModuleFolderFromEObject()/]

[comment : Check if the property is a list. /]
[query public isMultiple(p : environment::Property) : Boolean = p.multiplicity = environment::MultiplicityKind::ONE_STAR or p.multiplicity = environment::MultiplicityKind::ZERO_STAR/]

[comment : Check if the parameter is a list. /]
[query public isMultiple(p : soa::Parameter) : Boolean = p.multiplicity = environment::MultiplicityKind::ONE_STAR or p.multiplicity = environment::MultiplicityKind::ZERO_STAR/]

[comment : Check if the object exists and is valid. /]
[query public isValidObject(e : environment::ObeoDSMObject) : Boolean = not (e = null)/]

[comment : Search for xtsopsup existence. /]
[query public hasXtopSup(any : ecore::EObject) : Boolean = any.getSQLTableAdditionalFields().contains('xtopsup')/]

[comment : Search for xdmaj existence. /]
[query public hasXdMaj(any : ecore::EObject) : Boolean = any.getSQLTableAdditionalFields().contains('xdmaj')/]

[comment : Search for xdmaj or xtopsup existence. Must be optimised. /]
[query public hasXtoSup_XdMaj(any : ecore::EObject) : Boolean = any.hasXtopSup() or any.hasXdMaj()/]
