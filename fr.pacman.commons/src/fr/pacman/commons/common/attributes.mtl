[comment encoding = UTF-8 /]
[module attributes('http://www.obeonetwork.org/dsl/soa/4.0.0', 
                   'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils /]
[import fr::pacman::commons::convention::rule::classRule /]

[comment : Check if a DTO has some attributes. /]
[query public hasAttributes (d : DTO) : Boolean = 

	d.attributes->size() > 0
	or d.references->size() > 0
/]

[comment : *********************************************** /]
[comment : A PASSER DANS TYPES; N'A RIEN A FAIRE ICI...    /]
[comment : *********************************************** /]

[query public genTypeName(t : Type) : String = 
if t.oclIsKindOf(Enumeration) then 
	apply_classEnum(t.name)
else
	t.name.sanitize() endif
/]

[comment les types, les attributs et les param√®tres avec leur type /]
[query public genTypeNameWithPreCheck(t : Type ) : String = 
if (t.oclIsTypeOf(Enumeration)) then 
	'String'
else if (isStandardType(t.name) or isOtherAvailableType(t.name)) then
    t.name.sanitize().toUpperFirst()
else 'Invalid'
endif endif 
/]

[query public isStandardType(s : String) : Boolean =
'Integer'.equalsIgnoreCase(s) or 'String'.equalsIgnoreCase(s) or 'Boolean'.equalsIgnoreCase(s) or 'Float'.equalsIgnoreCase(s)
	or 'Binary'.equalsIgnoreCase(s) or 'Long'.equalsIgnoreCase(s) or 'Double'.equalsIgnoreCase(s) or 'Date'.equalsIgnoreCase(s)
	or 'Timestamp'.equalsIgnoreCase(s) or 'Time'.equalsIgnoreCase(s) 
/]

[comment : rajout du type InputStream suite a migration packappli...bricolage /]
[query private isOtherAvailableType(s : String) : Boolean = 
  'InputStream'.equalsIgnoreCase(s)
/]

[comment] le type des identifiants techniques [/comment]
[query public genPkType(any : OclAny) : String =
    kType()
/]

[query public genFkType(any : OclAny) : String =
    kType()
/]

[query private kType(any : OclAny) : String =
    'Long'
/]
