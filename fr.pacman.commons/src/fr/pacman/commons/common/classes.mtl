[module classes('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/requirement/1.0', 'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::services::AnnotationUtils/]
[import fr::pacman::commons::services::MatchingUtils/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[comment : Recupere le nom de la couche business a partir d'un DTO. /]
[query public buildAppliUserBusinessClassName(d : environment::DTO) : String = if d.isFromExternalLibrary() then d.getExternalLibraryName().buildAppliUserBusinessClassName() else d.buildAppliUserBusinessGenClassName() endif/]

[comment  Recupere le nom de la couche business pour l'application (général). /]
[query public buildAppliUserBusinessGenClassName(any : ecore::EObject) : String = any.getApplicationName().buildAppliUserBusinessClassName()/]

[comment  Recupere le nom de la couche business à partir du nom (String) injecté. /]
[query private buildAppliUserBusinessClassName(s : String) : String = (s + ' user business').apply_classDefault()/]

[query public buildAppliUserBusinessEntityGenClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user business entity').apply_classDefault()/]

[query public buildAppliEntityAbstractClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' auto fields entity').apply_classAbstract()/]

[query public buildAppliDtoAbstractClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' auto fields dto').apply_classAbstract()/]

[query public buildAppliXtoAbstractClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' auto fields xto').apply_classAbstract()/]

[query public buildAppliEntityInterfaceName(any : ecore::EObject) : String = (any.getApplicationName() + ' auto fields entity').apply_classInterface()/]

[query public buildAppliColumnClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' auto fields columns').apply_classEnum()/]

[query public buildSecurityManagerClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security manager').apply_classDefault()/]

[query public buildParamPersistenceClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' param persistence').apply_classDefault()/]

[query public buildParamPersistenceLibraryClassName(s : String) : String = (s + ' param persistence').apply_classDefault()/]

[query public buildUserPersistenceAppClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user persistence').apply_classDefault()/]

[query public buildParamAppliClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' param appli').apply_classDefault()/]

[query public buildBoostrapClassName(any : ecore::EObject) : String = (any.getHttpEmbeddedServer() + ' boostrap').apply_classDefault()/]

[query public buildBatchsJobsOperatorClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' jobs operator').apply_classDefault()/]

[query public buildHealthExternalServicesClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' health external services').apply_classDefault()/]

[query public buildHealthExternalServiceClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' health external service info').apply_classDefault()/]

[query public buildGwtUserBusinessClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' gwt user business').apply_classDefault()/]

[query public buildCXFServletClassName(any : ecore::EObject) : String = ' CXF servlet'.apply_classDefault()/]

[query public buildRSContextResolverClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' context resolver').apply_classDefault()/]

[query public buildRSServicesFacadeFactoryClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' services facade factory').apply_classDefault()/]

[query public buildRSExceptionHandlerClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' exception handler').apply_classDefault()/]

[query public buildRSGenericFilterClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' generic filter').apply_classDefault()/]

[query public buildRSTokensConfiguratorClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' tokens config').apply_classDefault()/]

[query public buildRSTechnichalResourcesClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' tokens').apply_classDefault()/]

[query public buildRSAuthenticationResourceClassName(s : soa::SecurityScheme) : String = (s.getApplicationName() + ' token ' + s.name + ' resources').apply_classDefault()/]

[query public buildRSO2AuthenticationResourceClassName(s : soa::SecurityScheme, f : soa::Flow) : String = (s.getApplicationName() + ' token ' + s.name + ' ' + f.flowType.toString().substring(1, 4).toLower() + ' resources').apply_classDefault()/]

[query public buildCXFAbstractClassName(any : ecore::EObject) : String = ' CXF servlet'.apply_classAbstract()/]

[query public buildXtoClassNameFromDto(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' xto').apply_classDefault()/]

[query public buildClassNameFromEnumForXto(e : environment::Enumeration) : String = e.name.apply_classEnum()/]

[query public buildXtoClassNameFromEntity(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' xto').apply_classDefault()/]

[query public buildXtoClassNameFromReference(r : environment::Reference) : String = (r.buildSimpleRelationName() + ' xto').apply_classDefault()/]

[query public buildXtoTestClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' xto').apply_classTest()/]

[query public buildEntityClassNameImplFromDto(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' entity').apply_classImplem()/]

[query public buildDtoClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' dto').apply_classDefault()/]

[query public buildServiceRequirementsClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' service requirements').apply_classDefault()/]

[query public buildEntityColumnEnumName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' columns').apply_classEnum()/]

[query public buildAppliUserMapperGenClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user mapper').apply_classDefault()/]

[query public buildServiceImplClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' service').apply_classImplem()/]

[query public buildServiceClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' service').apply_classDefault()/]

[query public buildServiceInterfaceName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' service').apply_classInterface()/]

[query public buildAppliMatchAbstractName(any : ecore::EObject) : String = (any.getApplicationName() + ' match').apply_classAbstract()/]

[query public buildJsfBeanAbstractName(any : ecore::EObject) : String = (any.getApplicationName() + ' jsf bean').apply_classAbstract()/]

[query public buildRSApplicationConfigClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' app config').apply_classDefault()/]

[query public buildUserMatchingGenClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user matching').apply_classDefault()/]

[query public buildSecurityWebAppHelperClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security web app helper').apply_classDefault()/]

[query public buildAppliPermissionsInterfaceName(any : ecore::EObject) : String = (any.getApplicationName() + ' permissions').apply_classInterface()/]

[comment : Get the name for specific health facade interface. /]
[query public buildRsHealthServiceInterfaceName(any : ecore::EObject) : String = (any.getApplicationName() + ' health service').apply_classInterface()/]

[comment : Get the name for specific health facade implementation. /]
[query public buildRsHealthServiceClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' health application service').apply_classImplem()/]

[comment : Get the name for specific health resource implementation. /]
[query public buildRsHealthResourceClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' health resource').apply_classDefault()/]

[comment : Get the name for the client factory for Api First import. /]
[query public buildRSClientFactoryClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' client factory').apply_classDefault()/]

[comment : Get the name for the exception to be thrown if status code != 200 / OK. /]
[query public buildRSFrontExceptionClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' front rs exception').apply_classDefault()/]

[comment : Get the name for the Main super-classe for all the front resources./]
[query public buildRSFrontResourcesAbstractClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' front resources').apply_classAbstract()/]

[comment : Get the name for the generic default filter for all front resources. /]
[query public buildRSFrontResourcesDefaultFilter(any : ecore::EObject) : String = (any.getApplicationName() + ' front resources filter').apply_classDefault()/]

[comment : Get the name of the application dispatcher for jsp project. /]
[query public buildJspDispatcherClassName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' dispatcher').apply_classEnum()/]

[comment : Get the name for a sub controller. /]
[query public buildJspControllerClassName(viewState : flow::ViewState) : String = (viewState.name + ' Controller').apply_classDefault()/]

[comment : Get the name for a sub controller in the dispatcher (suppress controller). /]
[query public getJspControllerForDispatcherClassName(viewState : flow::ViewState) : String = viewState.name.apply_classDefault()/]

[comment : Get the name for the configuration loader and storage for the library. /]
[query public buildRSFrontConfigClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' front configuration').apply_classDefault()/]

[comment : Get the name for the tokens configurator. /]
[query public buildRSFrontTokensConfigClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' tokens configuration').apply_classDefault()/]

[comment : Get the name for the default empty interceptor for all front resources. /]
[query public buildRSFrontResourcesDefaultInterceptor(any : ecore::EObject) : String = (any.getApplicationName() + ' front resources interceptor').apply_classDefault()/]

[comment : Get the name for the inner class 'Hostname Verifier'. /]
[query public buildInternalHostnameVerifier(any : ecore::EObject) : String = any.getApplicationNameUpperFirst() + ' hostname verifier'.apply_classDefault()/]

[comment : Get the name for the inner class 'Trust Manager'. /]
[query public buildInternalTrustManager(any : ecore::EObject) : String = any.getApplicationNameUpperFirst() + ' trust manager'.apply_classDefault()/]

[comment : Get the name for the default context holder for all the front resources. /]
[query public buildRSFrontResourcesContextHolder(any : ecore::EObject) : String = (any.getApplicationName() + ' front context holder').apply_classDefault()/]

[comment : Le nom du conteneur principal pour l'api d'observabilite (health). /]
[query public buildHealthDataXtoClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' health xto').apply_classDefault()/]

[comment : Le nom du conteneur principal pour l'api d'observabilite (info). /]
[query public buildInfoDataXtoClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' info xto').apply_classDefault()/]

[comment Retourne le système racine d'un objet/]
[query public getRoot(any : ecore::EObject) : environment::ObeoDSMObject = any.getRootJavaService().oclAsType(environment::ObeoDSMObject)/]

[comment : Retourne la valeur de la métadonnée 'LIBRARY_NAME' pour le DTO. /]
[query private getExternalLibraryName(d : environment::DTO) : String = d.metadatas.getAnnotationBody('LIBRARY_NAME')/]

[comment  Retourne true si le DTO possède la metadonnee 'LIBRARY_NAME'./]
[comment  (le DTO est donc piloté par une librairie externe). /]
[query public isFromExternalLibrary(d : environment::DTO) : Boolean = d.annotationExistsRecursively('LIBRARY_NAME')/]

[comment etourne true si l'objet possède l'annotation Referentiel/]
[query public isReferentiel(o : environment::ObeoDSMObject) : Boolean = o.annotationExistsRecursively('REFERENTIEL')/]

[comment etourne true si la propriété possède une taille/]
[query public hasSize(p : environment::Property) : Boolean = p.metadatas.hasSize()/]

[comment etourne la taille définie sur une propriété/]
[query public size(p : environment::Property) : String = if not (p = null) then p.metadatas.size() else '' endif/]

[comment etourne true si les métadonnées contiennent l'annotation PHYSICAL_SIZE/]
[query public hasSize(metadatas : environment::MetaDataContainer) : Boolean = metadatas.getAnnotationBody('PHYSICAL_SIZE') <> null/]

[comment etourne le contenu de l'annotation PHYSICAL_SIZE dans ces métadonnées, ou rien si l'annotation n'existe pas/]
[query public size(metadatas : environment::MetaDataContainer) : String = if metadatas.hasSize() then metadatas.getAnnotationBody('PHYSICAL_SIZE') else '' endif/]

[comment etourne true si l'entity associée à ce DTO possède un attribut avec un attribut Version/]
[query public hasEntityWithVersion(d : environment::DTO) : Boolean = d.findEntityForDto().hasVersion()/]

[comment etourne le type du champ qui porte la version sur l'entité associée à ce DTO/]
[query public getEntityVersionType(d : environment::DTO) : environment::DataType = d.findEntityForDto().getVersionType()/]

[comment etourne l'entity associée à un DTO/]
[query private findEntityForDto(d : environment::DTO) : entity::Entity = if not (d.getRoot() = null) and d.getRoot().eAllContents(entity::Entity)->exists(e | e.name.equalsIgnoreCase(d.name) or d.name.substring(d.name.size() - 2).equalsIgnoreCase('dto') and e.name.equalsIgnoreCase(d.name.substring(1, d.name.size() - 3))) then d.getRoot().eAllContents(entity::Entity)->select(e | e.name.equalsIgnoreCase(d.name) or d.name.substring(d.name.size() - 2).equalsIgnoreCase('dto') and e.name.equalsIgnoreCase(d.name.substring(1, d.name.size() - 3)))->first() else null endif/]

[comment etourne true si l'entité possède un attribut avec l'annotation Version/]
[query public hasVersion(e : entity::Entity) : Boolean = if e = null then false else e.attributes->exists(a | a.isVersion()) endif/]

[comment etourne le type du champ qui porte la version sur cette entité/]
[query public getVersionType(e : entity::Entity) : environment::DataType = if e = null then null else e.attributes->select(a | a.isVersion())->first().type endif/]

[comment etourne true si l'attribut de l'entité possède l'annotation Version/]
[query public isVersion(a : environment::Attribute) : Boolean = a.annotationExists('VERSION', false)/]

[query public getClientTypes(any : ecore::EObject) : Sequence(String) = any.getClient().getPropertyAsList(',')/]

[query public requirementBaseCategoryLevel(any : ecore::EObject) : Integer = if any.getRequirementCategoryBaseLevel() <> null then any.getRequirementCategoryBaseLevel().toInteger() else 0 endif/]

[query public getBaseCategoryForRequirement(req : requirement::Requirement) : requirement::Category = if req = null or req.requirementBaseCategoryLevel() = 0 then null else req.ancestors(requirement::Category)->reverse()->at(req.requirementBaseCategoryLevel()) endif/]
