[module comments('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::services::CommentsUtils/]

[comment encoding = UTF-8 /]
[comment : Get a random secured label for the name of the user code protected zone. /]
[comment : deprecated -> cause .lost files with regenerations. /]
[query public randomUserCodeForOperation(o : soa::Operation, s : String) : String = o.getRandom_invoke(s)/]

[comment : Get a random number for the user code zone. /]
[query private getRandom_invoke(o : soa::Operation, s : String) : String = o.getRandomUserCodeForOperation(s)/]

[comment : Get the name for the operation with all parameters for Java method. /]
[template public userCodeForJavaOperation(o : soa::Operation) post(self.trim())]
  [o.name/][o.userCodeForOperation_ouput(true)/][o.userCodeForOperation_input(true)/][/template]

[comment : Get the name for the operation with all parameters (avoid warning if bad modelisation) (1/3). /]
[template public userCodeForOperation(o : soa::Operation) post(self.trim())]
  [o.name/][o.userCodeForOperation_ouput(false)/][o.userCodeForOperation_input(false)/][/template]

[comment : Get the name for the operation with all parameters (2/3). /]
[template public userCodeForOperation_ouput(o : soa::Operation, b : Boolean) post(self.trim())]
  [if (not o.output->isEmpty())]
    [let p : soa::Parameter = o.output->first()][p.addParamTypeAndName(b)/][/let]
  [/if]
[/template]

[comment : Get the name for the operation with all parameters (3/3). /]
[template public userCodeForOperation_input(o : soa::Operation, b : Boolean) post(self.trim())]
  [if (not o.input->isEmpty())]
    [for (p : soa::Parameter | o.input)][p.addParamTypeAndName(b)/][/for]
  [/if]
[/template]

[comment : Get the type and name for the specific parameter. /]
[template private addParamTypeAndName(p : soa::Parameter, b : Boolean) post(self.trim())]
  [if (not (p.type = null))]
    [if (b)][p.sanitizeParamTypeAndName()/][else]_[p.type.name/]_[p.name/][/if]
  [/if]
[/template]

[comment : Get the type the specific parameter and sanitize if wanted . /]
[template private sanitizeParamTypeAndName(p : soa::Parameter) post(self.trim())]
  _[p.type.name.replaceAll('[<>,]', '_')/]_[p.name/][/template]

[comment : deprecated temporary here for history. /]
[query private userCodeForOperationOld(operation : soa::Operation) : String = if operation.useDeprecatedSOAUserCodeParams() then if operation.input->isEmpty() and operation.output->isEmpty() then operation.name else if operation.input->isEmpty() then operation.name + '_' + operation.output->asSequence()->collect(temp1 | temp1.type)->collect(temp2 | temp2.name)->sep('_') else if operation.output->isEmpty() then operation.name + '_' + operation.input->asSequence()->collect(temp3 | temp3.type)->collect(temp4 | temp4.name)->sep('_') else operation.name + '_' + operation.input->asSequence()->collect(temp5 | temp5.type)->collect(temp6 | temp6.name)->sep('_') + '_' + operation.output->asSequence()->collect(temp7 | temp7.type)->collect(temp8 | temp8.name)->sep('_') endif endif endif else operation.name endif/]