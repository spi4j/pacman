[comment encoding = UTF-8 /]
[module properties( 'http://www.eclipse.org/ocl/1.1.0/Ecore', 
					'http://www.obeonetwork.org/dsl/environment/3.0.0',
					'http://www.obeonetwork.org/dsl/entity/3.0.0')/]


[query public getClient(any : OclAny) : String = 
	getClient_invoke().trim().toLower()
/]

[query private getClient_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getClient()', Sequence{})
/]

[query public getNaming(any : OclAny) : String =
    getNaming_invoke().trim().toLower()
/]

[query private getNaming_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getNaming()', Sequence{})
/]

[query public getJavaStringVersion(any : OclAny) : String = 
	if getJavaVersion() > 8 then getJavaVersion().toString() else  '1.' + getJavaVersion().toString() endif
/]

[query private getJavaVersion(any : OclAny) : Integer =
    getJavaVersion_invoke().toInteger()
/]

[query private getJavaVersion_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getJavaVersion()', Sequence{})
/]

[query public getSpi4JVersion(any : OclAny) : String =
    getSpi4JVersion_invoke().trim()
/]

[query private getSpi4JVersion_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getSpi4JVersion()', Sequence{})
/]

[query public getDataBasesNames(any : OclAny) : String =
	getDataBasesNames_invoke().trim().toUpper()
/]

[query private getDataBasesNames_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getDataBasesNames()', Sequence{})
/]

[query public getDelimiter(any : OclAny) : String =
    getDelimiter_invoke().toLower()
/]

[query private getDelimiter_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getDelimiter()', Sequence{})
/]

[query public useServiceRequirements(any : OclAny) : Boolean =
    useServiceRequirements_invoke().toBoolean()
/]

[query private useServiceRequirements_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseServiceRequirements()', Sequence{})
/]

[query public useBDD(any : OclAny) : Boolean =
	not getDataBasesNames().oclIsUndefined() and getDataBasesNames().trim().size() > 0
/]

[query public isCrudApplication(any : OclAny) : Boolean =
    isCrudApplication_invoke().toBoolean()
/]

[query private isCrudApplication_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getIsApplicationCrud()', Sequence{})
/] 

[query public useEjb(any : OclAny) : Boolean =
    useEjb_invoke().toBoolean()
/]

[query private useEjb_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseEjb()', Sequence{})
/]

[query public useTestsCRUD(any : OclAny) : Boolean =
    useTestsCRUD_invoke().toBoolean()
/]

[query private useTestsCRUD_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseTestsCRUD()', Sequence{})
/]

[query public useFetchingStrategy(any : OclAny) : Boolean =
    useFetchingStrategy_invoke().toBoolean()
/]

[query private useFetchingStrategy_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseFetchingStrategy()', Sequence{})
/]

[comment : non utilis√© pour l'instant/]
[query public getAppCRUD(any : OclAny) : String =
    getAppCRUD_invoke()
/]

[query private getAppCRUD_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getAppCRUD()', Sequence{})
/]

[query public useConfigFileSpi4jFrwk(any : OclAny) : Boolean =
    useConfigFileSpi4jFrwk_invoke().toBoolean()
/]

[query private useConfigFileSpi4jFrwk_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseConfigFilesSpi4jFrwk()', Sequence{})
/]

[query public useMatching(any : OclAny) : Boolean =
    useMatching_invoke().toBoolean()
/]

[query private useMatching_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseMatching()', Sequence{})
/]

[query public getHttpEmbeddedServer(any : OclAny) : String = 
	getHttpEmbeddedServer_invoke().trim()
/]

[query private getHttpEmbeddedServer_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getHttpEmbeddedServer()', Sequence{})
/]

[query public useH2EmbeddedDatabase(any : OclAny) : Boolean = 
	useH2EmbeddedDatabase_invoke().toBoolean()
/]

[query private useH2EmbeddedDatabase_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getH2EmbeddedDatabase()', Sequence{})
/]

[query public useSpi4jSecurity(any : OclAny) : Boolean =
    useSpi4jSecurity_invoke().toBoolean()
/]

[query private useSpi4jSecurity_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseSpi4jSecurity()', Sequence{})
/]

[query public getWsSecuritySchemeId (any : OclAny) : String = 
	getWsSecuritySchemeId_invoke()
/]

[query private getWsSecuritySchemeId_invoke (any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties', 'getWsSecuritySchemeId()', Sequence{})
/]

[query public useTestBDD(any : OclAny) : Boolean =
    useTestBDD_invoke().toBoolean()
/]

[query private useTestBDD_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseTestBDD()', Sequence{})
/]

[query public isClearUserCode(any : OclAny) : Boolean =
   	isClearUserCode_invoke().toBoolean()
/]

[query public isClearUserCode_invoke(any : OclAny) : String =
   	invoke('fr.pacman.commons.convention.project.ProjectProperties','getIsClearUserCode()', Sequence{})
/]

[query public forceJspTopBottom(any : OclAny) : Boolean = 
	forceJspTopBottom_invoke().toBoolean()
/]

[query public forceJspTopBottom_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getClientJspForceTopBottom()', Sequence{})
/]

[query public isLibrary(any : OclAny) : Boolean =
   	isLibrary_invoke().toBoolean()
/]

[query public isServlets (any : OclAny) : Boolean =
	'jsp'.equalsIgnoreCase(getClient()) or 'jsf'.equalsIgnoreCase(getClient())
/]

[query private isLibrary_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getIsLibrary()', Sequence{})
/]

[query public isLibraryRS(any : OclAny) : Boolean =
   	isLibraryRs_invoke().toBoolean()
/]

[query private isLibraryRs_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getIsLibraryRs()', Sequence{})
/]

[query public getLibraryVersion(any : OclAny) : String =
	getLibraryVersion_invoke().trim()
/]

[query private getLibraryVersion_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getLibraryVersion()', Sequence{})
/]

[query public useLibrary(any : OclAny) : Boolean =
    useLibrary_invoke().toBoolean()
/]

[query private useLibrary_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseLibrary()', Sequence{})
/]

[query public getLibraryPackage(any : OclAny) : String =
	getLibraryPackage_invoke().trim().toLower()
/]

[query private getLibraryPackage_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getLibraryPackage()', Sequence{})
/]

[query public useWS(any : OclAny) : Boolean =
    useWS_invoke().toBoolean()
/]

[query private useWS_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseWS()', Sequence{})
/]

[query public getXtopSuppKey(any : OclAny) : String = 
	getXtopSuppKey_invoke()
/]

[query private getXtopSuppKey_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getXtoSupKey', Sequence{})
/]

[query public getXdmajKey(any : OclAny) : String = 
	getXdmajKey_invoke()
/]

[query private getXdmajKey_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getXdMajKey', Sequence{})
/]

[query public useWMS(any : OclAny) : Boolean =
    useWMS_invoke().toBoolean()
/]

[query private useWMS_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseWMS()', Sequence{})
/]

[query public hasToGenerateRootFiles(any : OclAny) : Boolean =
    hasToGenerateRootFiles_invoke().toBoolean()
/]

[query private hasToGenerateRootFiles_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getHasToGenerateRootFiles()', Sequence{})
/]

[query public getVersion(any : OclAny) : String = 
	getVersion_invoke().trim()
/]

[query private getVersion_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getVersion()', Sequence{})
/]

[query public getRequirementCategoryBaseLevel(any : OclAny) : String = 
	getRequirementCategoryBaseLevel_invoke().trim()
/]

[query private getRequirementCategoryBaseLevel_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getRequirementCategoryBaseLevel()', Sequence{})
/]

[query public getXtopSupName(any : OclAny) : String = 
	getXtopSupName_invoke().trim().toLower()
/]

[query private getXtopSupName_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getXtoSupName()', Sequence{})
/]

[query public getXdMajName(any : OclAny) : String = 
	getXdMajName_invoke().trim().toLower()
/]

[query private getXdMajName_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getXdMajName()', Sequence{})
/]

[query public getServiceRequirementsPrefix(any : OclAny) : String =
	getServiceRequirementsPrefix_invoke().trim()
/]

[query public getServiceRequirementsPrefix_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getRequirementPrefix()', Sequence{})
/]

[query public hasAutomaticColumns(any : OclAny) : Boolean =
	getSQLTableAdditionalFields().trim().size() > 0
/]

[query public getSQLTableAdditionalFields(any : OclAny) : String = 
	getSQLTableAdditionalFields_invoke()
/]

[query private getSQLTableAdditionalFields_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getSqlTableAdditionalFields()', Sequence{})
/]

[comment : Attention, on a visiblement des doublons avec cette m√©thode. Effectuer une analyse et faire le m√©nage. /]
[comment : Voir avec 'getSQLTableAdditionalFields' 'hasAutomaticColumns', etc.. /]
[query public get_automaticColumnsProperties(any : OclAny) : Sequence(String) =
	invoke('fr.pacman.commons.services.StringUtils', 'getPropertyAsList(java.lang.Object, java.lang.String)', Sequence{getSQLTableAdditionalFields(), ','})
/]

[query public hasAdditionnalLibraries(any : OclAny) : Boolean =  
	getLibrariesAdditionnalJars().trim().size() > 0
/]

[query private getLibrariesAdditionnalJars(any : OclAny) : String = 
	getLibrariesAdditionnaljars_invoke()
/]

[query private getLibrariesAdditionnaljars_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getLibrariesAdditionalJars()', Sequence{})
/]

[query public getAdditionnalLibraries(any : OclAny) : Sequence(String) =
	invoke('fr.pacman.commons.services.StringUtils', 'getPropertyAsList(java.lang.Object, java.lang.String)', Sequence{getLibrariesAdditionnalJars(), ','}) 
/]

[query public getSQLTablePrefix(any : OclAny) : String = 
	getSQLTablePrefix_invoke().trim()
/]

[query private getSQLTablePrefix_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getSQLTablePrefix()', Sequence{})
/]

[query public hasSQLTableSchema(any : OclAny) : Boolean = 
	getSQLTableSchema().size() > 0
/]

[query public getSQLTableSchema(any : OclAny) : String = 
	getSQLTableSchema_invoke().trim()
/]

[query private getSQLTableSchema_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getSQLTableSchema()', Sequence{})
/]

[query public getSQLOracleIndexTableSpace(any : OclAny) : String  = 
	getSQLOracleIndexTableSpace_invoke().trim()
/]

[query private getSQLOracleIndexTableSpace_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getSQLOracleIndexTableSpace()', Sequence{})
/]

[query public useDeprecatedSOAUserCodeParams(any : OclAny) : Boolean = 
	useDeprecatedSOAUserCodeParams_invoke().toBoolean()
/]

[query private useDeprecatedSOAUserCodeParams_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseDeprecatedSOAUserCodeParams()', Sequence{})
/]

[query public useLog4J(any : OclAny) : Boolean = 
	useLog4J_invoke().toBoolean()
/]

[query private useLog4J_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseLog4J()', Sequence{})
/]

[query public useWsServiceInjection(any : OclAny) : Boolean =
    useWsServiceInjection_invoke().toBoolean()
/]

[query private useWsServiceInjection_invoke(any : OclAny) : String = 
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getUseWsServiceInjection()', Sequence{})
/]

[comment : Check if the selected database is an Oracle (32 Char old version) database. /]
[query public isDbOracle32(any : OclAny) : Boolean = 
	getDataBasesNames().contains('ORACLE_32')
/]

[comment : Check if the selected database is an Oracle database. /]
[query public isDbOracle(any : OclAny) : Boolean = 
	getDataBasesNames().contains('ORACLE') and not isDbOracle32() 
/]

[comment : Check if the selected database is an MySql database. /]
[query public isDbMySql(any : OclAny) : Boolean = 
	getDataBasesNames().contains('MYSQL')
/]

[comment : Check if the selected database is an MariaDB database. /]
[query public isDbMariaDB(any : OclAny) : Boolean = 
	getDataBasesNames().contains('MARIADB')
/]

[comment : Check if the selected database is an POSTGRESQL database. /]
[query public isDbPostgresql(any : OclAny) : Boolean = 
	getDataBasesNames().contains('POSTGRESQL')
/]

[comment : Check if the selected database is an SQL Server database. /]
[query public isDbSqlServer(any : OclAny) : Boolean = 
	getDataBasesNames().contains('SQLSERVER')
/]

[comment : Check if the selected database is an Msql otr MariaDb (Mysql Fork) database. /]
[query public isDbMsqlType(databaseType : String) : Boolean = 
	databaseType.equalsIgnoreCase('Mysql') or databaseType.equalsIgnoreCase('MariaDB')
/]

[comment : Check if the selected database is an Oracle database. /]
[query public isDbOracleType(databaseType : String) : Boolean = 
	databaseType.equalsIgnoreCase('Oracle')
/]

[comment : Check if the selected database is an Oracle 32 database. /]
[query public isDbOracle32Type(databaseType : String) : Boolean = 
	databaseType.equalsIgnoreCase('Oracle_32')
/]

[comment : Check if the selected database is a postgresql database./]
[query public isDbPostgresqlType(databaseType : String) : Boolean = 
	databaseType.equalsIgnoreCase('Postgresql') 
/]

[comment : Check if the selected database is an h2 database./]
[query public isDbH2Type(databaseType : String) : Boolean = 
	databaseType.equalsIgnoreCase('H2') 
/]	

[comment : Get the paging mode (auto or user). /]
[query public getPagingMode(any : OclAny) : String = 
	getPagingMode_invoke()
/]

[query public getPagingMode_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getPagingMode()', Sequence{})
/]

[comment : Get the header key for total count property. /]
[query public getPagingTotalCountKey(any : OclAny) : String = 
	getPagingTotalCountKey_invoke()
/]

[query public getPagingTotalCountKey_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getPagingTotalCountKey()', Sequence{})
/]

[comment : Get the header key for page count property. /]
[query public getPagingPageCountKey(any : OclAny) : String = 
	getPagingPageCountKey_invoke()
/]

[query public getPagingPageCountKey_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getJavaPagingCount()', Sequence{})
/]

[comment : Get the header key for current page index property. /]
[query public getPagingCurrentPageIdxKey(any : OclAny) : String = 
	getPagingCurrentPageIdxKey_invoke()
/]

[query public getPagingCurrentPageIdxKey_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getPagingCurrentPageIdxKey()', Sequence{})
/]

[comment : Get the header key for current page size property. /]
[query public getPagingCurrentPageSizeKey(any : OclAny) : String = 
	getPagingCurrentPageSizeKey_invoke()
/]

[query public getPagingCurrentPageSizeKey_invoke(any : OclAny) : String =
	invoke('fr.pacman.commons.convention.project.ProjectProperties','getPagingCurrentPageSizeKey()', Sequence{})
/]

[query public getLibraryName(any : OclAny, prop : String ) : String = 
	getConfigValue(prop + '.name')
/]

[query public getLibraryPackage(any : OclAny, prop : String ) : String = 
	getConfigValue(prop + '.package')
/]

[query public getLibraryVersion(any : OclAny, prop : String ) : String = 
	getConfigValue(prop + '.version')
/]

[query public getLibraryTablePrefix(any : OclAny, prop : String ) : String = 
	getConfigValue(prop + '.table.prefix')
/]

[query public getLibraryDataBaseSchema(any : OclAny, prop : String ) : String = 
	getConfigValue(prop + '.database.schema')
/]

[query public isLibraryDatabaseConnected(any : OclAny, prop : String ) : Boolean = 
	getConfigValue(prop + '.database').toString().toBoolean()
/]

[comment : Indique si le projet est une application utilisant un serveur. /]
[query public isWebApplication (any : OclAny) : Boolean = 
  	'JSP'.equalsIgnoreCase(getClient()) or 'JSF'.equalsIgnoreCase(getClient()) 
	or 'GWT'.equalsIgnoreCase(getClient()) or useWS()
/]

[comment : Possibilite (starter) de creer des projets sans utilisation de base de donnees. /]
[query public usePersistence(any : OclAny) : Boolean = 
	getDataBasesNames().size() > 0
/]

[comment : Set the default user, password, role, url for administration servlet. /]
[query public getDefaultAdminParameter(any : OclAny) : String = 
	'admin'
/]

[comment : Set the default user, password, role, url for monitoring. /]
[query public getDefaultMonitoringParameter(any : OclAny) : String = 
	'monitoring'
/]

[comment : Set the default realm name for server basic http security. /]
[query public getDefaultRealmParameter(any : OclAny) : String = 
	'file'
/]

[**
 * Obtenir une propriete depuis le parametrage. 
 * Attention ne surtout jamais renommer cette methode 
 * en getProperty() car elle rentrerait en conflit 
 * avec une m√©thode native d'acceleo qui va aussi 
 * rechercher des proprietes de configuration mais  
 * dans un autre endroit !
*/]
[query public getConfigValue(propertyName : String) : String =
	propertyName.getConfigValue_invoke()
/]

[query private getConfigValue_invoke(propertyName : String) : String =
	invoke('fr.pacman.commons.properties.PacmanPropertiesManager','get_property(java.lang.String)', Sequence{propertyName})
/]

[query public isMultiplicityMany(p : Property) : Boolean =
	((p.multiplicity = MultiplicityKind::ZERO_STAR) or (p.multiplicity = MultiplicityKind::ONE_STAR))
/]

[comment : Obtention du fragment d'uri pour le passage des servlets jsp. /]
[query public getJspCtrlUriFragment (any : OclAny) : String =
'/ctrl'
/]

[comment : Recuperation de la cl√© pour le nom de la propriete additionnelle (champ auto). /]
[query public nameColumnProperty(columnProp : String) : String = 
	columnProp + '.name'
/]

[comment : Recuperation de la cl√© pour le type de la propriete additionnelle (champ auto). /]
[query public typeColumnProperty(columnProp : String) : String = 
	columnProp + '.type' 
/]

[comment : Recuperation de la cl√© pour la taille de la propriete additionnelle (champ auto). /]
[query public sizeColumnProperty(columnProp : String) : String = 
	columnProp + '.size' 
/]

[comment : Recuperation de la cl√© pour la valeur de defaut de la propriete additionnelle (champ auto). /]
[query public defaultColumnProperty(columnProp : String) : String = 
	columnProp + '.default' 
/]

[comment : Recuperation de la cl√© pour la decription de la propriete additionnelle (champ auto). /]
[query public descriptionColumnProperty(columnProp : String) : String = 
	columnProp + '.comment' 
/]

[comment : Recuperation de la cl√© pour la nullite de la propriete additionnelle (champ auto). /]
[query public notnullColumnProperty(columnProp : String) : String = 
	columnProp + '.notnull' 
/]

[comment : Verifie si il est possible d'ecrire le champ additionnel. /]
[query public hasToWriteColumn (columnProp : String) : Boolean =
	columnHasName(columnProp) and columnHasType(columnProp)
/]

[query public columnHasName(any : OclAny, columnProp : String) : Boolean =
	getConfigValue(nameColumnProperty(columnProp)) <> null
	and getConfigValue(nameColumnProperty(columnProp)).trim().size() > 0
/]

[query public columnHasType(void : OclAny, columnProp : String) : Boolean =
	getConfigValue(typeColumnProperty(columnProp)) <> null
	and getConfigValue(typeColumnProperty(columnProp)).trim().size() > 0
/]

[query public columnHasDefault(void : OclAny, columnProp : String) : Boolean =
	getConfigValue(defaultColumnProperty(columnProp)) <> null
	and getConfigValue(defaultColumnProperty(columnProp)).trim().size() > 0
/]

[query public columnHasSize(void : OclAny, columnProp : String) : Boolean =
	getConfigValue(sizeColumnProperty(columnProp)) <> null
	and getConfigValue(sizeColumnProperty(columnProp)).trim().size() > 0
/]

[query public columnNotNull(void : OclAny, columnProp : String) : Boolean =
    get_notNullColumn(columnProp) <> null
    and (get_notNullColumn(columnProp).equalsIgnoreCase('1') or get_notNullColumn(columnProp).equalsIgnoreCase('true'))
/]

[query private get_notNullColumn(any : OclAny, columnProp : String) : String =
    getConfigValue(notnullColumnProperty(columnProp))
/]

[comment : Check if the application has a web client. /]
[query public hasWebClient(any : OclAny) : Boolean = 
	getClient().oclIsUndefined() 
	and getClient().trim().size() > 0 
	and ('jsp'.equalsIgnoreCase(getClient()) 
	or 'jsf'.equalsIgnoreCase(getClient()) 
	or 'gwt'.equalsIgnoreCase(getClient())) 
/]
