[module properties('http://www.eclipse.org/ocl/1.1.0/Ecore', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::convention::project::ProjectProperties/]
[import fr::pacman::commons::properties::PacmanPropertiesManager/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[query public getClient(any : ecore::EObject) : String = any.getClient_invoke().trim().toLower()/]

[query private getClient_invoke(any : ecore::EObject) : String = any.getClientJavaService()/]

[query public getNaming(any : ecore::EObject) : String = any.getNaming_invoke().trim().toLower()/]

[query private getNaming_invoke(any : ecore::EObject) : String = any.getNamingJavaService()/]

[query public getJavaStringVersion(any : ecore::EObject) : String = if any.getJavaVersion() > 8 then any.getJavaVersion().toString() else '1.' + any.getJavaVersion().toString() endif/]

[query private getJavaVersion(any : ecore::EObject) : Integer = any.getJavaVersion_invoke().toInteger()/]

[query private getJavaVersion_invoke(any : ecore::EObject) : String = any.getJavaVersionJavaService()/]

[query public getSpi4JVersion(any : ecore::EObject) : String = any.getSpi4JVersion_invoke().trim()/]

[query private getSpi4JVersion_invoke(any : ecore::EObject) : String = any.getSpi4JVersionJavaService()/]

[query public getDataBasesNames(any : ecore::EObject) : String = any.getDataBasesNames_invoke().trim().toUpper()/]

[query private getDataBasesNames_invoke(any : ecore::EObject) : String = any.getDataBasesNamesJavaService()/]

[query public getDelimiter(any : ecore::EObject) : String = any.getDelimiter_invoke().toLower()/]

[query private getDelimiter_invoke(any : ecore::EObject) : String = any.getDelimiterJavaService()/]

[query public useServiceRequirements(any : ecore::EObject) : Boolean = any.useServiceRequirements_invoke().toBoolean()/]

[query private useServiceRequirements_invoke(any : ecore::EObject) : String = any.getUseServiceRequirementsJavaService()/]

[query public useBDD(any : ecore::EObject) : Boolean = not (any.getDataBasesNames() = null) and any.getDataBasesNames().trim().size() > 0/]

[query public isCrudApplication(any : ecore::EObject) : Boolean = any.isCrudApplication_invoke().toBoolean()/]

[query private isCrudApplication_invoke(any : ecore::EObject) : String = any.getIsApplicationCrudJavaService()/]

[query public useEjb(any : ecore::EObject) : Boolean = any.useEjb_invoke().toBoolean()/]

[query private useEjb_invoke(any : ecore::EObject) : String = any.getUseEjbJavaService()/]

[query public useTestsCRUD(any : ecore::EObject) : Boolean = any.useTestsCRUD_invoke().toBoolean()/]

[query private useTestsCRUD_invoke(any : ecore::EObject) : String = any.getUseTestsCRUDJavaService()/]

[query public useHealthApi(any : ecore::EObject) : Boolean = any.useHealthApi_invoke().toBoolean()/]

[query private useHealthApi_invoke(any : ecore::EObject) : String = any.getUseHealthApiJavaService()/]

[query public useFetchingStrategy(any : ecore::EObject) : Boolean = any.useFetchingStrategy_invoke().toBoolean()/]

[query private useFetchingStrategy_invoke(any : ecore::EObject) : String = any.getUseFetchingStrategyJavaService()/]

[comment : non utilisé pour l'instant/]
[query public getAppCRUD(any : ecore::EObject) : String = any.getAppCRUD_invoke()/]

[query private getAppCRUD_invoke(any : ecore::EObject) : String = any.getAppCRUDJavaService()/]

[query public useConfigFileSpi4jFrwk(any : ecore::EObject) : Boolean = any.useConfigFileSpi4jFrwk_invoke().toBoolean()/]

[query private useConfigFileSpi4jFrwk_invoke(any : ecore::EObject) : String = any.getUseConfigFilesSpi4jFrwkJavaService()/]

[query public useBatch(any : ecore::EObject) : Boolean = any.useBatch_invoke().toBoolean()/]

[query private useBatch_invoke(any : ecore::EObject) : String = any.getUseBatchJavaService()/]

[query public useMatching(any : ecore::EObject) : Boolean = any.useMatching_invoke().toBoolean()/]

[query private useMatching_invoke(any : ecore::EObject) : String = any.getUseMatchingJavaService()/]

[query public getHttpEmbeddedServer(any : ecore::EObject) : String = any.getHttpEmbeddedServer_invoke().trim()/]

[query private getHttpEmbeddedServer_invoke(any : ecore::EObject) : String = any.getHttpEmbeddedServerJavaService()/]

[query public useH2EmbeddedDatabase(any : ecore::EObject) : Boolean = any.useH2EmbeddedDatabase_invoke().toBoolean()/]

[query private useH2EmbeddedDatabase_invoke(any : ecore::EObject) : String = any.getH2EmbeddedDatabaseJavaService()/]

[query public useSpi4jSecurity(any : ecore::EObject) : Boolean = any.useSpi4jSecurity_invoke().toBoolean()/]

[query private useSpi4jSecurity_invoke(any : ecore::EObject) : String = any.getUseSpi4jSecurityJavaService()/]

[query public getWsSecuritySchemeId(any : ecore::EObject) : String = any.getWsSecuritySchemeId_invoke()/]

[query private getWsSecuritySchemeId_invoke(any : ecore::EObject) : String = any.getWsSecuritySchemeIdJavaService()/]

[query public useTestBDD(any : ecore::EObject) : Boolean = any.useTestBDD_invoke().toBoolean()/]

[query private useTestBDD_invoke(any : ecore::EObject) : String = any.getUseTestBDDJavaService()/]

[query public isClearUserCode(any : ecore::EObject) : Boolean = any.isClearUserCode_invoke().toBoolean()/]

[query private isClearUserCode_invoke(any : ecore::EObject) : String = any.getIsClearUserCodeJavaService()/]

[query public forceJspTopBottom(any : ecore::EObject) : Boolean = any.forceJspTopBottom_invoke().toBoolean()/]

[query public forceJspTopBottom_invoke(any : ecore::EObject) : String = any.getClientJspForceTopBottomJavaService()/]

[query public isLibrary(any : ecore::EObject) : Boolean = any.isLibrary_invoke().toBoolean()/]

[query public isServlets(any : ecore::EObject) : Boolean = 'jsp'.equalsIgnoreCase(any.getClient()) or 'jsf'.equalsIgnoreCase(any.getClient())/]

[query private isLibrary_invoke(any : ecore::EObject) : String = any.getIsLibraryJavaService()/]

[query public isLibraryRS(any : ecore::EObject) : Boolean = any.isLibraryRs_invoke().toBoolean()/]

[query private isLibraryRs_invoke(any : ecore::EObject) : String = any.getIsLibraryRsJavaService()/]

[query public useWS(any : ecore::EObject) : Boolean = any.useWS_invoke().toBoolean()/]

[query private useWS_invoke(any : ecore::EObject) : String = any.getUseWSJavaService()/]

[query public getXtopSuppKey(any : ecore::EObject) : String = any.getXtopSuppKey_invoke()/]

[query private getXtopSuppKey_invoke(any : ecore::EObject) : String = any.getXtoSupKeyJavaService()/]

[query public getXdmajKey(any : ecore::EObject) : String = any.getXdmajKey_invoke()/]

[query private getXdmajKey_invoke(any : ecore::EObject) : String = any.getXdMajKeyJavaService()/]

[query public useWMS(any : ecore::EObject) : Boolean = any.useWMS_invoke().toBoolean()/]

[query private useWMS_invoke(any : ecore::EObject) : String = any.getUseWMSJavaService()/]

[query public hasToGenerateRootFiles(any : ecore::EObject) : Boolean = any.hasToGenerateRootFiles_invoke().toBoolean()/]

[query private hasToGenerateRootFiles_invoke(any : ecore::EObject) : String = any.getHasToGenerateRootFilesJavaService()/]

[query public getVersion(any : ecore::EObject) : String = any.getVersion_invoke().trim()/]

[query private getVersion_invoke(any : ecore::EObject) : String = any.getVersionJavaService()/]

[query public getRequirementCategoryBaseLevel(any : ecore::EObject) : String = any.getRequirementCategoryBaseLevel_invoke().trim()/]

[query private getRequirementCategoryBaseLevel_invoke(any : ecore::EObject) : String = any.getRequirementCategoryBaseLevelJavaService()/]

[query public getXtopSupName(any : ecore::EObject) : String = any.getXtopSupName_invoke().trim().toLower()/]

[query private getXtopSupName_invoke(any : ecore::EObject) : String = any.getXtoSupNameJavaService()/]

[query public getXdMajName(any : ecore::EObject) : String = any.getXdMajName_invoke().trim().toLower()/]

[query private getXdMajName_invoke(any : ecore::EObject) : String = any.getXdMajNameJavaService()/]

[query public getServiceRequirementsPrefix(any : ecore::EObject) : String = any.getServiceRequirementsPrefix_invoke().trim()/]

[query public getServiceRequirementsPrefix_invoke(any : ecore::EObject) : String = any.getRequirementPrefixJavaService()/]

[query public hasAutomaticColumns(any : ecore::EObject) : Boolean = any.getSQLTableAdditionalFields().trim().size() > 0/]

[query public getSQLTableAdditionalFields(any : ecore::EObject) : String = any.getSQLTableAdditionalFields_invoke()/]

[query private getSQLTableAdditionalFields_invoke(any : ecore::EObject) : String = any.getSqlTableAdditionalFieldsJavaService()/]

[comment : Attention, on a visiblement des doublons avec cette méthode. Effectuer une analyse et faire le ménage. /]
[comment : Voir avec 'getSQLTableAdditionalFields' 'hasAutomaticColumns', etc.. /]
[query public get_automaticColumnsProperties(any : ecore::EObject) : Sequence(String) = any.getSQLTableAdditionalFields().getPropertyAsList(',')/]

[query public hasAdditionnalLibraries(any : ecore::EObject) : Boolean = any.getLibrariesAdditionnalJars().trim().size() > 0/]

[query private getLibrariesAdditionnalJars(any : ecore::EObject) : String = any.getLibrariesAdditionnaljars_invoke()/]

[query private getLibrariesAdditionnaljars_invoke(any : ecore::EObject) : String = any.getLibrariesAdditionalJarsJavaService()/]

[query public getAdditionnalLibraries(any : ecore::EObject) : Sequence(String) = any.getLibrariesAdditionnalJars().getPropertyAsList(',')/]

[query public getSQLTablePrefix(any : ecore::EObject) : String = any.getSQLTablePrefix_invoke().trim()/]

[query private getSQLTablePrefix_invoke(any : ecore::EObject) : String = any.getSQLTablePrefixJavaService()/]

[query public hasSQLTableSchema(any : ecore::EObject) : Boolean = any.getSQLTableSchema().size() > 0/]

[query public getSQLTableSchema(any : ecore::EObject) : String = any.getSQLTableSchema_invoke().trim()/]

[query private getSQLTableSchema_invoke(any : ecore::EObject) : String = any.getSQLTableSchemaJavaService()/]

[query public getSQLOracleIndexTableSpace(any : ecore::EObject) : String = any.getSQLOracleIndexTableSpace_invoke().trim()/]

[query private getSQLOracleIndexTableSpace_invoke(any : ecore::EObject) : String = any.getSQLOracleIndexTableSpaceJavaService()/]

[query public useDeprecatedSOAUserCodeParams(any : ecore::EObject) : Boolean = any.useDeprecatedSOAUserCodeParams_invoke().toBoolean()/]

[query private useDeprecatedSOAUserCodeParams_invoke(any : ecore::EObject) : String = any.getUseDeprecatedSOAUserCodeParamsJavaService()/]

[query public useLog4J(any : ecore::EObject) : Boolean = any.useLog4J_invoke().toBoolean()/]

[query private useLog4J_invoke(any : ecore::EObject) : String = any.getUseLog4JJavaService()/]

[query public useWsServiceInjection(any : ecore::EObject) : Boolean = any.useWsServiceInjection_invoke().toBoolean()/]

[query private useWsServiceInjection_invoke(any : ecore::EObject) : String = any.getUseWsServiceInjectionJavaService()/]

[comment : Check if the selected database is an Oracle (32 Char old version) database. /]
[query public isDbOracle32(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('ORACLE_32')/]

[comment : Check if the selected database is an Oracle database. /]
[query public isDbOracle(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('ORACLE') and not any.isDbOracle32()/]

[comment : Check if the selected database is an MySql database. /]
[query public isDbMySql(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('MYSQL')/]

[comment : Check if the selected database is an MariaDB database. /]
[query public isDbMariaDB(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('MARIADB')/]

[comment : Check if the selected database is an POSTGRESQL database. /]
[query public isDbPostgresql(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('POSTGRESQL')/]

[comment : Check if the selected database is an SQL Server database. /]
[query public isDbSqlServer(any : ecore::EObject) : Boolean = any.getDataBasesNames().contains('SQLSERVER')/]

[comment : Check if the selected database is an Msql otr MariaDb (Mysql Fork) database. /]
[query public isDbMsqlType(databaseType : String) : Boolean = databaseType.equalsIgnoreCase('Mysql') or databaseType.equalsIgnoreCase('MariaDB')/]

[comment : Check if the selected database is an Oracle database. /]
[query public isDbOracleType(databaseType : String) : Boolean = databaseType.equalsIgnoreCase('Oracle')/]

[comment : Check if the selected database is an Oracle 32 database. /]
[query public isDbOracle32Type(databaseType : String) : Boolean = databaseType.equalsIgnoreCase('Oracle_32')/]

[comment : Check if the selected database is a postgresql database./]
[query public isDbPostgresqlType(databaseType : String) : Boolean = databaseType.equalsIgnoreCase('Postgresql')/]

[comment : Check if the selected database is an h2 database./]
[query public isDbH2Type(databaseType : String) : Boolean = databaseType.equalsIgnoreCase('H2')/]

[comment : Get the paging mode (auto or user). /]
[query public getPagingMode(any : ecore::EObject) : String = any.getPagingMode_invoke()/]

[query public getPagingMode_invoke(any : ecore::EObject) : String = any.getPagingModeJavaService()/]

[comment : Get the header key for total count property. /]
[query public getPagingTotalCountKey(any : ecore::EObject) : String = any.getPagingTotalCountKey_invoke()/]

[query public getPagingTotalCountKey_invoke(any : ecore::EObject) : String = any.getPagingTotalCountKeyJavaService()/]

[comment : Get the header key for page count property. /]
[query public getPagingPageCountKey(any : ecore::EObject) : String = any.getPagingPageCountKey_invoke()/]

[query private getPagingPageCountKey_invoke(any : ecore::EObject) : String = any.getJavaPagingCountJavaService()/]

[comment : Get the header key for current page index property. /]
[query public getPagingCurrentPageIdxKey(any : ecore::EObject) : String = any.getPagingCurrentPageIdxKey_invoke()/]

[query private getPagingCurrentPageIdxKey_invoke(any : ecore::EObject) : String = any.getPagingCurrentPageIdxKeyJavaService()/]

[comment : Display clear value before hashcode for user code, case hashcode is enabled. /]
[query public isClearUserCodeHash(any : ecore::EObject) : Boolean = any.isClearUserCodeHash_invoke().toBoolean()/]

[query private isClearUserCodeHash_invoke(any : ecore::EObject) : String = any.isClearUserCodeHashJavaService()/]

[comment : . /]
[query public useIdSqlSuffixForReferences(any : ecore::EObject) : Boolean = any.useIdSqlSuffixForReferences_invoke().toBoolean()/]

[query private useIdSqlSuffixForReferences_invoke(any : ecore::EObject) : String = any.getUseIdSqlSuffixForReferencesJavaService()/]

[comment : Get the header key for current page size property. /]
[query public getPagingCurrentPageSizeKey(any : ecore::EObject) : String = any.getPagingCurrentPageSizeKey_invoke()/]

[query public getPagingCurrentPageSizeKey_invoke(any : ecore::EObject) : String = any.getPagingCurrentPageSizeKeyJavaService()/]

[query public getLibraryName(any : ecore::EObject, prop : String) : String = (prop + '.name').getConfigValue()/]

[query public getLibraryPackage(any : ecore::EObject, prop : String) : String = (prop + '.package').getConfigValue()/]

[query public getLibraryVersion(any : ecore::EObject, prop : String) : String = (prop + '.version').getConfigValue()/]

[query public getLibraryTablePrefix(any : ecore::EObject, prop : String) : String = (prop + '.table.prefix').getConfigValue()/]

[query public getLibraryDataBaseSchema(any : ecore::EObject, prop : String) : String = (prop + '.database.schema').getConfigValue()/]

[query public isLibraryDatabaseConnected(any : ecore::EObject, prop : String) : Boolean = (prop + '.database').getConfigValue().toString().toBoolean()/]

[comment : Indique si le projet est une application utilisant un serveur. /]
[query public isWebApplication(any : ecore::EObject) : Boolean = 'JSP'.equalsIgnoreCase(any.getClient()) or 'JSF'.equalsIgnoreCase(any.getClient()) or 'GWT'.equalsIgnoreCase(any.getClient()) or any.useWS()/]

[comment : Possibilite (starter) de creer des projets sans utilisation de base de donnees. /]
[query public usePersistence(any : ecore::EObject) : Boolean = any.getDataBasesNames().size() > 0/]

[comment : Set the default user, password, role, url for administration servlet. /]
[query public getDefaultAdminParameter(any : ecore::EObject) : String = 'admin'/]

[comment : Set the default user, password, role, url for monitoring. /]
[query public getDefaultMonitoringParameter(any : ecore::EObject) : String = 'monitoring'/]

[comment : Set the default realm name for server basic http security. /]
[query public getDefaultRealmParameter(any : ecore::EObject) : String = 'file'/]

[**
 * Obtenir une propriete depuis le parametrage.
 * Attention ne surtout jamais renommer cette methode
 * en getProperty() car elle rentrerait en conflit
 * avec une méthode native d'acceleo qui va aussi
 * rechercher des proprietes de configuration mais
 * dans un autre endroit !
*/]
[query public getConfigValue(propertyName : String) : String = propertyName.getConfigValue_invoke()/]

[query private getConfigValue_invoke(propertyName : String) : String = propertyName.get_property()/]

[query public isMultiplicityMany(p : environment::Property) : Boolean = p.multiplicity = environment::MultiplicityKind::ZERO_STAR or p.multiplicity = environment::MultiplicityKind::ONE_STAR/]

[comment : Obtention du fragment d'uri pour le passage des servlets jsp. /]
[query public getJspCtrlUriFragment(any : ecore::EObject) : String = '/ctrl'/]

[comment : Recuperation de la clé pour le nom de la propriete additionnelle (champ auto). /]
[query public nameColumnProperty(columnProp : String) : String = columnProp + '.name'/]

[comment : Recuperation de la clé pour le type de la propriete additionnelle (champ auto). /]
[query public typeColumnProperty(columnProp : String) : String = columnProp + '.type'/]

[comment : Recuperation de la clé pour la taille de la propriete additionnelle (champ auto). /]
[query public sizeColumnProperty(columnProp : String) : String = columnProp + '.size'/]

[comment : Recuperation de la clé pour la valeur de defaut de la propriete additionnelle (champ auto). /]
[query public defaultColumnProperty(columnProp : String) : String = columnProp + '.default'/]

[comment : Recuperation de la clé pour la decription de la propriete additionnelle (champ auto). /]
[query public descriptionColumnProperty(columnProp : String) : String = columnProp + '.comment'/]

[comment : Recuperation de la clé pour la nullite de la propriete additionnelle (champ auto). /]
[query public notnullColumnProperty(columnProp : String) : String = columnProp + '.notnull'/]

[comment : Verifie si il est possible d'ecrire le champ additionnel. /]
[query public hasToWriteColumn(columnProp : String) : Boolean = columnProp.columnHasName(columnProp) and columnProp.columnHasType(columnProp)/]

[query public columnHasName(any : ecore::EObject, columnProp : String) : Boolean = columnProp.nameColumnProperty().getConfigValue() <> null and columnProp.nameColumnProperty().getConfigValue().trim().size() > 0/]

[query public columnHasType(void : ecore::EObject, columnProp : String) : Boolean = columnProp.typeColumnProperty().getConfigValue() <> null and columnProp.typeColumnProperty().getConfigValue().trim().size() > 0/]

[query public columnHasDefault(void : ecore::EObject, columnProp : String) : Boolean = columnProp.defaultColumnProperty().getConfigValue() <> null and columnProp.defaultColumnProperty().getConfigValue().trim().size() > 0/]

[query public columnHasSize(void : ecore::EObject, columnProp : String) : Boolean = columnProp.sizeColumnProperty().getConfigValue() <> null and columnProp.sizeColumnProperty().getConfigValue().trim().size() > 0/]

[query public columnNotNull(void : ecore::EObject, columnProp : String) : Boolean = void.get_notNullColumn(columnProp) <> null and (void.get_notNullColumn(columnProp).equalsIgnoreCase('1') or void.get_notNullColumn(columnProp).equalsIgnoreCase('true'))/]

[query private get_notNullColumn(any : ecore::EObject, columnProp : String) : String = columnProp.notnullColumnProperty().getConfigValue()/]

[comment : Check if the application has a web client. /]
[query public hasWebClient(any : ecore::EObject) : Boolean = any.getClient() = null and any.getClient().trim().size() > 0 and ('jsp'.equalsIgnoreCase(any.getClient()) or 'jsf'.equalsIgnoreCase(any.getClient()) or 'gwt'.equalsIgnoreCase(any.getClient()))/]
