[module reqEnum('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/requirement/1.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::requirement::commons/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::names/]

[comment encoding = UTF-8 /]
[comment ncode une propriété en Javadoc/]
[query private encodeJavadoc(label : String, attribute : String) : String = if not (attribute = null) and attribute.size() > 0 then ' <br>\r\n    * ' + label + attribute.replaceAll('\r\n', ' <br>\r\n    * ').replaceAll('\t', '   ').trim() else '' endif/]

[template public reqEnum(racine : requirement::Repository)]
  [racine.reqEnumGenerique(racine.buildPackageRequirement(), 'Enumération des exigences.', 'requirement'.apply_classEnum(), 'requirement version'.apply_classTest(), racine.mainCategories->asSequence(), racine.requirementBaseCategoryLevel() - 1)/][/template]

[template public reqEnum(cat : requirement::Category)]
  [cat.reqEnumGenerique(cat.buildPackageRequirementForCategory(), 'Enumération des exigences : ' + cat.name + '.', ('requirement ' + cat.id).apply_classEnum(), ('requirement ' + cat.id + ' version').apply_classTest(), Sequence{cat}, 1 - )/][/template]

[template private reqEnumGenerique(void : ecore::EObject, pkg : String, javadoc : String, nomEnum : String, nomVersionTest : String, categories : Sequence(requirement::Category), profondeurMax : Integer)]
  [void.licence()/]
  // CHECKSTYLE:OFF
  package [pkg/];
  // CHECKSTYLE:ON
  
  import fr.spi4j.requirement.Requirement_Itf;
  import fr.spi4j.requirement.RequirementsUtil;
  
  /**
   * [javadoc/]
   * @author [void.getAuthorName()/]
   */
  public enum [nomEnum/] implements Requirement_Itf
  {
  [for (req : requirement::Requirement | categories->asSequence()->findRequirements(profondeurMax))]
       /**
        * [req.name/] :[''.encodeJavadoc(req.statement)/]['Provenance : '.encodeJavadoc(req.rationale)/]['Critère d\'acceptance : '.encodeJavadoc(req.acceptanceCriteria)/]<br>
        * Voir [nomVersionTest/]#testVersion_[req.getServiceRequirementsPrefix()/][req.id/]()
        */
    [for (o : ecore::EObject | req.referencedObject)]
      [if (o.oclIsKindOf(soa::Operation))]
           // Exigence utilisée dans : [o.ancestors(soa::Service)->first().name/]Service.[o.oclAsType(soa::Operation).name/]
      [/if]
    [/for]
       [req.getServiceRequirementsPrefix()/][req.id/]("[req.name.escape()/]", "[req.version/]")[if (req <> categories->collect(temp1 | temp1.eAllContents(requirement::Requirement))->last())],[else];[/if]
    
    
  [/for]
     /** Id. */
     private final String ['id'.apply_attributeFinal()/];
  
     /** Nom. */
     private final String ['name'.apply_attributeFinal()/];
  
     /** La version de l'exigence dans le modèle Requirement */
     private final String ['version model'.apply_attributeFinal()/];
  
     /** La version implémentée. */
     private String ['version implem'.apply_attributeDefault()/];
  
     /**
      * Constructeur de l'énumeration de l'exigence.
      * @param ['name'.apply_parameterMethodClassicIn()/]
      *           le nom.
      * @param ['version model'.apply_parameterMethodClassicIn()/]
      *           La version de l'exigence dans la modélisation.
      */
     private [nomEnum/] (final String ['name'.apply_parameterMethodClassicIn()/], final String ['version model'.apply_parameterMethodClassicIn()/])
     {
        [void.getAffectationPrefix()/]['id'.apply_attributeFinal()/] = toString().substring("[void.getServiceRequirementsPrefix()/]".length());
        [void.getAffectationPrefix()/]['name'.apply_attributeFinal()/] = ['name'.apply_parameterMethodClassicIn()/];
        [void.getAffectationPrefix()/]['version model'.apply_attributeFinal()/] = ['version model'.apply_parameterMethodClassicIn()/];
     }
  
     @Override
     public String getId ()
     {
        return ['id'.apply_attributeFinal()/];
     }
  
     @Override
     public String getName ()
     {
        return ['name'.apply_attributeFinal()/];
     }
  
     @Override
     public void set_versionImplem ()
     {
        set_versionImplem(c_notImplemented);
     }
  
     @Override
     public String get_versionImplem ()
     {
        return ['version implem'.apply_attributeDefault()/];
     }
  
     @Override
     public void set_versionImplem (final String ['version implem'.apply_parameterMethodClassicIn()/])
     {
        // Vérifier que la version implémentée est égale à celle de la modélisation
        RequirementsUtil.checkRequirementVersion(this, ['version implem'.apply_parameterMethodClassicIn()/]);
        // Si version pas encore affectée
        [void.getAffectationPrefix()/]['version implem'.apply_attributeDefault()/] = ['version implem'.apply_parameterMethodClassicIn()/];
     }
  
     @Override
     public String get_versionModel ()
     {
        return ['version model'.apply_attributeFinal()/];
     }
  }[/template]