[module reqVersionTest('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/requirement/1.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::requirement::commons/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::requirement::requirements::ReqVersionTest_Sce/]

[comment encoding = UTF-8 /]
[template public reqVersionTest(racine : requirement::Repository)]
  [racine.reqVersionTestGenerique(racine.buildPackageRequirement(), 'Toutes les exigences du projet.', 'requirement'.apply_classEnum(), 'requirement version'.apply_classTest(), racine.mainCategories->asSequence(), racine.requirementBaseCategoryLevel() - 1)/][/template]

[template public reqVersionTest(cat : requirement::Category)]
  [cat.reqVersionTestGenerique(cat.buildPackageRequirementForCategory(), 'Exigences de ' + cat.name + '.', ('requirement ' + cat.id).apply_classEnum(), ('requirement ' + cat.id + ' version').apply_classTest(), Sequence{cat}, -1)/][/template]

[template private reqVersionTestGenerique(e : ecore::EObject, pkg : String, javadoc : String, nomReqEnum : String, nomVersionTest : String, categories : Sequence(requirement::Category), profondeurMax : Integer)]
  [e.licence()/]
  // CHECKSTYLE:OFF
  package [pkg/];
  // CHECKSTYLE:ON
  
  import org.junit.jupiter.api.Test;
  
  /**
   * Tests de vérification de version pour chaque exigence entre la modèlisation et l'implémentation courante.<br>
   * [javadoc/]
   * @author [e.getAuthorName()/]
   */
  // Annotation for class
  [protected (e.getUserCodeId('Annotation for class')) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  public class [nomVersionTest/]
  {
  [for (req : requirement::Requirement | categories->asSequence()->findRequirements(profondeurMax))]
       /**
        * Vérifier que la version de l'exigence [req.getServiceRequirementsPrefix()/][req.id/] est la même entre la modèlisation et l'implémentation courante.
        * @see [nomReqEnum/]#[req.getServiceRequirementsPrefix()/][req.id/]
        */
       @Test
       public void testVersion_[req.getServiceRequirementsPrefix()/][req.id/] ()
       {
          // Version de la modélisation : "[req.version/]"
          [protected (e.getUserCodeId('testVersion_' + req.getServiceRequirementsPrefix() + req.id)) startTagPrefix('// ') endTagPrefix('// ')]
            // TODO Affecter le No de la version d'implémentation lorsque celle-ci sera conforme avec celle de la modélisation
            [nomReqEnum/].[req.getServiceRequirementsPrefix()/][req.id/].set_versionImplem([req.getTestRequirementVersionningInitial()/]);
          [/protected]
       }
    
  [/for]
  }[/template]

[**
 * Obtenir le versionning initial pour le test unitaire vérifiant la concordance entre le modèle et l'implémentation
*/]
[query private getTestRequirementVersionningInitial(p_req : requirement::Requirement) : String = p_req.getTestRequirementVersionningInitial_invoke()/]