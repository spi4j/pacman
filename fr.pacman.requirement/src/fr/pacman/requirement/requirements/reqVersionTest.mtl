[comment encoding = UTF-8 /]
[module reqVersionTest('http://www.eclipse.org/emf/2002/Ecore',
                       'http://www.obeonetwork.org/dsl/requirement/1.0',
                       'http://www.obeonetwork.org/dsl/soa/4.0.0',
                       'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::classes /]

[import fr::pacman::commons::convention::rule::classRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::requirement::commons /]

[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::imports /]

[template public reqVersionTest(racine : Repository)]
[reqVersionTestGenerique(racine, buildPackageRequirement(), 'Toutes les exigences du projet.', apply_classEnum('requirement'), apply_classTest('requirement version'), racine.mainCategories->asSequence(), requirementBaseCategoryLevel() - 1)/]
[/template]

[template public reqVersionTest(cat : Category)]
[reqVersionTestGenerique(cat, buildPackageRequirementForCategory(cat), 'Exigences de ' + cat.name + '.', apply_classEnum('requirement ' + cat.id), apply_classTest('requirement ' + cat.id + ' version'), Sequence{cat}, -1)/]
[/template]

[template private reqVersionTestGenerique(e : OclAny, pkg : String, javadoc : String, nomReqEnum : String, nomVersionTest : String, categories : Sequence(Category), profondeurMax : Integer)]
[licence()/]
// CHECKSTYLE:OFF
package [pkg/];
// CHECKSTYLE:ON

import org.junit.jupiter.api.Test;

/**
 * Tests de vérification de version pour chaque exigence entre la modèlisation et l'implémentation courante.<br>
 * [javadoc/]
 * @author [getAuthorName()/]
 */
// Annotation for class
// [protected (e.getUserCodeId('Annotation for class'))]
// [/protected]
public class [nomVersionTest/]
{
[for (req : Requirement | findRequirements(categories, profondeurMax))]
   /**
    * Vérifier que la version de l'exigence [getServiceRequirementsPrefix()/][req.id /] est la même entre la modèlisation et l'implémentation courante.
    * @see [nomReqEnum/]#[getServiceRequirementsPrefix()/][req.id /]
    */
   @Test
   public void testVersion_[getServiceRequirementsPrefix()/][req.id /] ()
   {
      // Version de la modélisation : "[req.version/]"
      // [protected (e.getUserCodeId('testVersion_' + getServiceRequirementsPrefix() + req.id))]
      // TODO Affecter le No de la version d'implémentation lorsque celle-ci sera conforme avec celle de la modélisation
      [nomReqEnum/].[getServiceRequirementsPrefix()/][req.id /].set_versionImplem([getTestRequirementVersionningInitial(req)/]);
      // [/protected]
   }

[/for]
}
[/template]

[**
 * Obtenir le versionning initial pour le test unitaire vérifiant la concordance entre le modèle et l'implémentation
*/]
[query private getTestRequirementVersionningInitial(p_req : Requirement) : String
    = invoke('fr.pacman.requirement.requirements.ReqVersionTest_Sce', 'getTestRequirementVersionningInitial_invoke(org.obeonetwork.dsl.requirement.Requirement)', Sequence{p_req})
/]



