[module dispatcher('http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::cinematic::jsp::common::names/]
[import fr::pacman::cinematic::jsp::common::services/]
[import fr::pacman::cinematic::api::common::model/]
[import fr::pacman::cinematic::api::common::packages/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::commonRule/]

[comment encoding = UTF-8 /]
[template public applicationDispatcher(root : cinematic::CinematicRoot) post(self.trim())]
  [root.licence()/]
  package [root.getApplicationPackage()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [root.writeImports()/]
    
  [/protected]
  
  
  /**
   * Enumeration déstinée à effectuer la concentration de l'ensemble des routes
   * de l'application.
   *
   * @author [root.getAuthorName()/]
   */
  public enum [root.buildJspDispatcherClassName()/] implements JspDispatcherEnum_Itf {
  
  	// Placer ici des énumérations supplémentaires si besoin.	
  	
  	// define enumeration sub controllers
  	[protected (root.getUserCodeId('define enumeration sub controllers')) startTagPrefix('// ') endTagPrefix('// ')]
     
   [/protected]
  
  
  [for (viewState : flow::ViewState | root.eAllContents(flow::ViewState))]
    	[(viewState.getJspControllerForDispatcherClassName() + '_init').apply_attributeEnum()/]([viewState.getDispatchForInit()/], false),
    
    [for (viewContainer : view::ViewContainer | viewState.viewContainers)]
      [if (viewContainer.isViewPanel())]
        [for (event : view::ViewEvent | viewContainer.getEventsForViewContainer())]
          [if (not (event.name = null))]
            	[(viewState.getJspControllerForDispatcherClassName() + '_' + event.getEventName()).apply_attributeEnum()/]([viewState.getDispatch(event)/], false),
            
          [else]
            	// FIXME : Un événement ne porte pas de nom ! Attention à nommer tous les événements 
            	// des transitions issues de l'état : [viewState.nameViewStateImplementation()/]
            
          [/if]
        [/for]
      [/if]
    [/for]
  [/for]
  	['systemViewState_error'.apply_attributeEnum()/]("[root.getDispatchForError()/]", true, false);
  
  	/**
  	 * La chaine de routage pour le request dispatcher.
  	 */
  	private final String ['dispatch'.apply_attributeFinal()/];
  
  	/**
  	 * La demande de redirection pour le request dispatcher.
  	 */
  	private final boolean ['redirect'.apply_attributeFinal()/];
  
  	/**
  	 * Indique si la route est issue du menu principal de l'application.
  	 */
  	private final boolean ['menu'.apply_attributeFinal()/];
  
  	/**
  	 * Contructeur pour l'énumération.
  	 * 
  	 * @param ['dispatch'.apply_parameterMethodClassicIn()/] : la chaine de routage pour la méthode.
  	 * @param ['redirect'.apply_parameterMethodClassicIn()/] : une redirection est elle demandée ?
  	 * @param ['menu'.apply_parameterMethodClassicIn()/] : la chaine provient elle du menu principal ?
  	 */
  	[root.buildJspDispatcherClassName()/] (final String ['dispatch'.apply_parameterMethodClassicIn()/], 
  		final boolean ['redirect'.apply_parameterMethodClassicIn()/], 
  		final boolean ['menu'.apply_parameterMethodClassicIn()/]) {
  		[root.getAffectationPrefix()/]['dispatch'.apply_attributeFinal()/] = ['dispatch'.apply_parameterMethodClassicIn()/];
  		[root.getAffectationPrefix()/]['redirect'.apply_attributeFinal()/] = ['redirect'.apply_parameterMethodClassicIn()/];
  		[root.getAffectationPrefix()/]['menu'.apply_attributeFinal()/] = ['menu'.apply_parameterMethodClassicIn()/];
  	}
  
  	/**
  	 * Permet de savoir si une redirection est nécessaire pour le
  	 * 'requestDispatcher'.
  	 */
  	public boolean ['redirect'.apply_methodDefault()/](){
  		return ['redirect'.apply_attributeFinal()/];
  	}
  
  	/**
  	 * Permet de savoir si la route provient du menu principal de l'application (un
  	 * menu dans le header de la page).
  	 */
  	public boolean ['menu'.apply_methodDefault()/](){
  		return ['menu'.apply_attributeFinal()/];
  	}
  
  	/**
  	 * Retourne la chaine de routage complétée avec les informations racine.
  	 * <p>
  	 * (si le dévelopeur désire modifier la racine des appels aux controlleurs, ne
  	 * pas oublier d'effectuer aussi la modification au niveau du fichier de
  	 * configuration 'web.xml' pour le contrôleur principal).
  	 */
  	public String ['dispatch'.apply_methodDefault()/](){
  		
  		// Modifier ici la chaine de routage si besoin.		
  
  		// ['dispatch'.apply_methodDefault()/]
  		[protected (root.getUserCodeId('dispatch'.apply_methodDefault())) startTagPrefix('// ') endTagPrefix('// ')]
      
      		if(['redirect'.apply_methodDefault()/]()){
      			return "[root.getJspCtrlUriFragment()/]" + ['dispatch'.apply_attributeFinal()/];
      		} else {
      			return  "[root.getJspPageUriFragment()/]" + ['dispatch'.apply_attributeFinal()/];
      		}
    [/protected]
  
  	}
  }[/template]

[comment : On considere un seul conteneur pour un controleur ! /]
[template private getDispatch(viewState : flow::ViewState, event : view::ViewEvent) post(self.trim())]
  [if (not (viewState.getNextViewStateFromEvent(event) = null))]
    "/[viewState.getNextViewStateFromEvent(event).nameViewStateImplementation()/]", true
  [else][viewState.getDispatchForInit()/][/if][/template]

[comment : On considere un seul conteneur pour un controleur !  /]
[template private getDispatchForInit(viewState : flow::ViewState) post(self.trim())]
  [let viewContainer : view::ViewContainer = viewState.viewContainers->first()]
    "[viewContainer.packageHierarchy().replaceAll('\\.', '/')/]/[viewContainer.nameViewImplementation()/].jsp", false
  [/let]
[/template]

[comment : recuperation du routage pour la page d'erreur. /]
[template private getDispatchForError(any : ecore::EObject) post(self.trim())]
  [if (any.hasErrorView())]/[any.getErrorState().nameViewStateImplementation()/][else]/defaultErrorView.jsp[/if][/template]

[comment : Write all imports for the dispatcher./]
[template private writeImports(root : cinematic::CinematicRoot) post(self.trim())]
  [root.initImports(false)/]
  
  [root.addImport('fr.spi4j.ui.jsp.JspDispatcherEnum_Itf')/]
  
  [root.flushImports()/][/template]
