[comment encoding = UTF-8 /]
[module services(	'http://www.obeonetwork.org/dsl/environment/3.0.0',
					'http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::utils /]


[query public isHeaderController(viewState : ViewState) : Boolean =
	not viewState.getHeaderState().oclIsUndefined() 
    and viewState.getHeaderState().technicalid.equalsIgnoreCase(viewState.technicalid)
/]

[query public isFooterController(viewState : ViewState) : Boolean =
	not viewState.getFooterState().oclIsUndefined() 
    and viewState.getFooterState().technicalid.equalsIgnoreCase(viewState.technicalid)
/]

[query public isReferentialController(viewState : ViewState) : Boolean =
	not viewState.getReferentialState().oclIsUndefined() 
    and viewState.getReferentialState().technicalid.equalsIgnoreCase(viewState.technicalid)
/]

[query public isErrorController(viewState : ViewState) : Boolean =
	not viewState.getErrorState().oclIsUndefined() 
    and viewState.getErrorState().technicalid.equalsIgnoreCase(viewState.technicalid)
/]

[query public getImageName(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'IMAGE_NAME'})
/]

[query public getScope(transition : Transition) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{transition.metadatas, 'SCOPE'})
/]

[query public getMaxlenght(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'MAXLENGTH'})
/]

[query public getDefaultValue(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'DEFAULT_VALUE'})
/]

[query public getJsFunction(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'JS_FUNCTION'})
/]

[query public getCustomCode(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'CUSTOM_CODE'})
/]

[query public getUrlCustomParams(viewElement : AbstractViewElement) : String =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'getAnnotationBody(org.obeonetwork.dsl.environment.MetaDataContainer, java.lang.String)', 
    Sequence{viewElement.metadatas, 'CUSTOM_URL_PARAMS'})
/]

[query public hasJSFunctions(e : ObeoDSMObject) : Boolean =
	invoke('fr.pacman.commons.services.AnnotationUtils', 
    'annotationExistsRecursively(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String)', 
    Sequence{e, 'JSP_JS_FUNCTION'})
/]

[query public storeCurrentFormLayout(layout : Layout) : String =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 
    'set_currentFormLayout(org.obeonetwork.dsl.cinematic.view.Layout)', 
    Sequence{layout})
/]

[query public getCurrentFormLayout(any : OclAny) : Layout =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 
    'get_currentFormLayout()', 
    Sequence{})
/]

[query public initCinematic(root : CinematicRoot) : Boolean =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 
    'init(org.obeonetwork.dsl.cinematic.CinematicRoot)', 
    Sequence{root})
/]

[query public getDivId( any : OclAny, pageName : String) : String = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 
    'get_divId(java.lang.String)', Sequence{ pageName })
/]

[query public hasToWriteHeaderView (viewContainer : ViewContainer) : Boolean = 
	viewContainer.hasHeaderView() and (not viewContainer.isMainPanel()
	and not viewContainer.isHeaderPanel() or forceJspTopBottom())
/]

[query public hasToWriteFooterView (viewContainer : ViewContainer) : Boolean = 
	viewContainer.hasFooterView() and (not viewContainer.isMainPanel() 
	and not viewContainer.isFooterPanel() or viewContainer.forceJspTopBottom())
/]

[query public hasToWriteReferential (viewContainer : ViewContainer) : Boolean = 
	viewContainer.hasReferential() and not viewContainer.isMainPanel() 
/]

[query private isOfType(viewElement : AbstractViewElement, type : String) : Boolean =
	not viewElement.widget.oclIsUndefined() and viewElement.widget.name.equalsIgnoreCase(type)
/]

[query private getHeaderState(any : OclAny) : ViewState =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_headerState()', Sequence{})
/]

[query public getErrorState(any : OclAny) : ViewState =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_errorState()', Sequence{})
/]

[query private getFooterState(any : OclAny) : ViewState =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_footerState()', Sequence{})
/]

[query public getReferentialState(any : OclAny) : ViewState = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_referentialState()', Sequence{})
/]

[query public getRootState(any : OclAny) : ViewState = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_rootState()', Sequence{})
/]

[query public hasReferential(any : OclAny) : Boolean =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'hasReferentialContainer()', Sequence{})
/]

[query public hasErrorView(any : OclAny) : Boolean =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'hasErrorContainer()', Sequence{})
/]

[query private hasHeaderView(any : OclAny) : Boolean =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'hasHeaderContainer()', Sequence{})
/]

[query private hasFooterView(any : OclAny) : Boolean =
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'hasFooterContainer()', Sequence{})
/]

[query public getHeaderView(any : OclAny) : ViewContainer = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_headerContainer()', Sequence{})
/]

[query public getFooterView(any : OclAny) : ViewContainer = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_footerContainer()', Sequence{})
/]

[query public getErrorView(any : OclAny) : ViewContainer = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_errorContainer()', Sequence{})
/]

[query public getReferentialView(any : OclAny) : ViewContainer = 
	invoke('fr.pacman.cinematic.jsp.services.CinematicJspModelServices', 'get_referentialContainer()', Sequence{})
/]

[query public isLayoutVirtual(layout : Layout) : Boolean = 
	layout.viewElement.oclIsUndefined()
/]

[query public isLayoutFormContainer(layout : Layout) : Boolean = 
 	not layout.viewElement.oclIsUndefined() and layout.viewElement.isFormPanel()
/]

[query public getLayoutName(layout : Layout) : String = 
	if not layout.oclIsUndefined() 
	and not layout.isLayoutVirtual() then layout.viewElement.name else 'virtual' endif
/]

[query public getLayoutType(layout : Layout) : String = 
	if not layout.oclIsUndefined() 
	and not layout.isLayoutVirtual() then layout.viewElement.widget.name else 'virtual' endif
/]

[query public getLayoutSyle(layout : Layout) : ViewStyle = 
	if not layout.oclIsUndefined() 
	and not layout.viewElement.oclIsUndefined() then  layout.viewElement.viewStyle else null endif
/]

[query public getLayoutElement(layout : Layout) : AbstractViewElement = 
	if not layout.oclIsUndefined() 
	and not layout.viewElement.oclIsUndefined() then  layout.viewElement else null endif
/]

[query public getEventName(viewEvent : Event) : String = 
	viewEvent.name
/]

[query public isControllerAttribut (viewElement : AbstractViewElement) : Boolean =  
	viewElement.isText() or 
	viewElement.isPassword() or 
	viewElement.isTextarea() or 
	viewElement.isCombobox()
/]

[comment : Modifier tout ca pour faire un nouveau toolkit. /]
[query public isMainPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('MainPanel') /]
[query public isFooterPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('FooterPanel') /]
[query public isHeaderPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('HeaderPanel') /]
[query public isErrorPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('ErrorPanel')/]
[query public isFormPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('FormPanel') /]
[query public isPage(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('File') /]
[query public isTable(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Table') /]
[query public isPanel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('ViewPanel') /]
[query public isText(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Text') /]
[query public isTextarea(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Textarea') /]
[query public isCheckbox(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('CheckBox') /]
[query public isRadio(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Radio') /]
[query public isButtonSubmit(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('SubmitButton') /]
[query public isButtonSimple(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('SimpleButton') /]
[query public isPassword(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Password') /]
[query public isImage(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Image') /]
[query public isLink(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Link') /]
[query public isImageLink(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('ImageLink') /]
[query public isCombobox(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('ComboBox') /]
[query public isLabel(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Label') /]
[query public isDate(viewElement : AbstractViewElement) : Boolean = viewElement.isOfType('Date') /]
[query public isViewPanel(viewElement : AbstractViewElement) : Boolean = not viewElement.isFormPanel() /]



