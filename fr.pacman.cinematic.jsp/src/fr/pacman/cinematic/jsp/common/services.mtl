[module services('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::cinematic::jsp::services::CinematicJspModelServices/]
[import fr::pacman::commons::services::AnnotationUtils/]

[comment encoding = UTF-8 /]
[query public isHeaderController(viewState : flow::ViewState) : Boolean = not (viewState.getHeaderState() = null) and viewState.getHeaderState().technicalid.equalsIgnoreCase(viewState.technicalid)/]

[query public isFooterController(viewState : flow::ViewState) : Boolean = not (viewState.getFooterState() = null) and viewState.getFooterState().technicalid.equalsIgnoreCase(viewState.technicalid)/]

[query public isReferentialController(viewState : flow::ViewState) : Boolean = not (viewState.getReferentialState() = null) and viewState.getReferentialState().technicalid.equalsIgnoreCase(viewState.technicalid)/]

[query public isErrorController(viewState : flow::ViewState) : Boolean = not (viewState.getErrorState() = null) and viewState.getErrorState().technicalid.equalsIgnoreCase(viewState.technicalid)/]

[query public getImageName(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('IMAGE_NAME')/]

[query public getScope(transition : flow::Transition) : String = transition.metadatas.getAnnotationBody('SCOPE')/]

[query public getMaxlenght(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('MAXLENGTH')/]

[query public getDefaultValue(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('DEFAULT_VALUE')/]

[query public getJsFunction(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('JS_FUNCTION')/]

[query public getCustomCode(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('CUSTOM_CODE')/]

[query public getUrlCustomParams(viewElement : view::AbstractViewElement) : String = viewElement.metadatas.getAnnotationBody('CUSTOM_URL_PARAMS')/]

[query public hasJSFunctions(e : environment::ObeoDSMObject) : Boolean = e.annotationExistsRecursively('JSP_JS_FUNCTION')/]

[query public storeCurrentFormLayout(layout : view::Layout) : String = layout.set_currentFormLayout()/]

[query public getCurrentFormLayout(any : ecore::EObject) : view::Layout = any.get_currentFormLayoutJavaService()/]

[query public initCinematic(root : cinematic::CinematicRoot) : Boolean = root.init()/]

[query public getDivId(any : ecore::EObject, pageName : String) : String = pageName.get_divId()/]

[query public hasToWriteHeaderView(viewContainer : view::ViewContainer) : Boolean = viewContainer.hasHeaderView() and (not viewContainer.isMainPanel() and not viewContainer.isHeaderPanel() or viewContainer.forceJspTopBottom())/]

[query public hasToWriteFooterView(viewContainer : view::ViewContainer) : Boolean = viewContainer.hasFooterView() and (not viewContainer.isMainPanel() and not viewContainer.isFooterPanel() or viewContainer.forceJspTopBottom())/]

[query public hasToWriteReferential(viewContainer : view::ViewContainer) : Boolean = viewContainer.hasReferential() and not viewContainer.isMainPanel()/]

[query private isOfType(viewElement : view::AbstractViewElement, type : String) : Boolean = not (viewElement.widget = null) and viewElement.widget.name.equalsIgnoreCase(type)/]

[query private getHeaderState(any : ecore::EObject) : flow::ViewState = any.get_headerStateJavaService()/]

[query public getErrorState(any : ecore::EObject) : flow::ViewState = any.get_errorStateJavaService()/]

[query private getFooterState(any : ecore::EObject) : flow::ViewState = any.get_footerStateJavaService()/]

[query public getReferentialState(any : ecore::EObject) : flow::ViewState = any.get_referentialStateJavaService()/]

[query public getRootState(any : ecore::EObject) : flow::ViewState = any.get_rootStateJavaService()/]

[query public hasReferential(any : ecore::EObject) : Boolean = any.hasReferentialContainerJavaService()/]

[query public hasErrorView(any : ecore::EObject) : Boolean = any.hasErrorContainerJavaService()/]

[query private hasHeaderView(any : ecore::EObject) : Boolean = any.hasHeaderContainerJavaService()/]

[query private hasFooterView(any : ecore::EObject) : Boolean = any.hasFooterContainerJavaService()/]

[query public getHeaderView(any : ecore::EObject) : view::ViewContainer = any.get_headerContainerJavaService()/]

[query public getFooterView(any : ecore::EObject) : view::ViewContainer = any.get_footerContainerJavaService()/]

[query public getErrorView(any : ecore::EObject) : view::ViewContainer = any.get_errorContainerJavaService()/]

[query public getReferentialView(any : ecore::EObject) : view::ViewContainer = any.get_referentialContainerJavaService()/]

[query public isLayoutVirtual(layout : view::Layout) : Boolean = layout.viewElement = null/]

[query public isLayoutFormContainer(layout : view::Layout) : Boolean = not (layout.viewElement = null) and layout.viewElement.isFormPanel()/]

[query public getLayoutName(layout : view::Layout) : String = if not (layout = null) and not layout.isLayoutVirtual() then layout.viewElement.name else 'virtual' endif/]

[query public getLayoutType(layout : view::Layout) : String = if not (layout = null) and not layout.isLayoutVirtual() then layout.viewElement.widget.name else 'virtual' endif/]

[query public getLayoutSyle(layout : view::Layout) : view::ViewStyle = if not (layout = null) and not (layout.viewElement = null) then layout.viewElement.viewStyle else null endif/]

[query public getLayoutElement(layout : view::Layout) : view::AbstractViewElement = if not (layout = null) and not (layout.viewElement = null) then layout.viewElement else null endif/]

[query public getEventName(viewEvent : cinematic::Event) : String = viewEvent.name/]

[query public isControllerAttribut(viewElement : view::AbstractViewElement) : Boolean = viewElement.isText() or viewElement.isPassword() or viewElement.isTextarea() or viewElement.isCombobox()/]

[comment : Modifier tout ca pour faire un nouveau toolkit. /]
[query public isMainPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('MainPanel')/]

[query public isFooterPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('FooterPanel')/]

[query public isHeaderPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('HeaderPanel')/]

[query public isErrorPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('ErrorPanel')/]

[query public isFormPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('FormPanel')/]

[query public isPage(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('File')/]

[query public isTable(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Table')/]

[query public isPanel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('ViewPanel')/]

[query public isText(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Text')/]

[query public isTextarea(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Textarea')/]

[query public isCheckbox(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('CheckBox')/]

[query public isRadio(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Radio')/]

[query public isButtonSubmit(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('SubmitButton')/]

[query public isButtonSimple(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('SimpleButton')/]

[query public isPassword(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Password')/]

[query public isImage(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Image')/]

[query public isLink(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Link')/]

[query public isImageLink(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('ImageLink')/]

[query public isCombobox(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('ComboBox')/]

[query public isLabel(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Label')/]

[query public isDate(viewElement : view::AbstractViewElement) : Boolean = viewElement.isOfType('Date')/]

[query public isViewPanel(viewElement : view::AbstractViewElement) : Boolean = not viewElement.isFormPanel()/]