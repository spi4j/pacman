[comment encoding = UTF-8 /]
[module generateCinematicJsp('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]

[import fr::pacman::cinematic::jsp::files::genDispatcher /]
[import fr::pacman::cinematic::jsp::files::genController /]
[import fr::pacman::cinematic::jsp::files::genView /]
[import fr::pacman::cinematic::jsp::common::services /]

[template public generate(root : CinematicRoot)]
[comment @main /]
[comment : package client.ui.jsp /]
[comment : generation des sous controleurs et du dispatcher general. /]
[for (clientType : String | getClientTypes())]
    [if 'jsp'.equalsIgnoreCase(clientType)]
	[comment : preparation du traitement avec le stockage en-tete, referentiel, pied de page ... /]
	[root.initCinematic()/]
	[comment : generation du dispatcher (ensemble des routes) general pour l'application. /]
	[root.genApplicationDispatcher()/]
	[comment : generation de la page d'index. /]
	[root.genViewIndex() /]
	[comment : generation de la zone de messages. /]
	[root.genViewMessenger() /]
	[comment : generation de la page d'erreur si non definie en modelisation. /]
	[if not hasErrorView()][root.genViewError() /][/if]
	[comment : generation pour les sous controleurs. /]
	[for (viewState : ViewState | root.eAllContents(ViewState))]
		[comment : on boucle mais en fait on authorise 1 seule vue pour un controleur!!! ) /]
		[comment : a l'identique des autres cinematiques... /]
		[for (viewContainer : ViewContainer | viewState.viewContainers)]
		[comment : on teste si le conteneur n'est pas de type form./]
		[comment : permet de contrer un bug sur les transitions recursives. /]
		[if viewContainer.isViewPanel()]
		[genController(viewContainer, viewState)/]
		[genView(viewContainer, viewState)/][/if]
		[/for]
	[/for]
	[/if]
[/for]
[/template]
