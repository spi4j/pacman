/**
 * (C) Copyright Ministere des Armees (France)
 *
 * Apache License 2.0
 */
package fr.application.business.api.annuaire.fetching;
// Start of user code for imports

import fr.application.business.api.annuaire.PersonneAttributes_Enum;
import fr.application.business.api.annuaire.PersonneDto;
import fr.application.business.api.ref.fetching.GradeFetchingStrategy;
import fr.spi4j.business.dto.AttributesNames_Itf;
import fr.spi4j.business.dto.Dto_Itf;
import fr.spi4j.business.fetching.FetchingStrategy_Abs;
import jakarta.xml.bind.annotation.XmlElement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

// End of user code

/**
 * Suite de test 'PersonneFetchingStrategy'.
 * @author safr@n
 */
// Annotation for class
// Start of user code Annotation for class
// End of user code
public class PersonneFetchingStrategy_Test extends FetchingStrategyTester_Abs
{

   /**
    * Test de fetchGrade.
    */
   @Test
   public void testFetchGrade ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchGrade();
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de withGrade.
    */
   @Test
   public void testWithGrade ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withGrade().endGrade();
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de fetchMarieAvec.
    */
   @Test
   public void testFetchMarieAvec ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchMarieAvec();
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de withMarieAvec.
    */
   @Test
   public void testWithMarieAvec ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withMarieAvec().endMarieAvec();
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de fetchTabAdresses.
    */
   @Test
   public void testFetchTabAdresses ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchTabAdresses();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de withAdresses.
    */
   @Test
   public void testWithAdresses ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withTabAdresses().endTabAdresses();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de fetchTabParentDe.
    */
   @Test
   public void testFetchTabParentDe ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchTabParentDe();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de withParentDe.
    */
   @Test
   public void testWithParentDe ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withTabParentDe().endTabParentDe();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de fetchTabPays.
    */
   @Test
   public void testFetchTabPays ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchTabPays();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonnePaysFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
   }

   /**
    * Test de withPays.
    */
   @Test
   public void testWithPays ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withTabPays().endTabPays();
      assertFetched(v_fs);
      assertFetched(v_fs.getTabPersonnePaysFetchingStrategy());
      assertNotFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertNotFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertNotFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
   }

   /**
    * Test de fetchAll.
    */
   @Test
   public void fetchAll ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().fetchGrade().fetchMarieAvec().fetchTabAdresses().fetchTabParentDe().fetchTabPays();
      assertNotNull(v_fs.getChildren());
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   /**
    * Test de withAll.
    */
   @Test
   public void withAll ()
   {
      final PersonneFetchingStrategy v_fs = new PersonneFetchingStrategy().withGrade().endGrade().withMarieAvec().endMarieAvec().withTabAdresses().endTabAdresses().withTabParentDe().endTabParentDe().withTabPays().endTabPays();
      assertFetched(v_fs);
      assertFetched(v_fs.getPersonneGradeFetchingStrategy());
      assertFetched(v_fs.getPersonneMarieAvecFetchingStrategy());
      assertFetched(v_fs.getTabPersonneAdressesFetchingStrategy());
      assertFetched(v_fs.getTabPersonneParentDeFetchingStrategy());
      assertFetched(v_fs.getTabPersonnePaysFetchingStrategy());
   }

   // specific methods
   // Start of user code specific methods

   // End of user code
}