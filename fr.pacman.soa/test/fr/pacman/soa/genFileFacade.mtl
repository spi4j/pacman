[module genFileFacade('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::files::genXto/]
[import fr::pacman::commons::soa::files::genXtoTest/]
[import fr::pacman::commons::soa::files::genRSResources/]
[import fr::pacman::soa::files::genUserMapper/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::files::genService/]
[import fr::pacman::soa::files::genServiceItf/]
[import fr::pacman::soa::files::genServiceRequirements/]
[import fr::pacman::soa::files::genServiceTest/]
[import fr::pacman::soa::files::genUserBusiness/]
[import fr::pacman::soa::files::genUserMatching/]
[import fr::pacman::soa::files::genAppliMatchAbs/]
[import fr::pacman::soa::files::genAttributesEnum/]
[import fr::pacman::soa::files::genDto/]
[import fr::pacman::soa::files::genDtoTest/]
[import fr::pacman::soa::files::genFetchingStrategy/]
[import fr::pacman::soa::files::genMapper/]
[import fr::pacman::soa::files::genMapperItf/]
[import fr::pacman::soa::files::genMatch/]
[import fr::pacman::soa::files::genMatchItf/]
[import fr::pacman::soa::files::genPermissionsItf/]
[import fr::pacman::soa::files::genServiceCXF/]
[import fr::pacman::soa::files::genServiceCXFItf/]
[import fr::pacman::soa::files::genGwtModuleBusiness/]
[import fr::pacman::soa::files::genGwtModuleCommons/]
[import fr::pacman::soa::files::genGwtUserBusiness/]
[import fr::pacman::soa::files::genServiceGwtAsync/]
[import fr::pacman::soa::files::genServiceGwtImpl/]
[import fr::pacman::soa::files::genServiceGwtItf/]
[import fr::pacman::soa::files::genServiceGwtXml/]
[import fr::pacman::soa::files::genRSResources/]
[import fr::pacman::soa::files::genServiceRSItf/]
[import fr::pacman::soa::files::genServiceRS/]

[comment encoding = UTF-8 /]
[comment @main/]
[template public genGwtModuleBusiness_facade(n : environment::Namespace)]
  [if (n.eContainer() = null)]
        [n.genGwtModuleBusiness()/]
  [/if]
[/template]

[comment @main/]
[template public genGwtModuleCommons_facade(n : environment::Namespace)]
  [if (n.eContainer() = null)]
        [n.genGwtModuleCommons()/]
  [/if]
[/template]

[comment @main/]
[template public genGwtUserBusiness_facade(n : environment::Namespace)]
  [if (n.eContainer() = null)]
        [n.genGwtUserBusiness()/]
  [/if]
[/template]

[comment @main/]
[template public genServiceGwtXml_facade(n : environment::Namespace)]
  [if (n.eContainer() = null)]
        [n.genServiceGwtXml()/]
  [/if]
[/template]

[comment @main/]
[template public genServiceGwtItf_facade(d : environment::DTO)]
  [if (not d.isNotPersistent())]
        [d.serviceFromDto().genServiceGwtItf(d)/]
  [/if]
[/template]

[comment @main/]
[template public genServiceGwtImpl_facade(d : environment::DTO)]
  [if (not d.isNotPersistent())]
        [d.serviceFromDto().genServiceGwtImpl(d)/]
  [/if]
[/template]

[comment @main/]
[template public genServiceGwtAsync_facade(d : environment::DTO)]
  [if (not d.isNotPersistent())]
        [d.serviceFromDto().genServiceGwtAsync(d)/]
  [/if]
[/template]

[comment @main/]
[template public genAppliMatchAbs_facade(n : environment::Namespace)]
      [n.genAppliMatchAbs()/][/template]

[comment @main/]
[template public genAttributesEnum_facade(d : environment::DTO)]
      [d.genAttributesEnum()/][/template]

[comment @main/]
[template public genDto_facade(d : environment::DTO)]
      [d.genDto()/][/template]

[comment @main/]
[template public genDtoTest_facade(d : environment::DTO)]
      [d.genDtoTest()/][/template]

[comment @main/]
[template public genFetchingStrategy_facade(d : environment::DTO)]
      [d.genFetchingStrategy()/][/template]

[comment @main/]
[template public genFetchingStrategyTest_facade(d : environment::DTO)]
      [d.genFetchingStrategy()/][/template]

[comment @main/]
[template public genMapper_facade(d : environment::DTO)]
      [d.genMapper()/][/template]

[comment @main/]
[template public genMapperItf_facade(d : environment::DTO)]
      [d.genMapperItf()/][/template]

[comment @main/]
[template public genMatch_facade(d : environment::DTO)]
      [d.genMatch()/][/template]

[comment @main/]
[template public genMatchItf_facade(d : environment::DTO)]
      [d.genMatchItf()/][/template]

[comment @main/]
[template public genPermissionsItf_facade(m : soa::System)]
      [m.genPermissionsItf()/][/template]

[comment @main/]
[template public genService_facade(d : environment::DTO)]
  [if (not d.isNotPersistent())]
        [d.serviceFromDto().genService(d)/]
  [/if]
[/template]

[comment @main/]
[template public genServiceCXFFacade_facade(s : soa::Service)]
      [s.genServiceCXF()/][/template]

[comment @main/]
[template public genServiceCXFFacadeItf_facade(s : soa::Service)]
      [s.genServiceCXFItf()/][/template]

[comment @main/]
[template public genServiceItf_facade(d : environment::DTO)]
      [d.serviceFromDto().genServiceItf(d)/][/template]

[comment @main/]
[template public genServiceRequirements_facade(d : environment::DTO)]
      [d.serviceFromDto().genServiceRequirements(d)/][/template]

[comment @main/]
[template public genServiceTest_facade(d : environment::DTO)]
      [d.serviceFromDto().genServiceTest(d)/][/template]

[comment @main/]
[template public genUserBusiness_facade(m : soa::System)]
      [m.genUserBusiness()/][/template]

[comment @main/]
[template public genUserMapper_facade(m : soa::System)]
      [m.xtoAGenerer()->genUserMapper(m)/][/template]

[comment @main/]
[template public genUserMatching_facade(m : soa::System)]
      [m.genUserMatching()/][/template]

[comment @main/]
[template public genXto_facade(d : environment::DTO)]
      [d.genXto()/][/template]

[comment @main/]
[template public genXtoTest_facade(d : environment::DTO)]
      [d.genXtoTest()/][/template]

[comment @main/]
[template public genApplicationAppConfig_facade(m : soa::System)]
  	[m.genRSApplicationConfig()/][/template]

[comment @main/]
[template public genGradesResources_facade(s : soa::Service)]
  	[s.genRSResource(null)/][/template]

[comment @main/]
[template public genGradesServiceRSFacadeItf_facade(s : soa::Service)]
  	[s.genServiceRSItf(null)/][/template]

[comment @main/]
[template public genGradesServiceRSFacade_facade(s : soa::Service)]
  	[s.genServiceRS(null)/][/template]