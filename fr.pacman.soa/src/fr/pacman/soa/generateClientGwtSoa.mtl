[comment encoding = UTF-8 /]
[module generateClientGwtSoa('http://www.obeonetwork.org/dsl/environment/3.0.0',
                             'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::utils /]

[import fr::pacman::commons::soa::common::utils /]

[import fr::pacman::soa::common::outils /]
[import fr::pacman::soa::files::genGwtUserBusiness /]
[import fr::pacman::soa::files::genServiceGwtItf /]
[import fr::pacman::soa::files::genServiceGwtAsync /]
[import fr::pacman::soa::files::genServiceGwtImpl /]
[import fr::pacman::soa::files::genIndexHtml /]
[import fr::pacman::soa::files::genServiceGwtXml /]
[import fr::pacman::soa::files::genGwtModuleBusiness /]
[import fr::pacman::soa::files::genGwtModuleCommons /]

[template public GenerateClientGwtSystem(n : Namespace)]
[comment @main /]
[if (n.eContainer().oclIsUndefined())] [comment : on est sur le système racine /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]
        [genGwtUserBusiness(n)/]
        [genIndexHtml(n)/]
        [genServiceGwtXml(n)/]
        [genGwtModuleBusiness(n)/]
        [genGwtModuleCommons(n)/]

        [for (service : Service | n.eAllContents(Service))]
            [if service.serviceSeul()]
                [genServiceGwtItf(service)/]
                [genServiceGwtAsync(service)/]
                [genServiceGwtImpl(service)/]
            [/if]
        [/for]

        [for (dto : DTO | n.eAllContents(DTO))]
            [if not dto.isNotPersistent() and not dto.isParent()]
                [genServiceGwtItf(serviceFromDto(dto), dto)/]
                [genServiceGwtAsync(serviceFromDto(dto), dto)/]
                [genServiceGwtImpl(serviceFromDto(dto), dto)/]
            [/if]
        [/for]

    [/if]
[/for]
[/if]
[/template]

[template public GenerateClientGwtPackage(c : Namespace)]
[comment @main /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]
        [for (dto : DTO | c.eAllContents(DTO))]
            [comment aucun DTO généré côté client /]
            [if not systemeRacine(c).oclIsUndefined()]
                [if not dto.isNotPersistent() and not dto.isParent() and serviceFromDto(dto).oclIsUndefined()]
                    [genServiceGwtItf(serviceFromDto(dto), dto)/]
                    [genServiceGwtAsync(serviceFromDto(dto), dto)/]
                    [genServiceGwtImpl(serviceFromDto(dto), dto)/]
                [/if]
            [/if]
        [/for]

    [/if]
[/for]
[/template]

[template public GenerateClientGwtDto(dto : DTO)]
[comment @main /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]
        [comment aucun DTO généré côté client /]
        [if not systemeRacine(dto).oclIsUndefined()]
            [if not dto.isNotPersistent() and not dto.isParent() and serviceFromDto(dto).oclIsUndefined()]
                [genServiceGwtItf(serviceFromDto(dto), dto)/]
                [genServiceGwtAsync(serviceFromDto(dto), dto)/]
                [genServiceGwtImpl(serviceFromDto(dto), dto)/]
            [/if]
        [/if]
    [/if]
[/for]
[/template]

[template public GenerateClientGwtComponent(component : Component)]
[comment @main /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]
        [comment aucun DTO généré côté client /]
        [for (service : Service | component.eAllContents(Service))]
            [if service.serviceSeul()]
                [genServiceGwtItf(service)/]
                [genServiceGwtAsync(service)/]
                [genServiceGwtImpl(service)/]
            [else]
                [genServiceGwtItf(service, dtoFromService(service))/]
                [genServiceGwtAsync(service, dtoFromService(service))/]
                [genServiceGwtImpl(service, dtoFromService(service))/]
            [/if]
        [/for]
    [/if]
[/for]
[/template]

[template public GenerateClientGwtService(service : Service)]
[comment @main /]
[for (clientType : String | getClientTypes())]
    [if clientType.equalsIgnoreCase('GWT')]
        [comment aucun DTO généré côté client /]
            [if service.serviceSeul()]
                [genServiceGwtItf(service)/]
                [genServiceGwtAsync(service)/]
                [genServiceGwtImpl(service)/]
            [else]
                [genServiceGwtItf(service, dtoFromService(service))/]
                [genServiceGwtAsync(service, dtoFromService(service))/]
                [genServiceGwtImpl(service, dtoFromService(service))/]
            [/if]
    [/if]
[/for]
[/template]
