[module classes('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::services::AnnotationUtils/]
[import fr::pacman::commons::services::MandatoryUtils/]

[comment encoding = UTF-8 /]
[**
 * ****************
 * Paramétrage début
*/]
[query public buildSecurityWebAppHelperName(any : ecore::EObject) : String = (any.getApplicationNameUpperFirst() + ' security web app helper').apply_classDefault()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildEntityColumnEnumName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' columns').apply_classEnum()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildEntityInterfaceName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' entity').apply_classInterface()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildEntityName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' entity').apply_classDefault()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildEntityClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' entity').apply_classImplem()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildDaoInterfaceName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' dao').apply_classInterface()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildDaoName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' dao').apply_classDefault()/]

[comment  utilisé dans le matching 1 pour 1/]
[query public buildDaoClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' dao').apply_classImplem()/]

[query public buildAppliMatchAbstractName(any : ecore::EObject) : String = (any.getApplicationName() + ' match').apply_classAbstract()/]

[query public buildAppliMatchName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' match').apply_classDefault()/]

[query public buildAppliMatchClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' match').apply_classImplem()/]

[query public buildAppliMatchInterfaceName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' match').apply_classInterface()/]

[query public buildServiceName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service').apply_classDefault() else (d.buildSimpleDtoName() + ' service').apply_classDefault() endif/]

[query public buildServiceName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' service').apply_classDefault()/]

[query public buildServiceClassName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service').apply_classImplem() else (d.buildSimpleDtoName() + ' service').apply_classImplem() endif/]

[query public buildServiceClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' service').apply_classImplem()/]

[query public buildServiceFacadeCXFClassName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service CXF facade').apply_classImplem()/]

[query public buildServiceFacadeCXFInterfaceName(s : soa::Service) : String = (s.buildSimpleServiceName() + ' service CXF facade').apply_classInterface()/]

[query public buildServiceInterfaceName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service').apply_classInterface() else (d.buildSimpleDtoName() + ' service').apply_classInterface() endif/]

[query public buildServiceRequirementsClassName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service requirements').apply_classDefault() else (d.buildSimpleDtoName() + ' service requirements').apply_classDefault() endif/]

[query public buildServiceGwtInterfaceName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' gwt service').apply_classDefault() else (d.buildSimpleDtoName() + ' gwt service').apply_classDefault() endif/]

[query public buildServiceGwtImplementationName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' gwt service impl').apply_classDefault() else (d.buildSimpleDtoName() + ' gwt service impl').apply_classDefault() endif/]

[query public buildServiceGwtAsyncClassName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' gwt service async').apply_classDefault() else (d.buildSimpleDtoName() + ' gwt service async').apply_classDefault() endif/]

[query public buildServiceTestClassName(s : soa::Service, d : environment::DTO) : String = if not (s = null) then (s.buildSimpleServiceName() + ' service').apply_classTest() else (d.buildSimpleDtoName() + ' service').apply_classTest() endif/]

[template public buildService(s : soa::Service, d : environment::DTO)]
  [if (not (s = null))][s.buildSimpleServiceName()/][else]
                                                      [if (not (d = null))][d.buildSimpleDtoName()/][else]NAME NOT FOUND FOR SERVICE AND DTO NULL[/if]
                                                    [/if]
[/template]

[query public buildUserMatchingGenClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user matching').apply_classDefault()/]

[query public buildAppliUserMapperGenClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' user mapper').apply_classDefault()/]

[query public buildAppliPermissionsInterfaceName(any : ecore::EObject) : String = (any.getApplicationName() + ' permissions').apply_classInterface()/]

[query public buildDtoTestClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' dto').apply_classTest()/]

[query public buildMapperClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' mapper').apply_classImplem()/]

[query public buildMapperInterfaceName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' mapper').apply_classInterface()/]

[query public buildFetchingStrategyClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' fetching strategy').apply_classDefault()/]

[query public buildFetchingStrategyTestClassName(d : environment::DTO) : String = (d.buildSimpleDtoName() + ' fetching strategy').apply_classTest()/]

[**
 * ****************
 * Paramétrage fin
*/]
[query public hasSpecificIdAppli(d : environment::DTO) : Boolean = d.hasSpecificAnnotation('IdAppli')/]

[query private hasSpecificAnnotation(d : environment::DTO, annotation : String) : Boolean = d.getAnnotationBodyRecursively(annotation) <> null/]

[template private specificIdAppli(d : environment::DTO)]
  [d.specificAnnotation('idAppli').toUpperFirst()/][/template]

[template public specificOrDefaultIdAppli(d : environment::DTO)]
  [if (d.hasSpecificIdAppli())][d.specificIdAppli()/][else][d.getApplicationName()/][/if]
[/template]

[query private specificAnnotation(d : environment::DTO, annotation : String) : String = d.getAnnotationBodyRecursively(annotation)/]

[comment OA : Teste si une propriété (attribut ou référence) est obligatoire/]
[query public isMandatory(p : environment::Property) : Boolean = p.isMandatorySoa()/]