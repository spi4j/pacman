[module methodes('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::classRule/]

[comment encoding = UTF-8 /]
[**
 * Parametrage PacMan
*/]
[**
 * getters
*/]
[template public getGetter(r : environment::Reference)]
  public [r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/] [r.name.toLowerFirst().apply_methodGet()/] ()[/template]

[template public getGetterListDto(r : environment::Reference)]
  public List<[r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]> [r.getNameGetterListDto()/] ()[/template]

[**
 * setters
*/]
[template public getSetterDtoReference(r : environment::Reference)]
  public void [r.name.toLowerFirst().apply_methodSet()/] (final [r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/] [r.name.toLowerFirst().apply_parameterMethodClassicIn()/])[/template]

[template public getSetterListDto(r : environment::Reference)]
  public void [r.getNameSetterListDto()/] (final List<[r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]> [r.referencedType.oclAsType(environment::DTO).name.normalize().apply_parameterMethodMultiple()/])[/template]

[**
 * autres
*/]
[template public getFindListRefByDto(r : environment::Reference, d : environment::DTO)]
  [('find list ' + r.name.normalize() + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/][/template]

[template public getFindListRefInverseByDto(r : environment::Reference, d : environment::DTO)]
  [('find list ' + r.name.normalize() + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/][/template]

[**
 * Fin ParamÃ©trage
*/]
[comment Les Getters /]
[comment ------------/]
[template public genGetter(a : environment::Attribute)]
  public [a.genPropertyType()/] [a.nameGetter()/] ()[/template]

[template public nameGetterIdDto(r : environment::Reference)]
  public [r.genPkType()/] get[r.namePropertyId()/] ()[/template]

[template public nameGetterInverseIdDto(r : environment::Reference)]
  public [r.genPkType()/] get[r.namePropertyInverseId()/] ()[/template]

[template public nameGetter(r : environment::Reference)]
  public [r.nameDto()/] get[r.nameProperty()/] ()[/template]

[template public nameGetterXto(r : environment::Reference)]
  public [r.nameXto()/] get[r.nameProperty()/] ()[/template]

[template public getterInstanceService(r : environment::Reference)]
  get[r.nameClassDto()/]Service()[/template]

[template public getterInstanceService(d : environment::DTO)]
  get[d.nameClassDto()/]Service()[/template]

[template public getterListDto(r : environment::Reference)]
  public List<[r.nameDto()/]> get[r.namePropertyTab()/] ()[/template]

[template public getterListXto(r : environment::Reference)]
  public List<[r.nameXto()/]> get[r.namePropertyTab()/] ()[/template]

[comment Les Setters /]
[comment ------------/]
[template public genSetter(a : environment::Attribute)]
  public void [a.nameSetter()/] (final [a.genPropertyType()/] [a.nameParam().apply_parameterMethodClassicIn()/])[/template]

[template public nameSetterIdDto(r : environment::Reference)]
  public void set[r.namePropertyId()/] (final [r.genPkType()/] [r.nameParamId().apply_parameterMethodClassicIn()/])[/template]

[template public nameSetterInverseIdDto(r : environment::Reference)]
  public void set[r.namePropertyInverseId()/] (final [r.genPkType()/] [r.nameParamInverseId().apply_parameterMethodClassicIn()/])[/template]

[template public setterDtoReference(r : environment::Reference)]
  public void set[r.nameProperty()/] (final [r.nameDto()/] [r.nameParam().apply_parameterMethodClassicIn()/])[/template]

[template public setterListDto(r : environment::Reference)]
  public void [r.nameSetterListDto()/] (final List<[r.nameDto()/]> [r.nameParamTab().apply_parameterMethodClassicIn()/])[/template]

[template public setterXtoReference(r : environment::Reference)]
  public void set[r.nameProperty()/] (final [r.nameXto()/] [r.nameParam().apply_parameterMethodClassicIn()/])[/template]

[template public setterListXto(r : environment::Reference)]
  public void [r.nameSetterListDto()/] (final List<[r.nameXto()/]> [r.nameParamTab().apply_parameterMethodClassicIn()/])[/template]

[template public setAttribute(a : environment::Attribute)]
  set[a.nameProperty()/]([a.nameParam().apply_parameterMethodClassicIn()/]);[/template]

[template public setId(any : ecore::EObject)]
  setId([any.nameENUM_PK_ID().nameParam().apply_parameterMethodClassicIn()/]);[/template]

[template public setDtoReferenceId(r : environment::Reference)]
  set[r.namePropertyId()/]([r.nameParamId().apply_parameterMethodClassicIn()/]);[/template]

[template public setDtoReferenceInverseId(r : environment::Reference)]
  set[r.namePropertyInverseId()/]([r.nameParamInverseId().apply_parameterMethodClassicIn()/]);[/template]

[template public setDtoReference(r : environment::Reference)]
  set[r.nameProperty()/]([r.nameParam().apply_parameterMethodClassicIn()/]);[/template]

[template public setDtoReferenceStar(r : environment::Reference)]
        if ([r.nameParamInverse()/] == null)
        {
           set[r.namePropertyInverseId()/](null);
        }
        else
        {
           set[r.namePropertyInverseId()/]([r.nameParamInverse().apply_parameterMethodClassicIn()/].getId());
        }[/template]

[comment Les Finders /]
[comment ------------/]
[template public findListRefByDto(r : environment::Reference, d : environment::DTO)]
  findList[r.nameBaseReferenceUpperFirst()/]By[r.containingType.oclAsType(environment::DTO).nameClassDto()/][/template]

[template public findListRefInverseByDto(r : environment::Reference, d : environment::DTO)]
  findList[r.nameBaseReferenceUpperFirst()/]By[r.containingType.oclAsType(environment::DTO).nameClassDto()/][/template]

[comment Parametres /]
[comment -----------/]
[template public paramOutDto(o : soa::Operation) post(self.trim())]
  [if (o.output->size() <> 1)]void[else][o.output->first().paramTypeDto()/][/if]
[/template]

[template public paramsInDto(o : soa::Operation) post(self.trim())]
  [o.input->asOrderedSet()->paramsInDto()->sep(', ')/]
[/template]

[comment : /]
[template public parametersXtoFromDto(p : soa::Parameter)]
  [if (p.type.oclIsTypeOf(environment::DTO))][let return : environment::DTO = p.type.oclAsType(environment::DTO)][p.buildAppliUserMapperGenClassName()/].[('get ' + return.buildMapperClassName()).apply_methodDefault()/] ().convert[if (p.isMultiple())]List[/if]XtoTo[if (p.isMultiple())]List[/if]Dto ([p.name.apply_parameterMethodClassicIn()/])[/let][else][p.name.apply_parameterMethodClassicIn()/][/if][/template]

[query private paramsInDto(inputs : OrderedSet(soa::Parameter)) : Sequence(String) = inputs->asSequence()->collect(temp1 | temp1.paramInDto())/]

[query public paramInDto(param : soa::Parameter) : String = 'final ' + param.paramTypeDto() + ' ' + param.name.sanitize().apply_parameterMethodClassicIn()/]

[template private paramTypeDto(p : soa::Parameter) post(self.trim())]
  [if (p.isMultiple())]List<[p.typeDto()/]>[else][p.typeDto()/][/if]
[/template]

[template private typeDto(p : soa::Parameter) post(self.trim())]
  [if (p.type <> null)]
    [if (p.type.oclIsKindOf(environment::PrimitiveType))]
      [p.type.name.sanitize()/]
    [else]
      [p.simpleTypeDto() + 'Dto'/]
    [/if]
  [/if]
[/template]
