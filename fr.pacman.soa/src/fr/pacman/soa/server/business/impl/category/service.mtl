[module service('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/requirement/1.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::comments/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::soa::services::RequirementUtils/]

[comment encoding = UTF-8 /]
[comment le Service existe sans DTO /]
[template public service(s : soa::Service)]
  [s.service(s.dtoFromService())/][/template]

[template public service(d : environment::DTO)]
  [d.serviceFromDto().service(d)/][/template]

[comment le Service et le DTO existent /]
[template public service(s : soa::Service, d : environment::DTO)]
  [s.licence()/]
  [let self = if not (s = null) then s else if not (d = null) then d else 'PACKAGE NOT FOUND FOR SERVICE AND DTO NULL' endif endif]
    package [s.buildPackageBusinessImplementationServiceDto(d)/];
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [d.writeImports(s)/]
      
    [/protected]
    
    /**
     * Implémentation du contrat de services spécifiques[if (d.hasCrud())] pour un type '[d.nameClassDto()/]'[/if]. <br>
     * Pour rappel, les services sont sans état.
     * @author [s.getAuthorName()/]
     */
    // annotations service
    [protected (s.getUserCodeId('annotations service')) startTagPrefix('// ') endTagPrefix('// ')]
      [if (s.useEjb())]
        @Stateless
      [/if]
    [/protected]
    public class [s.buildServiceClassName(d)/] [if (d.hasCrud())]extends [s.getClassNameForService_Abs()/]<[s.genPkType()/], [d.buildDtoClassName()/], [d.buildEntityColumnEnumName()/]> [/if]implements [s.buildServiceInterfaceName(d)/]
    {
    
       // Rappel : les services sont sans état.
       // attributs
       [protected (s.getUserCodeId('attributs')) startTagPrefix('// ') endTagPrefix('// ')]

       [/protected]
    
    
    [if (s.useServiceRequirements())]
         @SuppressWarnings("all")
         private final [s.buildServiceRequirementsClassName(d)/] ['requirements'.apply_attributeFinal()/] = new [s.buildServiceRequirementsClassName(d)/] (); // NOPMD
    [/if]
    
    [if (d.hasCrud())]
         /**
          * Obtenir l'instance de matching sur le type '[d.nameClassDto()/]'.
          * @return L'instance désirée.
          */
         @Override
         protected [d.buildAppliMatchInterfaceName()/] getMatch ()
         {
            return [s.buildUserMatchingGenClassName()/].[('get ' + d.buildAppliMatchName()).apply_methodDefault()/] ();
         }
      
      [if (d.isCrudApplication() and false)]
           /**
        	* Lecture d'une instance de type : '[d.buildDtoClassName()/]', à partir de son identifiant.
            *
            * @param ['id'.apply_parameterMethodClassicIn()/] : Identifiant unique pour l'instance à obtenir.
            * @return [d.name.apply_parameterMethodClassicIn()/] : l'instance de type '[d.buildDtoClassName()/]'.
        	*/
        	// Annotations [d.name.sanitize() + '_Read'/]
        	[protected (d.getUserCodeId('Annotations ' + d.name.sanitize() + '_Read')) startTagPrefix('// ') endTagPrefix('// ')]
           
         [/protected]
        
        	public [d.buildDtoClassName()/] read(final Long ['id'.apply_parameterMethodClassicIn()/]) {
        
        		return findById(['id'.apply_parameterMethodClassicIn()/]);
        	}
        
           /**
        	* Création d'une nouvelle instance de type : '[d.buildDtoClassName()/]'.
            *
            * @param [d.name.apply_parameterMethodClassicIn()/] : l'instance de type '[d.buildDtoClassName()/]'.
        	* @return [d.buildDtoClassName()/] : la nouvelle instance de type '[d.buildDtoClassName()/]'.
            * @throws Spi4jValidationException : Une erreur de validation pour l'instance de type '[d.buildDtoClassName()/]'.
        	*/
        	// Annotations [d.name.sanitize() + '_Create'/]
        	[protected (d.getUserCodeId('Annotations ' + d.name.sanitize() + '_Create')) startTagPrefix('// ') endTagPrefix('// ')]
           
         [/protected]
        
        	public [d.buildDtoClassName()/] create(final [d.buildDtoClassName()/] [d.name.apply_parameterMethodClassicIn()/]) throws Spi4jValidationException {
        	
        		return save([d.name.apply_parameterMethodClassicIn()/]);
        	}
        
           /**
        	* Mise à jour d'une instance de type : '[d.buildDtoClassName()/]'.
            *
            * @param [d.name.apply_parameterMethodClassicIn()/] : l'instance de type '[d.buildDtoClassName()/]'.
            * @throws Spi4jValidationException : Une erreur de validation pour l'instance de type '[d.buildDtoClassName()/]'.
        	*/
        	// Annotations [d.name.sanitize() + '_Update'/]
        	[protected (d.getUserCodeId('Annotations ' + d.name.sanitize() + '_Update')) startTagPrefix('// ') endTagPrefix('// ')]
           
         [/protected]
        
        	public void update(final [d.buildDtoClassName()/] [d.name.apply_parameterMethodClassicIn()/]) throws Spi4jValidationException  {
        	
         		save([d.name.apply_parameterMethodClassicIn()/]);
        	}
        
           /**
        	* Suppression physique d'une instance de type : '[d.buildDtoClassName()/]'.
            *
            * @param [d.name.apply_parameterMethodClassicIn()/] : l'instance de type '[d.buildDtoClassName()/]'.
            * @throws Spi4jValidationException : Une erreur de validation pour l'instance de type '[d.buildDtoClassName()/]'.
        	*/
        	// Annotations [d.name.sanitize() + '_Delete'/]
        	[protected (d.getUserCodeId('Annotations ' + d.name.sanitize() + '_Delete')) startTagPrefix('// ') endTagPrefix('// ')]
           
         [/protected]
        
        	public void remove(final [d.buildDtoClassName()/] [d.name.apply_parameterMethodClassicIn()/]) throws Spi4jValidationException {
        	
        		delete([d.name.apply_parameterMethodClassicIn()/]);
        	}
      [/if]
      
      [for (r : environment::Reference | d.referencingStar())]
           @Override
           public List<[d.buildDtoClassName()/]> [('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameParamInverseId().apply_parameterMethodClassicIn()/])
           {
              return findByColumn ([d.buildEntityColumnEnumName()/].[r.nameBaseReferenceInverse().apply_attributeEnum()/][r.namePK_ID()/], [r.nameParamInverseId().apply_parameterMethodClassicIn()/]);
           }
        
      [/for]
      [for (r : environment::Reference | d.referencesStarStar())]
            /**
            * Sauvegarde les relations entre '[d.nameClassDto()/]' et '[r.nameClassDto()/]' pour ce dto.
            * @param ['dto'.apply_parameterMethodClassicIn()/]
            *           le dto
            * @param [r.name.normalize().apply_parameterMethodMultiple()/]
            *           les relations à ajouter
            */
            @Override
            public void [('save ' + r.name.normalize()).apply_methodDefault()/] (final [d.buildDtoClassName()/] ['dto'.apply_parameterMethodClassicIn()/], final List<[r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]> [r.name.normalize().apply_parameterMethodMultiple()/])
            {
              getMatch ().[('save ' + r.name.normalize()).apply_methodDefault()/] (['dto'.apply_parameterMethodClassicIn()/],[r.name.normalize().apply_parameterMethodMultiple()/]);
            }
        
            /**
            * Obtenir la liste d'objets de type '[r.referencedType.oclAsType(environment::DTO).nameBaseDtoUP()/]' associés à l'instance de type '[r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]'.
            * @param [d.buildSimpleDtoName().apply_parameterMethodClassicIn().apply_parameterMethodClassicIn()/][r.namePK_ID()/]
            *           (In)(*) [r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]
            * @return une liste de [r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]
            */
            @Override
            public List<[r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/]> [('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [d.buildSimpleDtoName().apply_parameterMethodClassicIn()/][r.namePK_ID()/])
            {
              return getMatch ().[('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] ([(d.buildSimpleDtoName() + r.namePK_ID()).apply_parameterMethodClassicIn()/]);
            }
        
            /**
            * Supprime les relations [r.name/] entre '[d.nameClassDto()/]' et '[r.nameClassDto()/]' pour ce dto.
            * @param ['dto'.apply_parameterMethodClassicIn()/]
            *           le dto
            */
           @Override
           public void [('delete ' + r.name.normalize()).apply_methodDefault()/] (final [d.buildDtoClassName()/] ['dto'.apply_parameterMethodClassicIn()/])
           {
              getMatch ().[('delete ' + r.name.normalize()).apply_methodDefault()/] (['dto'.apply_parameterMethodClassicIn()/]);
           }
        
      [/for]
    [/if]
    [if (s <> null and not (s.ownedInterface = null))]
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
           /**
            * [o.description/]
        [o.comParamsIn()/]
        [o.comParamOut()/]
            */
        [let requirements : Sequence(requirement::Requirement) = o.getRequirements()]
          [if (o.useServiceRequirements())]
            [if (o.requirementBaseCategoryLevel() = 0 and not requirements->isEmpty())]
              [if (requirements->size() = 1)]
                   @['requirement'.apply_classAnnotation()/](['requirement'.apply_classEnum()/].[o.getServiceRequirementsPrefix()/][requirements->first().id/])
              [else]
                   @['requirement'.apply_classAnnotation()/](value =
                   {['requirement'.apply_classEnum() + '.' + o.getServiceRequirementsPrefix() + requirements->collect(temp1 | temp1.id)->sep(', ' + 'requirement'.apply_classEnum() + '.' + o.getServiceRequirementsPrefix())/] })
              [/if]
            [/if]
          [/if]
             @Override
             public [o.paramOutDto()/] [o.name.sanitize().apply_methodDefault()/] ([o.paramsInDto()/][o.paramsInForPagingIfNeeded(true)/])
             {
          
                // Appel des exigences en provenance de la modélisation
          [if (o.useServiceRequirements())]
            [for (req : requirement::Requirement | requirements)]
                    // ['requirements'.apply_attributeFinal()/].exigence[req.getServiceRequirementsPrefix()/][req.id/] ();
            [/for]
          [/if]
          
                // [o.userCodeForOperation()/]
                [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
                  // Appel des exigences
                  [if (o.useServiceRequirements())]
                    [for (req : requirement::Requirement | requirements)]
                            ['requirements'.apply_attributeFinal()/].exigence[req.getServiceRequirementsPrefix()/][req.id/] ();
                    [/for]
                  [/if]
                  // TODO Méthode à implémenter
                  throw new UnsupportedOperationException ();

                [/protected]
             }
          
        [/let]
        	[o.addMethodTotalCountForPagingIfNeeded(null, false)/]
      [/for]
    [/if]
    
       // [s.nameService(d)/]
       [protected (s.getUserCodeId(s.nameService(d))) startTagPrefix('// ') endTagPrefix('// ')]

       [/protected]
    }[/let]
[/template]

[comment : Write all required imports. /]
[template private writeImports(d : environment::DTO, s : soa::Service) post(self.trim())]
  [s.initImports()/]
  [s.addImport('java.util.Date')/]
  [s.addImport('java.util.List')/]
  [s.addImport('jakarta.ejb.Stateless', d.useEjb())/]
  [s.addImport('fr.spi4j.exception.Spi4jValidationException')/]
  [s.addImport(d.getImportForService_Abs())/]
  [s.addImport(s.buildImportServiceInterface(d))/]
  
  [if (not (d = null) and d.hasCrud())]
    [for (r : environment::Reference | d.referencesNoStar())]
      		[s.addImport(r.referencedType.oclAsType(environment::DTO).buildImportDto())/]
    [/for]
    
    	[s.addImport(d.buildImportDto())/]
    	[s.addImport(d.buildImportEnum())/]
    	[s.addImport(d.buildImportMatchingInterface())/]
    	[s.addImport(d.buildPackageMatching() + '.' + d.buildUserMatchingGenClassName())/]
  [/if]
  
  [if (d.useServiceRequirements())]
    	[s.addImport(s.buildImportServiceRequirements(d))/]
  [/if]
  
  [if (not (d = null))]
    [for (r : environment::Reference | d.referencesStarStar())]
      		[s.addImport(r.referencedType.oclAsType(environment::DTO).buildImportDto())/]
    [/for]
  [/if]
  
  [if (not (s = null) and not (s.ownedInterface = null))]
    [if (s.ownedInterface.ownedOperations->exists(o | not o.getRequirements()->isEmpty()))]
      		[s.addImport(d.buildPackageRequirement() + '.' + 'requirement'.apply_classAnnotation())/]
      		[s.addImport(d.buildPackageRequirement() + '.' + 'requirement'.apply_classEnum())/]
    [/if]
  [/if]
  
  [s.flushImports()/][/template]

[query private getRequirements(o : soa::Operation) : Sequence(requirement::Requirement) = o.getRequirementsJavaService()/]

[query private hasCrud(d : environment::DTO) : Boolean = d <> null and not d.isNotPersistent()/]
