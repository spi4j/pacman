[module serviceRequirements('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/requirement/1.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::soa::services::RequirementUtils/]

[comment encoding = UTF-8 /]
[comment le Service existe sans DTO /]
[template public serviceRequirements(s : soa::Service)]
  [s.serviceRequirements(s.dtoFromService(), true)/][/template]

[template public serviceRequirements(d : environment::DTO)]
  [d.serviceFromDto().serviceRequirements(d, false)/][/template]

[comment le Service et le DTO existent /]
[template public serviceRequirements(s : soa::Service, d : environment::DTO)]
  [s.serviceRequirements(d, false)/][/template]

[template public serviceRequirements(s : soa::Service, d : environment::DTO, serviceSeul : Boolean)]
  [s.licence()/]
  [let self = if not (s = null) then s else if not (d = null) then d else 'PACKAGE NOT FOUND FOR SERVICE AND DTO NULL' endif endif]
    package [s.buildPackageBusinessImplementationServiceDto(d)/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [if (not s.getAllRequirementsForService()->isEmpty())]
        [if (s.requirementBaseCategoryLevel() = 0)]
          import [s.buildPackageRequirement()/].['requirement'.apply_classAnnotation()/];
          import [s.buildPackageRequirement()/].['requirement'.apply_classEnum()/];
        [else]
          [for (req : requirement::Requirement | s.getAllRequirementsForService())]
            [req.buildImportRequirement()/]
          [/for]
        [/if]
        import fr.spi4j.requirement.RequirementException;
      [/if]
      
    [/protected]
    
    /**
     * Implémentations des exigences métiers de '[s.buildServiceClassName(d)/]'.
     * @author [s.getAuthorName()/]
     */
    public class [s.buildServiceRequirementsClassName(d)/]
    {
    
    [if (not (s = null))]
      [for (req : requirement::Requirement | s.getAllRequirementsForService())]
           [protected (req.getUserCodeId(req.getServiceRequirementsPrefix() + req.id + '_javadoc')) startTagPrefix('// ') endTagPrefix('// ')]
                /**
                 * Test de l'exigence [req.getServiceRequirementsPrefix()/][req.id/]. <br>
                 * [req.statement.replaceAll('\r\n', ' <br>\r\n    * ')/]
                 */
           [/protected]
        
           [req.annotationRequirement()/]
           [protected (req.getUserCodeId(req.getServiceRequirementsPrefix() + req.id)) startTagPrefix('// ') endTagPrefix('// ')]
                public void ['exigence'.apply_methodDefault()/][req.getServiceRequirementsPrefix()/][req.id/] ()
                {
                   throw new RequirementException(['requirement'.apply_classEnum()/].[req.getServiceRequirementsPrefix()/][req.id/], "Exigence non implémentée");
                }
             
           [/protected]
        
        
      [/for]
    [/if]
       // [s.nameServiceRequirements(d)/]
       [protected (s.getUserCodeId(s.nameServiceRequirements(d))) startTagPrefix('// ') endTagPrefix('// ')]

       [/protected]
    
    }[/let]
[/template]

[query private getAllRequirementsForService(s : soa::Service) : OrderedSet(requirement::Requirement) = s.getAllRequirementsForServiceJavaService()->asOrderedSet()/]

[template private annotationRequirement(req : requirement::Requirement)]
  [if (req.requirementBaseCategoryLevel() = 0)]@['requirement'.apply_classAnnotation()/](['requirement'.apply_classEnum()/].[req.getServiceRequirementsPrefix()/][req.id/])[else]@[('requirement ' + req.getBaseCategoryForRequirement().id).apply_classAnnotation()/]([('requirement ' + req.getBaseCategoryForRequirement().id).apply_classEnum()/].[req.getServiceRequirementsPrefix()/][req.id/])[/if]
[/template]
