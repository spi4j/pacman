[comment encoding = UTF-8 /]
[module match('http://www.obeonetwork.org/dsl/soa/4.0.0',
              'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::utils /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::attributes /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]

[import fr::pacman::commons::types::packages /]
[import fr::pacman::commons::types::names /]
[import fr::pacman::commons::common::imports /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::services::SecurityUtils /]

[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::commons::soa::common::comments /]
[import fr::pacman::commons::soa::common::packages /]
[import fr::pacman::commons::soa::common::references /]
[import fr::pacman::commons::soa::common::names /]
[import fr::pacman::commons::soa::common::utils /]

[import fr::pacman::soa::common::name /]
[import fr::pacman::soa::common::packages /]
[import fr::pacman::soa::common::imports /]
[import fr::pacman::soa::common::attributes /]
[import fr::pacman::soa::common::classes /]
[import fr::pacman::soa::common::outils /]
[import fr::pacman::soa::commons::business::api::category::dto /]

[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::convention::rule::variableRule /]
[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::commons::convention::project::surcouche /]

[template public match11(d : DTO)]
[licence()/]
package [buildPackageMatchingInterfaceDto(d)/];
// [protected ('for imports')]

[comment : Write all required imports. /]
[d.writeImports()/]

// [/protected]

/**
 * Implémentation pour le Matcher (= persistance <-> business) sur le type '[nameClassDto(d)/]'.
 * @author [getAuthorName()/]
 */
public class [buildAppliMatchClassName(d)/] extends [if hasAutomaticColumns()][buildAppliMatchAbstractName()/][else][getClassNameForMatch_Abs()/][/if]<[genPkType()/], [buildDtoClassName(d)/], [buildEntityInterfaceName(d)/], [buildEntityColumnEnumName(d)/]> implements [buildAppliMatchInterfaceName(d)/]
{
   /**
    * Obtenir le DAO associé au type '[nameClassDto(d)/]'.
    * @return L'instance désirée.
    */
   @Override
   protected [buildDaoInterfaceName(d)/] getDao ()
   {
      final [buildUserPersistenceAppClassName()/] [apply_variableFinal('user persistence')/] = [buildParamPersistenceClassName()/].[apply_methodDefault('get user persistence')/] ();
      return [apply_variableFinal('user persistence')/].[apply_methodDefault('get '+ buildDaoName(d))/] ();
   }

   /**
    * Vérification des types d'attributs dans le matching.
    * @param [apply_parameterMethodClassicIn(nameENUM_PK_ID())/]
    *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : Attribute | d.attributesNotComputed())]
[a.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencesNoStar())]
[r.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencingStar())]
[r.getComParamInverseIn()/]
    [/for]
    */
   private void [apply_methodDefault('check ' + d.name)/] (final Class<[genPkType()/]> [apply_parameterMethodClassicIn(nameENUM_PK_ID())/][for (a : Attribute | d.attributesNotComputed())], final Class<[a.genPropertyClassNoGenerics()/]> [apply_parameterMethodClassicIn(a.name.normalize())/][/for][for (r : Reference | d.referencesNoStar())], final Class<[r.referencedType.oclAsType(DTO).buildDtoClassName()/]> [apply_parameterMethodClassicIn(r.name.normalize())/][/for][for (r : Reference | d.referencingStar())], final Class<[r.containingType.oclAsType(DTO).buildDtoClassName()/]> [apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/][/for])
   {
      checkAttributeTypes ([apply_parameterMethodClassicIn(nameENUM_PK_ID())/][for (a : Attribute | d.attributesNotComputed())], [apply_parameterMethodClassicIn(a.name.normalize())/][/for][for (r : Reference | d.referencesNoStar())], [apply_parameterMethodClassicIn(r.name.normalize())/][/for][for (r : Reference | d.referencingStar())], [apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/][/for]);
   }

   @Override
   protected [buildEntityInterfaceName(d)/] convertDtoToEntity (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/])
   {
      final [buildUserPersistenceAppClassName()/] [apply_variableFinal('user persistence')/] = [buildParamPersistenceClassName()/].[apply_methodDefault('get user persistence')/] ();
      final [buildEntityInterfaceName(d)/] [apply_variableFinal('entity')/] = [apply_variableFinal('user persistence')/].[apply_methodDefault('get '+ buildEntityName(d))/] ();
      // [apply_methodDefault('check ' + d.name)/]([genPkType()/].class[for (a : Attribute | d.attributesNotComputed())], [a.genPropertyClassNoGenerics()/].class[/for][for (r : Reference | d.referencesNoStar())], [r.referencedType.oclAsType(DTO).buildDtoClassName()/].class[/for][for (r : Reference | d.referencingStar())], [r.containingType.oclAsType(DTO).buildDtoClassName()/].class[/for]);
      // [apply_variableFinal('entity')/].setId([apply_parameterMethodClassicIn('dto')/].getId());
[for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      // [apply_variableFinal('entity')/].[a.getNameSetter()/]([apply_parameterMethodClassicIn('dto')/].getIdentifiant ());
[else]
      // [apply_variableFinal('entity')/].[a.getNameSetter()/]([apply_parameterMethodClassicIn('dto')/].[a.getNameGetter()/] ());
[/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      // [apply_variableFinal('entity')/].[r.getNameSetterDtoId()/] ([apply_parameterMethodClassicIn('dto')/].[apply_methodGet(r.name.normalize().toLowerFirst())/][namePK_ID()/] ());
[/if]
[/for]
[for (r : Reference | d.referencingStar())]
      // [apply_variableFinal('entity')/].[r.getNameSetterInverseDtoId()/] ([apply_parameterMethodClassicIn('dto')/].[apply_methodGet(r.nameBaseReferenceInverse())/][namePK_ID()/] ());
[/for]

      [displayClearUserCodeId ('convertDtoToEntity')/]
      // [protected (d.getUserCodeId('convertDtoToEntity'))]
      [apply_methodDefault('check ' + d.name)/]([genPkType()/].class[for (a : Attribute | d.attributesNotComputed())], [a.genPropertyClassNoGenerics()/].class[/for][for (r : Reference | d.referencesNoStar())], [r.nameDto()/].class[/for][for (r : Reference | d.referencingStar())], [r.containingType.oclAsType(DTO).nameDto()/].class[/for]);
      [apply_variableFinal('entity')/].setId([apply_parameterMethodClassicIn('dto')/].getId ());
[for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      [apply_variableFinal('entity')/].[a.getNameSetter()/] ([apply_parameterMethodClassicIn('dto')/].getIdentifiant ());
[comment : Rajout du 12/12/2021, on teste aussi si un attribut est non persistant. /]
[else][if (not a.isNotPersistent())]
      [apply_variableFinal('entity')/].[a.getNameSetter()/] ([apply_parameterMethodClassicIn('dto')/].[a.getNameGetter()/]());
[/if][/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      [apply_variableFinal('entity')/].[r.getNameSetterDtoId()/] ([apply_parameterMethodClassicIn('dto')/].[apply_methodGet(r.name.normalize().toLowerFirst())/][namePK_ID()/] ());
[/if]
[/for]
[for (r : Reference | d.referencingStar())]
      [apply_variableFinal('entity')/].[r.getNameSetterInverseDtoId()/] ([apply_parameterMethodClassicIn('dto')/].[apply_methodGet(r.nameBaseReferenceInverse())/][namePK_ID()/] ());
[/for]
  [if hasAutomaticColumns()]
  [for (columnProp : String | get_automaticColumnsProperties())]
      [d.apply_variableFinal('entity')/].[d.apply_methodSet(d.get_nameColumn(columnProp).toLower())/]([apply_parameterMethodClassicIn('dto')/].[apply_methodGet(d.get_nameColumn(columnProp).toLower())/]());
  [/for]
  [/if]
      // [/protected]
[if d.hasEntityWithVersion()]

      MatchHelper.setVersionValueInEntity ([apply_parameterMethodClassicIn('dto')/], [apply_variableFinal('entity')/]);
[/if]

      return [apply_variableFinal('entity')/];
   }
[comment genProperty(d.attributesNotComputed().oclAsType(Property)->union(d.referencesNoStarAndReferencingStar().oclAsType(Property)) /]

   @Override
   protected [buildDtoClassName(d)/] convertEntityToDto (final [buildEntityInterfaceName(d)/] [apply_parameterMethodClassicIn('entity')/])
   {
      final [buildDtoClassName(d)/] [apply_variableFinal('dto')/] = new [buildDtoClassName(d)/] ();
      refreshDtoFromEntity ([apply_parameterMethodClassicIn('entity')/], [apply_variableFinal('dto')/]);
      return [apply_variableFinal('dto')/];
   }

   @Override
   protected void refreshDtoFromEntity (final [buildEntityInterfaceName(d)/] [apply_parameterMethodClassicIn('entity')/], final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/])
   {
      // [apply_methodDefault('check ' + d.name)/] ([genPkType()/].class[for (a : Attribute | d.attributesNotComputed())], [a.genPropertyClassNoGenerics()/].class[/for][for (r : Reference | d.referencesNoStar())], [r.referencedType.oclAsType(DTO).buildDtoClassName()/].class[/for][for (r : Reference | d.referencingStar())], [r.containingType.oclAsType(DTO).buildDtoClassName()/].class[/for]);
      // [apply_parameterMethodClassicIn('dto')/].setId ([apply_parameterMethodClassicIn('entity')/].getId ());
[for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      // [apply_parameterMethodClassicIn('dto')/].setIdentifiant ([apply_parameterMethodClassicIn('entity')/].[a.getNameGetter()/] ());
[else]
      // [apply_parameterMethodClassicIn('dto')/].[a.getNameSetter()/] ([apply_parameterMethodClassicIn('entity')/].[a.getNameGetter()/] ());
[/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      // [apply_parameterMethodClassicIn('dto')/].[apply_methodSet(r.name.normalize().toLowerFirst())/][namePK_ID()/] ([apply_parameterMethodClassicIn('entity')/].[r.getNameGetterDtoId()/] ());
[/if]
[/for]
[for (r : Reference | d.referencingStar())]
      // [apply_parameterMethodClassicIn('dto')/].[r.getNameSetterInverseDtoId()/] ([apply_parameterMethodClassicIn('entity')/].[r.getNameGetterInverseDtoId()/] ());
[/for]

      [displayClearUserCodeId ('refreshDtoFromEntity')/]
      // [protected (d.getUserCodeId('refreshDtoFromEntity'))]
      [apply_methodDefault('check ' + d.name)/] ([genPkType()/].class[for (a : Attribute | d.attributesNotComputed())], [a.genPropertyClassNoGenerics()/].class[/for][for (r : Reference | d.referencesNoStar())], [r.referencedType.oclAsType(DTO).buildDtoClassName()/].class[/for][for (r : Reference | d.referencingStar())], [r.containingType.oclAsType(DTO).buildDtoClassName()/].class[/for]);
      [apply_parameterMethodClassicIn('dto')/].setId ([apply_parameterMethodClassicIn('entity')/].getId ());
[for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      [apply_parameterMethodClassicIn('dto')/].setIdentifiant ([apply_parameterMethodClassicIn('entity')/].[a.getNameGetter()/] ());
[comment : Rajout du 12/12/2021, on teste aussi si un attribut est non persistant. /]
[else][if (not a.isNotPersistent())]
      [apply_parameterMethodClassicIn('dto')/].[a.getNameSetter()/] ([apply_parameterMethodClassicIn('entity')/].[a.getNameGetter()/] ());
[/if][/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      [apply_parameterMethodClassicIn('dto')/].[apply_methodSet(r.name.normalize().toLowerFirst())/][namePK_ID()/] ([apply_parameterMethodClassicIn('entity')/].[r.getNameGetterDtoId()/] ());
[/if]
[/for]
[for (r : Reference | d.referencingStar())]
      [apply_parameterMethodClassicIn('dto')/].[r.getNameSetterInverseDtoId()/] ([apply_parameterMethodClassicIn('entity')/].[r.getNameGetterInverseDtoId()/] ());
[/for]
[if hasAutomaticColumns()]
[for (columnProp : String | get_automaticColumnsProperties())]
      [d.apply_parameterMethodClassicIn('dto')/].[d.apply_methodSet(d.get_nameColumn(columnProp).toLower())/]([apply_parameterMethodClassicIn('entity')/].[apply_methodGet(d.get_nameColumn(columnProp).toLower())/]());
[/for]
[/if]
      // [/protected]
[if d.hasEntityWithVersion()]

      MatchHelper.setVersionValueInDto ([apply_parameterMethodClassicIn('entity')/], [apply_parameterMethodClassicIn('dto')/]);

[/if]
   }

   @Override
   public [buildEntityColumnEnumName(d)/] [apply_methodDefault('get column')/] (final [buildAttributesEnumName(d)/] [apply_parameterMethodClassicIn('attribute')/])
   {
      if ("id".equals([apply_parameterMethodClassicIn('attribute')/].getName ()))
      {
         return [buildEntityColumnEnumName(d)/].[nameSimplePropertyIDInEnum(d)/];
      }
      return [buildEntityColumnEnumName(d)/].valueOf ([apply_parameterMethodClassicIn('attribute')/].getName ());
   }

[if d.referencesStarStar()->size() > 0]
   @Override
   public void create (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
   [for (r : Reference | d.referencesStarStar())]
      final List<[buildDtoClassName(r.referencedType.oclAsType(DTO))/]> [apply_variableMultipleDefault(r.name.normalize())/] = [apply_parameterMethodClassicIn('dto')/].[getNameGetterListDto(r)/] ();
   [/for]
      super.create ([apply_parameterMethodClassicIn('dto')/]);
   [for (r : Reference | d.referencesStarStar())]
      [apply_methodDefault('save ' + r.name.normalize())/] ([apply_parameterMethodClassicIn('dto')/], [apply_variableMultipleDefault(r.name.normalize())/]);
   [/for]
   }

   @Override
   public void update (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
   [for (r : Reference | d.referencesStarStar())]
      final List<[nameDto(r.referencedType.oclAsType(DTO))/]> [apply_variableMultipleDefault(r.name.normalize())/] = [apply_parameterMethodClassicIn('dto')/].[getNameGetterListDto(r)/] ();
   [/for]
      super.update ([apply_parameterMethodClassicIn('dto')/]);
   [for (r : Reference | d.referencesStarStar())]
      // sauvegarde des [nameClassDto(r)/] dans la relation [r.name.normalize()/]
      [apply_methodDefault('save ' + r.name.normalize())/] ([apply_parameterMethodClassicIn('dto')/], [apply_variableMultipleDefault(r.name.normalize())/]);
   [/for]
   }

   @Override
   public void delete (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
   [for (r : Reference | d.referencesStarStar())]
      // suppression des [nameClassDto(r)/] dans la relation [r.name.normalize()/]
	  [if r.hasXtopSup()]
      final List<[buildDtoClassName(r.referencedType.oclAsType(DTO))/]> [apply_variableDefault(r.name.normalize())/] = [apply_parameterMethodClassicIn('dto')/].[r.getNameGetterListDto()/]();
      for([buildDtoClassName(r.referencedType.oclAsType(DTO))/] [apply_variableDefault(buildDtoClassName(r.referencedType.oclAsType(DTO)))/] : [apply_variableDefault(r.name.normalize())/]){ 
          [apply_variableDefault(buildDtoClassName(r.referencedType.oclAsType(DTO)))/].[apply_methodSet(r.getXtopSupName())/](new XtopSup(DatabaseLineStatus_Enum.deletedForAll));
      }
      [apply_methodDefault('save ' + r.name.normalize())/] ([apply_parameterMethodClassicIn('dto')/], [apply_variableDefault(r.name.normalize())/]);
	  [else]
      [apply_methodDefault('delete ' + r.name.normalize())/] ([apply_parameterMethodClassicIn('dto')/]);
	  [/if]
   [/for]
      super.delete ([apply_parameterMethodClassicIn('dto')/]);
   }

[/if]
[for (r : Reference | d.referencesStarStar())]
	/**
    * Sauvegarde les relations entre '[nameClassDto(d)/]' et '[nameClassDto(r)/]' pour ce dto.
    * @param [apply_parameterMethodClassicIn('dto')/]
    *           le dto
    * @param [apply_parameterMethodMultiple(r.referencedType.oclAsType(DTO).name.normalize())/]
    *           les relations à ajouter
    */
   @Override	
   public void [apply_methodDefault('save ' + r.name.normalize())/] (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/], final List<[buildDtoClassName(r.referencedType.oclAsType(DTO))/]> [apply_parameterMethodMultiple(r.name.normalize())/])
   {
      if ([apply_parameterMethodMultiple(r.name.normalize())/] != null)
      {
		 // suppression des relations existantes 
         [apply_methodDefault('delete ' + r.name.normalize())/] ([apply_parameterMethodClassicIn('dto')/]);
         // construction de la requête
         final String [apply_variableFinal('query ' + r.name.normalize() + ' insert')/] = [d.writeInsertQueryForbiDirectionalRelation(r)/]
         // initialisation des paramètres de la requête
         final Map<String, Object> [apply_variableFinal('params')/] = new HashMap<> ();
         [apply_variableFinal('params')/].put ("[nameSimplePropertyIDInEnum(d)/]", [apply_parameterMethodClassicIn('dto')/].getId ());
	     [if hasXdMaj()][apply_variableFinal('params')/].put ("[d.getXdMajName()/]", new Date());[/if]
         for (final [buildDtoClassName(r.referencedType.oclAsType(DTO))/] [apply_variableFinal('dto fk')/] : [apply_parameterMethodMultiple(r.name.normalize())/])
         {
            [apply_variableFinal('params')/].put ("[nameSimplePropertyIDInEnum(r)/]", [apply_variableFinal('dto fk')/].getId ());
			[if hasXtopSup()][apply_variableFinal('params')/].put ("[d.getXtopSupName()/]", [apply_variableFinal('dto fk')/].[apply_methodGet(d.getXtopSupName())/]().get_value());[/if] 
            // insertion en base
            getDao().executeUpdate ([apply_variableFinal('query ' + r.name.normalize() + ' insert')/], [apply_variableFinal('params')/]);
         }
         // mise à jour du dto
         [apply_parameterMethodClassicIn('dto')/].[getNameSetterListDto(r)/]([apply_parameterMethodMultiple(r.name.normalize())/]);
      }
   }
	
	/**
    * Obtenir la liste d'objets de type '[buildDtoClassName(r.referencedType.oclAsType(DTO))/]' associés à l'instance de type '[nameBaseDtoUP(r.referencedType.oclAsType(DTO))/]'.
    * @param [apply_parameterMethodClassicIn(r.containingType.oclAsType(DTO).buildSimpleDtoName())/][namePK_ID()/]
    *           (In)(*) [nameBaseDtoUP(r.containingType.oclAsType(DTO))/].
    * @return une liste de [buildDtoClassName(r.referencedType.oclAsType(DTO))/]
    */
 	@Override
   public List<[buildDtoClassName(r.referencedType.oclAsType(DTO))/]> [apply_methodDefault('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(DTO).buildSimpleDtoName())/] (final [genPkType()/] [apply_parameterMethodClassicIn(r.containingType.oclAsType(DTO).buildSimpleDtoName())/][namePK_ID()/])
   {
      return [buildUserMatchingGenClassName()/].[apply_methodDefault('get ' + buildAppliMatchName(r.referencedType.oclAsType(DTO)))/] ().convertListEntityToListDto (
               getDao ().[apply_methodDefault('find list '+ r.name.sanitize() +' by ' + r.containingType.oclAsType(DTO).buildSimpleDtoName())/] ([apply_parameterMethodClassicIn(r.containingType.oclAsType(DTO).buildSimpleDtoName())/][namePK_ID()/]));
   }

   /**
    * Supprime les relations entre '[nameClassDto(d)/]' et '[nameClassDto(r)/]' pour ce dto.
    * @param [apply_parameterMethodClassicIn('dto')/]
    *           le dto
    */
   @Override
   public void [apply_methodDefault('delete ' + r.name.normalize())/] (final [buildDtoClassName(d)/] [apply_parameterMethodClassicIn('dto')/])
   {
      // construction de la requête
      final String [apply_variableFinal('query ' + r.name.normalize() + ' delete')/] = "delete from " + [buildEntityColumnEnumName(d)/].[apply_attributeFinalStatic('table name ' + nameClassDto(d) +  r.name.sanitize())/] + " where " + [buildEntityColumnEnumName(d)/].[nameSimplePropertyIDInEnum(d)/] + " = :[nameSimplePropertyIDInEnum(d)/]";
      // initialisation des paramètres de la requête
      final Map<String, Long> [apply_variableFinal('params')/] = Collections.singletonMap ("[nameSimplePropertyIDInEnum(d)/]", [apply_parameterMethodClassicIn('dto')/].getId ());
      // insertion en base
      getDao().executeUpdate ([apply_variableFinal('query ' + r.name.normalize() + ' delete')/], [apply_variableFinal('params')/]);
   }

[/for]
   [displayClearUserCodeId (buildAppliMatchClassName(d))/]
   // [protected (d.getUserCodeId(buildAppliMatchClassName(d)))]

   // [/protected]
}
[/template]

[comment : ************************************************************************************* /]
[comment : Comme la construction de la requete est tres longue, on coupe en multiples templates. /]
[comment : ************************************************************************************* /]
[template private writeInsertQueryForbiDirectionalRelation (d : DTO, r : Reference)]
"insert into " + [buildEntityColumnEnumName(d)/].[apply_attributeFinalStatic('table name ' + nameClassDto(d) +  r.name.sanitize())/][lineSeparator()/][d.writeInsertQueryForbiDirectionalRelation_2(r)/] 
[/template]

[template private writeInsertQueryForbiDirectionalRelation_2 (d : DTO, r : Reference)]
 + "(" + [buildEntityColumnEnumName(d)/].[nameSimplePropertyIDInEnum(d)/] + ", " + [buildEntityColumnEnumName(r.referencedType.oclAsType(DTO))/].[nameSimplePropertyIDInEnum(r)/][d.writeInsertQueryForbiDirectionalRelation_3(r)/]
[/template]

[template private writeInsertQueryForbiDirectionalRelation_3 (d : DTO, r : Reference)]
[if hasXtopSup()] + ", " + [d.buildAppliColumnClassName()/].[d.getXtopSupName()/][lineSeparator()/][/if][if hasXdMaj()] + ", " + [d.buildAppliColumnClassName()/].[d.getXdMajName()/][/if] + ")" [d.writeInsertQueryForbiDirectionalRelation_4(r)/]
[/template]

[template private writeInsertQueryForbiDirectionalRelation_4 (d : DTO, r : Reference)]
+ "values (:[nameSimplePropertyIDInEnum(d)/], :[nameSimplePropertyIDInEnum(r)/][d.writeInsertQueryForbiDirectionalRelation_5(r)/]
[/template]

[template private writeInsertQueryForbiDirectionalRelation_5 (d : DTO, r : Reference)]
[if hasXtopSup()], :[d.getXtopSupName()/][/if][if hasXdMaj()], :[d.getXdMajName()/][/if])";
[/template]

[query public get_automaticColumnsProperties(any : OclAny) : Sequence(String) =
invoke('fr.pacman.commons.services.StringUtils', 'getPropertyAsList(java.lang.Object, java.lang.String)', Sequence{ getSQLTableAdditionalFields(), ','})
/]

[query private nameColumnProperty(columnProp : String) : String = columnProp + '.name' /]
[query private typeColumnProperty(columnProp : String) : String = columnProp + '.type' /]
[query private sizeColumnProperty(columnProp : String) : String = columnProp + '.size' /]
[query private defaultColumnProperty(columnProp : String) : String = columnProp + '.default' /]
[query private notnullColumnProperty(columnProp : String) : String = columnProp + '.notnull' /]

[query public get_typeColumn(void : OclAny, columnProp : String) : String =
    getConfigValue(typeColumnProperty(columnProp))
/]

[query public get_typeColumn(columnProp : String, any : OclAny) : String =
    get_typeColumn(any,columnProp)
/]

[query public get_nameColumn(any : OclAny, columnProp : String) : String =
    getConfigValue(nameColumnProperty(columnProp))
/]

[query public get_nameColumn(columnProp : String, void : OclAny ) : String =
    get_nameColumn(void,columnProp)
/]

[comment : Add all required imports./]
[template private writeImports (d : DTO) post(trim())]
[d.initImports()/]
[if not d.referencesStarStar()->isEmpty()]
	[d.addImport('java.util.Collections')/]
	[d.addImport('java.util.Date')/]
	[d.addImport('java.util.Map')/]
	[d.addImport('java.util.HashMap')/]
	[d.addImport('fr.spi4j.type.XtopSup')/]
	[d.addImport(buildPackageMatching() + '.' + buildUserMatchingGenClassName())/]

	[for (r : Reference | d.referencesStarStar())]
		[d.addImport(buildImportDto(r.referencedType.oclAsType(DTO)))/]
		[d.addImport(buildImportColumnsEnum(r.referencedType.oclAsType(DTO)))/]
	[/for]
[/if]

[d.addImport(buildPackageBusinessApiDto(d) + '.' + buildAttributesEnumName(d))/]
[d.addImport(buildPackagePersistence() + '.' + buildParamPersistenceClassName())/]
[d.addImport(buildPackagePersistence() + '.' + buildUserPersistenceAppClassName())/]
[d.addImport(d.buildImportDto())/]
[d.addImport(d.buildImportEnum())/]
[d.addImport(d.buildImportDaoInterface())/]
[d.addImport(d.buildImportEntityInterface())/]
[d.addImport('fr.spi4j.persistence.DatabaseLineStatus_Enum')/]
[d.addImport('fr.spi4j.exception.Spi4jValidationException', d.referencesStarStar()->size() > 0)/]
[d.addImport(buildPackageMatching() + '.' + buildAppliMatchAbstractName(), d.hasAutomaticColumns())/]
[d.addImport(d.getImportForMatch_Abs(), not d.hasAutomaticColumns())/]
[d.addImport('fr.spi4j.matching.MatchHelper', d.hasEntityWithVersion())/]

[comment : List all references for relational DTOs. /]
[for (r : Reference | d.referencesNoStar())]
	[d.addImport(buildImportDto(r.referencedType.oclAsType(DTO)))/]
[/for]

[comment : List all references for relational DTOs. /]
[for (r : Reference | d.referencingStar())]
	[d.addImport(buildImportDto(r.containingType.oclAsType(DTO)))/]
[/for]

[for (a : Attribute | d.attributes)][if a.type.oclIsKindOf(Enumeration) ]
[d.addImport(buildPackageEnum(a.type.oclAsType(Enumeration)) + '.' + a.type.oclAsType(Enumeration).buildEnumName())/]
[/if][/for]

[comment : Legacy, to be suppressed... /]
[for (enum: Enumeration | d.getRoot().eAllContents(Enumeration))]
	[d.addImport(buildPackageEnum(enum) + '.' + enum.buildEnumName())/];
[/for]

[d.flushImports()/]
[/template]

[template private defaultValueForColumnType(type : String)]
[if type.equalsIgnoreCase('String')]
"Str"[elseif type.equalsIgnoreCase('XtopSup')]
new XtopSup(DatabaseLineStatus_Enum.active)[elseif type.equalsIgnoreCase('Boolean')]
false[elseif type.equalsIgnoreCase('Integer')]
2[elseif type.equalsIgnoreCase('Long')]
2L[elseif type.equalsIgnoreCase('Float')]
2F[elseif type.equalsIgnoreCase('Double')]
2D[elseif type.equalsIgnoreCase('Date')]
new Date()[elseif type.equalsIgnoreCase('Timestamp')]
new Timestamp(new Date().getTime())[elseif type.equalsIgnoreCase('Time')]
new Time(new Date().getTime())[elseif type.equalsIgnoreCase('Binary')]
getRandomBinary()[elseif type.equalsIgnoreCase('Char')]
'X'[else]null[/if]
[/template]
