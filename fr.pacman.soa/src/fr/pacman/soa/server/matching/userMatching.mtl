[module userMatching('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::commons::convention::rule::methodRule/]

[comment encoding = UTF-8 /]
[template public userMatching(m : soa::System)]
  [m.licence()/]
  package [m.buildPackageMatching()/]; // NOPMD
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [m.writeImports()/]
    
  [/protected]
  
  
  /**
   * Factory permettant de récupérer les instances de classes de matching.
   * @author [m.getAuthorName()/]
  */
  public final class [m.buildUserMatchingGenClassName()/]
  {
     /**
      * Constructeur privé.
      */
     private [m.buildUserMatchingGenClassName()/] ()
     {
        super();
     }
  [for (d : environment::DTO | m.listeDtosFromSystem())]
    [if (not d.isNotPersistent() and not d.isParent())]
         /**
          * Obtenir la façade de services '[d.buildAppliMatchInterfaceName()/]'.
          * @return L'instance désirée.
          */
         public static [d.buildAppliMatchInterfaceName()/] [('get ' + d.buildAppliMatchName()).apply_methodDefault()/] ()
         {
            return new [d.buildAppliMatchClassName()/]();
         }
      
    [/if]
  [/for]
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(m : soa::System) post(self.trim())]
  [m.initImports(true)/]
  [for (d : environment::DTO | m.listeDtosFromSystem())]
    [if (not d.isNotPersistent() and not d.isParent())]
      		[m.addImport(d.buildPackageMatchingInterfaceDto() + '.' + d.buildAppliMatchInterfaceName())/]
      		[m.addImport(d.buildPackageMatchingInterfaceDto() + '.' + d.buildAppliMatchClassName())/]
    [/if]
  [/for]
  [m.flushImports()/][/template]