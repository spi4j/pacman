[comment encoding = UTF-8 /]
[module appliMatchAbs('http://www.obeonetwork.org/dsl/soa/4.0.0',
                      'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::utils /]

[import fr::pacman::soa::common::packages /]
[import fr::pacman::soa::common::imports /]
[import fr::pacman::soa::common::name /]
[import fr::pacman::soa::common::outils /]
[import fr::pacman::soa::common::attributes /]
[import fr::pacman::soa::common::classes /]

[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::variableRule /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::convention::project::surcouche /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::imports /]

[template public appliMatchAbs(n : Namespace)]
[licence()/]
package [buildPackageMatching()/];
// [protected ('for imports')]

[comment : Write all required imports. /]
[n.writeImports()/]

// [/protected]

/**
 * Classe abstraite de Matching entre le DTO et l'entity spécifique à l'application en particulier pour 
 * gérer les attributs SQL additionnels tels que xtopsup et xdmaj (par exemple).
 * Cette classe intermédiaire n'est générée que lors de l'ajout de champs automatiques !
 *
 * Dans le cadre du champ automatique de suppression logique les valeurs possibles sont : 
 * 
 * - 0 'active' : La ligne est disponible pour l'ensemble des opérations SQL.
 * - 1 'deletedForNewReference : La ligne n'est plus disponible pour des créations y faisant référence.
 * - 2 'deletedForAll' : La ligne n'est plus disponible, elle est considérée comme supprimée.
 * - 3 'deletedForTrash' : La ligne est à supprimer physiquement de la base (batch, etc...).
 * 
 * @author [getAuthorName()/]
 * @param <TypeId>
 *           Type de l'identifiant du DTO
 * @param <TypeDto>
 *           Type de DTO
 * @param <TypeEntity>
 *           Type d'entity
 * @param <Columns_Enum>
 *           Type de l'énumération des colonnes
 */
public abstract class [buildAppliMatchAbstractName()/]<TypeId, TypeDto extends [getClassNameForDto_Itf()/]<TypeId>, TypeEntity extends [buildAppliEntityInterfaceName()/]<TypeId>, Columns_Enum extends [getClassNameForColumnsNames_Itf()/]>
         extends [getClassNameForMatch_Abs()/]<TypeId, TypeDto, TypeEntity, Columns_Enum>
{

   // attributs
   // [protected (n.getUserCodeId('attributs'))]

   // [/protected]

   @Override
   public void create (final TypeDto [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
      // create
      // [protected (n.getUserCodeId('create'))]

	  final TypeEntity [apply_variableFinal('entity')/] = convertDtoToEntity([apply_parameterMethodClassicIn('dto')/]);
      [if hasXtopSup()][apply_variableFinal('entity')/].[apply_methodSet(getXtopSupName())/](new XtopSup(DatabaseLineStatus_Enum.active));[/if]
      [if hasXdMaj()][apply_variableFinal('entity')/].[apply_methodSet(getXdMajName())/](new Date());[/if]
      getDao().create([apply_variableFinal('entity')/]);
      refreshDtoFromEntity([apply_variableFinal('entity')/], [apply_parameterMethodClassicIn('dto')/]);

      // [/protected]
   }

   @Override
   public TypeDto findById (final TypeId [apply_parameterMethodClassicIn('id')/])
   {
      // findById
      // [protected (n.getUserCodeId('findById'))]

      final TypeEntity [apply_variableFinal('entity found')/] = getDao().findById([apply_parameterMethodClassicIn('id')/]);
      // Si le xtopsup est < 3 on renvoie une exception comme si la donnée n'avait pas été trouvée.
      if (!DatabaseLineStatus_Enum.forSelect([apply_variableFinal('entity found')/].[apply_methodGet(getXtopSupName())/]().get_value()))
         throw new Spi4jRuntimeException("Donnée non trouvée (id=" + [apply_parameterMethodClassicIn('id')/] + ')', "???");
     
      return convertEntityToDto([apply_variableFinal('entity found')/]);

      // [/protected]
   }

   @Override
   public List<TypeDto> findAll ()
   {
      // findAll
      // [protected (n.getUserCodeId('findAll'))]

	  final Map<String, String> [apply_variableFinal('xtopsup status')/] = new HashMap<>();
      [apply_variableFinal('xtopsup status')/].put("[getXtopSupName()/]-param1", DatabaseLineStatus_Enum.active.get_value());
	  [apply_variableFinal('xtopsup status')/].put("[getXtopSupName()/]-param2", DatabaseLineStatus_Enum.deletedForNewReference.get_value());

      // On recherche toutes les lignes dont le xtopsup est < 3.
      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria("where " 
          + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param1 or " 
          + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param2",
               [apply_variableFinal('xtopsup status')/]);

      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);

      // [/protected]
   }

   @Override
   public List<TypeDto> findAll (final Columns_Enum [apply_parameterMethodClassicIn('order by column')/])
   {
      // findAllOrberByColumn
      // [protected (n.getUserCodeId('findAllOrberByColumn'))]
 	  
      final TableCriteria<[getClassNameForColumnsNames_Itf()/]> [apply_variableFinal('table criteria')/] = new TableCriteria<>("");

      // On recherche toutes les lignes dont le xtopsup est < 3.
      [apply_variableFinal('table criteria')/].addCriteria([buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.active.get_value());
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.or, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.deletedForNewReference.get_value());
      [apply_variableFinal('table criteria')/].addOrderByAsc([apply_parameterMethodClassicIn('order by column')/]);

      @SuppressWarnings({"rawtypes", "unchecked" })
      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria((TableCriteria) [apply_variableFinal('table criteria')/]);
      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);

      // [/protected]
   }

   @Override
   public void update (final TypeDto [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
      // update
      // [protected (n.getUserCodeId('update'))]

	  // Si la ligne n'est pas active, on rejete la demande. 
	  final TypeEntity [apply_variableFinal('entity found')/] = getDao().findById([apply_parameterMethodClassicIn('dto')/].getId());
	  if(null == [apply_variableFinal('entity found')/] || !DatabaseLineStatus_Enum.forUpdate([apply_variableFinal('entity found')/].[apply_methodGet(getXtopSupName())/]().get_value()))
			throw new Spi4jRuntimeException("Cette donnée a été supprimée par un autre utilisateur.", "???");

	  // On effectue la mise à jour.
      final TypeEntity [apply_variableFinal('entity')/] = convertDtoToEntity([apply_parameterMethodClassicIn('dto')/]);
      [if hasXdMaj()][apply_variableFinal('entity')/].[apply_methodSet(getXdMajName())/](new Date());[/if]
      [if hasXtoSup_XdMaj()][apply_variableFinal('entity')/].[apply_methodSet(getXtopSupName())/](new XtopSup(DatabaseLineStatus_Enum.active));[/if]
      getDao().update([apply_variableFinal('entity')/]);
      refreshDtoFromEntity([apply_variableFinal('entity')/], [apply_parameterMethodClassicIn('dto')/]);

      // [/protected]
   }

   @Override
   public void delete (final TypeDto [apply_parameterMethodClassicIn('dto')/]) throws Spi4jValidationException
   {
      // delete
      // [protected (n.getUserCodeId('delete'))]

      final TypeEntity [apply_variableFinal('entity')/] = convertDtoToEntity([apply_parameterMethodClassicIn('dto')/]);
      final TypeEntity [apply_variableFinal('entity found')/] = getDao().findById([apply_variableFinal('entity')/].getId());

      // Si [apply_variableFinal('entity found')/] est null ou que l'entité à supprimer a déjà le xtopsup > 1 
      // alors on renvoie une exception indiquant que la donnée a déjà été supprimée.
	  [if hasXtopSup()]
	  if (null == [apply_variableFinal('entity found')/] || !DatabaseLineStatus_Enum.forDelete([apply_variableFinal('entity found')/].[apply_methodGet(getXtopSupName())/]().get_value()))
         throw new Spi4jRuntimeException("Cette donnée a été supprimée par un autre utilisateur.", "???");
     
 	  [apply_variableFinal('entity')/].[apply_methodSet(getXtopSupName())/](new XtopSup(DatabaseLineStatus_Enum.deletedForAll));
      [/if] 
      [if hasXdMaj()][apply_variableFinal('entity')/].[apply_methodSet(getXdMajName())/](new Date());[/if]
      getDao().update([apply_variableFinal('entity')/]);
      refreshDtoFromEntity([apply_variableFinal('entity')/], [apply_parameterMethodClassicIn('dto')/]);

      // [/protected]
   }

   @Override
   public int deleteAll ()
   {
      // deleteAll
      // [protected (n.getUserCodeId('deleteAll'))]

      // Attention ici on veut probablement faire un vrai deleteAll() et non pas mettre à 1 la colonne xtopsup
      return super.deleteAll();

      // [/protected]
   }

   @Override
   public int deleteByCriteria (final TableCriteria<Columns_Enum> [apply_parameterMethodClassicIn('criteria')/])
   {
      // deleteByCriteria
      // [protected (n.getUserCodeId('deleteByCriteria'))]

      @SuppressWarnings("unchecked")
      final TableCriteria<[getClassNameForColumnsNames_Itf()/]> [apply_variableFinal('table criteria')/] = (TableCriteria<[getClassNameForColumnsNames_Itf()/]>) [apply_parameterMethodClassicIn('criteria')/].clone();
      
      // Si entityFound est null ou que l'entité à supprimer a déjà le xtopsup > 1 
      // alors on renvoie une exception indiquant que la donnée a déjà été supprimée.
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.and, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.active.get_value());
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.or, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.deletedForNewReference.get_value());
      
      final String [apply_variableFinal('criteria sql')/] = [apply_variableFinal('table criteria')/].getCriteriaSql();
      final String [apply_variableFinal('table name')/] = getDao().getTableName();
      final String [apply_variableFinal('query')/] = "update " + [apply_variableFinal('table name')/] + " set " + [buildAppliColumnClassName()/].[getXtopSupName()/] + " = :xtopsupValue "
               + [apply_variableFinal('criteria sql')/];
      final Map<String, Object> [apply_variableMultipleMap('value by name')/] = new HashMap<>([apply_variableFinal('table criteria')/].getMapValue());
      [apply_variableMultipleMap('value by name')/].put("xtopsupValue", DatabaseLineStatus_Enum.deletedForAll.get_value());

      return getDao().executeUpdate([apply_variableFinal('query')/], [apply_variableMultipleMap('value by name')/]);
     
      // [/protected]
   }

   @Override
   public List<TypeDto> findByColumn (final Columns_Enum [apply_parameterMethodClassicIn('column')/], final Object [apply_parameterMethodClassicIn('value')/])
   {
      // findByColumn
      // [protected (n.getUserCodeId('findByColumn'))]

      final TableCriteria<[getClassNameForColumnsNames_Itf()/]> [apply_variableFinal('table criteria')/] = new TableCriteria<>("");

      // On recherche toutes les lignes dont le xtopsup est < 3.
      [apply_variableFinal('table criteria')/].addCriteria([apply_parameterMethodClassicIn('column')/], Operator_Enum.equals, [apply_parameterMethodClassicIn('value')/]);
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.and, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.active.get_value());
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.or, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.deletedForNewReference.get_value());
      
	  @SuppressWarnings({"rawtypes", "unchecked" })
      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria((TableCriteria) [apply_variableFinal('table criteria')/]);
      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);
      
      // [/protected]
   }

   @Override
   public List<TypeDto> findByCriteria (final String [apply_parameterMethodClassicIn('criteria')/],
            final Map<String, ? extends Object> [apply_parameterMethodMultipleMap('value name')/])
   {
      // findByCriteriaSql
      // [protected (n.getUserCodeId('findByCriteriaSql'))]

      // On doit ajouter le critère xtopsup < 3 devant un éventuel order by avant d'appeler findByCriteria
      final String [apply_variableFinal('sql criteria')/] = [apply_methodDefault('add xtopsup criteria')/]([apply_parameterMethodClassicIn('criteria')/]); // critère sql modifié
      final Map<String, Object> [apply_variableMultipleMap('value by name')/];
      if ([apply_parameterMethodMultipleMap('value name')/] == null)
      {
         [apply_variableMultipleMap('value by name')/] = new HashMap<>();
      } else {
         [apply_variableMultipleMap('value by name')/] = new HashMap<>([apply_parameterMethodMultipleMap('value name')/]);
      }
      
  	  // On recherche uniquement les lignes dont le xtopsup est < 3.
	  [apply_variableMultipleMap('value by name')/].put("[getXtopSupName()/]-param1", DatabaseLineStatus_Enum.active.get_value());
 	  [apply_variableMultipleMap('value by name')/].put("[getXtopSupName()/]-param2", DatabaseLineStatus_Enum.deletedForNewReference.get_value());

      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria([apply_variableFinal('sql criteria')/], [apply_variableMultipleMap('value by name')/]);
      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);
  
      // [/protected]
   }

   @Override
   public List<TypeDto> findByCriteria (final String [apply_parameterMethodClassicIn('criteria')/],
            final Map<String, ? extends Object> [apply_parameterMethodMultipleMap('value name')/], final int [apply_parameterMethodClassicIn('nb lignes max')/], final int [apply_parameterMethodClassicIn('nb lignes start')/])
   {
      // findByCriteriaSqlNbLignes
      // [protected (n.getUserCodeId('findByCriteriaSqlNbLignes'))]

      // On doit ajouter le critère xtopsup < 3 devant un éventuel order by avant d'appeler findByCriteria
      final String [apply_variableFinal('sql criteria')/] = [apply_methodDefault('add xtopsup criteria')/]([apply_parameterMethodClassicIn('criteria')/]); // critère sql modifié
      final Map<String, Object> [apply_variableMultipleMap('value by name')/];
      if ([apply_parameterMethodMultipleMap('value name')/] == null)
      {
         [apply_variableMultipleMap('value by name')/] = new HashMap<>();
      } else {
         [apply_variableMultipleMap('value by name')/] = new HashMap<>([apply_parameterMethodMultipleMap('value name')/]);
      }

	  // On recherche uniquement les lignes dont le xtopsup est > 3.
	  [apply_variableMultipleMap('value by name')/].put("[getXtopSupName()/]-param1", DatabaseLineStatus_Enum.active.get_value());
 	  [apply_variableMultipleMap('value by name')/].put("[getXtopSupName()/]-param2", DatabaseLineStatus_Enum.deletedForNewReference.get_value());

      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria([apply_variableFinal('sql criteria')/], [apply_variableMultipleMap('value by name')/], [apply_parameterMethodClassicIn('nb lignes max')/],
               [apply_parameterMethodClassicIn('nb lignes start')/]);
      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);
     
      // [/protected]
   }

   @Override
   public List<TypeDto> findByCriteria (final TableCriteria<Columns_Enum> [apply_parameterMethodClassicIn('criteria')/])
   {
      // findByCriteria
      // [protected (n.getUserCodeId('findByCriteria'))]

      @SuppressWarnings("unchecked")
      final TableCriteria<[getClassNameForColumnsNames_Itf()/]> [apply_variableFinal('table criteria')/] = (TableCriteria<[getClassNameForColumnsNames_Itf()/]>) [apply_parameterMethodClassicIn('criteria')/].clone();
      
	  // On recherche uniquement les lignes dont le xtopsup est < 3.
	  [apply_variableFinal('table criteria')/].addCriteria([buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.active.get_value());
      [apply_variableFinal('table criteria')/].addCriteria(OperatorLogical_Enum.or, [buildAppliColumnClassName()/].[getXtopSupName()/], 
			Operator_Enum.equals, DatabaseLineStatus_Enum.deletedForNewReference.get_value());
      
 	  @SuppressWarnings({"rawtypes", "unchecked" })
      final List<TypeEntity> [apply_variableMultipleDefault('entity')/] = getDao().findByCriteria((TableCriteria) [apply_variableFinal('table criteria')/]);
      return convertListEntityToListDto([apply_variableMultipleDefault('entity')/]);
   
      // [/protected]
   }

   // autres methodes
   // [protected (n.getUserCodeId('autres methodes'))]

   /**
    * @param [apply_parameterMethodClassicIn('criteria')/]
    *           le critère sql auquel il faut ajouter le xtopsup < 3
    * @return le critère auquel on a ajouté le xtopsup < 3
    */
   private String [apply_methodDefault('add xtopsup criteria')/] (final String [apply_parameterMethodClassicIn('criteria')/])
   {
      // On doit ajouter le critère xtopsup < 3 devant un éventuel order by avant d'appeler findByCriteria
      String [apply_variableDefault('xtopsup criterium')/]; // critère à ajouter
      final String [apply_variableFinal('table name')/] = getDao().getTableName();
      if ([apply_parameterMethodClassicIn('criteria')/].contains("where"))
      {
         [apply_variableDefault('xtopsup criterium')/] = " and " + [apply_variableFinal('table name')/] + '.' + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param1 or " 
         + [apply_variableFinal('table name')/] + '.' + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param2 ";
      }
      else
      {
         [apply_variableDefault('xtopsup criterium')/] = " where " + [apply_variableFinal('table name')/] + '.' + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param1 and "
         + [apply_variableFinal('table name')/] + '.' + [buildAppliColumnClassName()/].[getXtopSupName()/].getPhysicalColumnName() + " = :[getXtopSupName()/]-param2 ";
      }
      String [apply_variableFinal('str criteria')/]; // critère sql modifié
      // On sépare le critère sql selon la chaine "order by" pour avoir dans [apply_variableMultipleDefault('sql criteria')/]['[0]'/] la partie avant le order by et
      // dans un éventuel [apply_variableMultipleDefault('sqlCriteria')/]['[1]'/] la partie après le order by s'il existe
      final String['[]'/] [apply_variableMultipleDefault('sqlCriteria')/] = [apply_parameterMethodClassicIn('criteria')/].split("order by");
      // On ajoute ici le critère xtopsup avant l'éventuel order by
      [apply_variableFinal('str criteria')/] = [apply_variableMultipleDefault('sql criteria')/]['[0]'/] + [apply_variableDefault('xtopsup criterium')/];
      // si [apply_variableMultipleDefault('sql criteria')/].length > 1 c'est qu'il y avait un order by dans le critère initial : alors on le rajoute à la fin de [apply_variableFinal('sql criteria')/]
      if ([apply_variableMultipleDefault('sql criteria')/].length > 1)
      {
         [apply_variableFinal('str criteria')/] += " order by " + [apply_variableMultipleDefault('sql criteria')/]['[1]'/];
      }
      return [apply_variableFinal('str criteria')/];
   }

   // [/protected]
}
[/template]


[comment : Write all required imports. /]
[template private writeImports(n : Namespace) post(trim())]
[n.initImports(true)/]

[n.addImport('java.util.List')/]
[n.addImport('java.util.Map')/]
[n.addImport('java.util.Date')/]
[n.addImport('java.util.Collections')/]
[n.addImport('fr.spi4j.type.XtopSup')/]
[n.addImport('fr.spi4j.exception.Spi4jValidationException')/]
[n.addImport('fr.spi4j.exception.Spi4jRuntimeException')/]
[n.addImport('fr.spi4j.persistence.dao.TableCriteria')/]
[n.addImport('fr.spi4j.persistence.dao.OperatorLogical_Enum', hasXtopSup())/]
[n.addImport('fr.spi4j.persistence.DatabaseLineStatus_Enum', hasXtopSup())/]
[n.addImport(buildPackagePersistenceApi() + '.' + buildAppliEntityInterfaceName())/]
[n.addImport(getImportForDto_Itf())/]
[n.addImport(getImportForMatch_Abs())/]
[n.addImport(getImportForColumnsNames_Itf())/]

[n.flushImports()/]
[/template]
