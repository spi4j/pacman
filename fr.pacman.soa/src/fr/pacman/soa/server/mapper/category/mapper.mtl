[module mapper('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::commons::soa::common::packages/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::commons::business::api::category::dto/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public mapper(d : environment::DTO)]
  [d.licence()/]
  package [d.buildPackageMapperDto()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.writeImports()/]
    
  [/protected]
  
  
  /**
   * Impl√©mentation pour le Mapper (= Dto <-> Xto) sur le type '[d.nameClassDto()/]'.
   * @author [d.getAuthorName()/]
   */
  public class [d.buildMapperClassName()/] extends [d.getClassNameForMapper_Abs()/]<[d.buildDtoClassName()/], [d.buildXtoClassNameFromDto()/]> implements [d.buildMapperInterfaceName()/]
  {
  
     @Override
     public [d.buildXtoClassNameFromDto()/] convertDtoToXto (final [d.buildDtoClassName()/] ['dto'.apply_parameterMethodClassicIn()/])
     {
        final [d.buildXtoClassNameFromDto()/] ['xto'.apply_variableFinal()/] = super.convertDtoToXto(['dto'.apply_parameterMethodClassicIn()/]);
  
        // convertDtoToXto
        [protected (d.getUserCodeId('convertDtoToXto')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
        return ['xto'.apply_variableFinal()/];
     }
  
     @Override
     public [d.buildDtoClassName()/] convertXtoToDto (final [d.buildXtoClassNameFromDto()/] ['xto'.apply_parameterMethodClassicIn()/])
     {
        final [d.buildDtoClassName()/] ['dto'.apply_variableFinal()/] = super.convertXtoToDto(['xto'.apply_parameterMethodClassicIn()/]);
  
        // convertXtoToDto
        [protected (d.getUserCodeId('convertXtoToDto')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
        return ['dto'.apply_variableFinal()/];
     }
  
     @Override
     protected [d.buildDtoClassName()/] getInstanceOfDto ()
     {
        return new [d.buildDtoClassName()/]();
     }
  
     @Override
     protected [d.buildXtoClassNameFromDto()/] getInstanceOfXto ()
     {
        return new [d.buildXtoClassNameFromDto()/]();
     }
  
     @Override
     protected [d.getClassNameForMapper_Itf()/]<? extends [d.getClassNameForDto_Itf()/]<?>, ? extends [d.getClassNameForXto_Itf()/]<?>> getSpecificMapper (final String ['field name'.apply_parameterMethodClassicIn()/])
     {
  [for (r : environment::Reference | d.referencesNoStar())]
          if ("[r.name.apply_attributeDefault()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          {
             return [r.referencedType.oclAsType(environment::DTO).buildAppliUserMapperGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildMapperClassName()).apply_methodDefault()/]();
          }
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
          if ("[r.name.apply_attributeMultiple()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          {
             return [r.referencedType.oclAsType(environment::DTO).buildAppliUserMapperGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildMapperClassName()).apply_methodDefault()/]();
          }
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
          if ("[r.name.apply_attributeMultiple()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          {
             return [r.referencedType.oclAsType(environment::DTO).buildAppliUserMapperGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildMapperClassName()).apply_methodDefault()/]();
          }
  [/for]
        return super.getSpecificMapper(['field name'.apply_parameterMethodClassicIn()/]);
     }
  
     // [d.nameMapper()/]
     [protected (d.getUserCodeId(d.nameMapper())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(d : environment::DTO) post(self.trim())]
  [d.initImports()/]
  [d.addImport(d.getImportForDto_Itf())/]
  [d.addImport(d.getImportForMapper_Abs())/]
  [d.addImport(d.getImportForMapper_Itf())/]
  [d.addImport(d.getImportForXto_Itf())/]
  [d.addImport(d.buildPackageBusinessApiDto() + '.' + d.buildDtoClassName())/]
  [d.addImport(d.buildPackageWsApiDto() + '.' + d.buildXtoClassNameFromDto())/]
  [d.addImport(d.buildPackageMapper() + '.' + d.buildAppliUserMapperGenClassName(), d.references->exists(r | r.navigable))/]
  [d.flushImports()/][/template]