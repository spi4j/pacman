[module userBusiness('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public userBusiness(m : soa::System)]
  [m.licence()/]
  // CHECKSTYLE:OFF
  package [m.buildPackageBusiness()/]; // NOPMD
  // CHECKSTYLE:ON
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [m.writeImporsForBusiness()/]
    
  [/protected]
  
  /**
   * Classe permettant de centraliser les factories business de l'application.
   * @author [m.getAuthorName()/]
   */
  public final class [m.buildAppliUserBusinessGenClassName()/] extends [m.getClassNameForUserBusiness_Abs()/]
  {
  
     /** Singleton. */
     private static [m.buildAppliUserBusinessGenClassName()/] ['singleton'.apply_attributeStatic()/] = new [m.buildAppliUserBusinessGenClassName()/]();
  
     /**
      * Constructeur privé.
      */
     private [m.buildAppliUserBusinessGenClassName()/] ()
     {
        super();
     }
  
  [for (d : environment::DTO | m.listeDtosFromSystem())]
    [if (not d.isNotPersistent() and not d.isParent() or d.serviceFromDto() <> null)]
         /**
          * Obtenir la façade de services '[null.buildServiceInterfaceName(d)/]'.
          * @return L'instance désirée.
          */
         public static [null.buildServiceInterfaceName(d)/] [('get ' + null.buildServiceName(d)).apply_methodDefault()/] ()
         {
            return ['singleton'.apply_attributeStatic()/].getBinding([null.buildServiceInterfaceName(d)/].class);
         }
      
    [/if]
  [/for]
  [for (srv : soa::Service | m.listeServicesFromSystem())]
    [if (srv.serviceSeulFromSystem(m))]
      
         /**
          * Obtenir la façade de services '[srv.buildServiceInterfaceName(null)/]'.
          * @return L'instance désirée.
          */
         public static [srv.buildServiceInterfaceName(null)/] [('get ' + srv.buildServiceName(null)).apply_methodDefault()/] ()
         {
            return ['singleton'.apply_attributeStatic()/].getBinding([srv.buildServiceInterfaceName(null)/].class);
         }
    [/if]
  [/for]
  
     /**
      * @return le ['singleton'.apply_attributeStatic()/] de cette factory
      */
     public static [m.buildAppliUserBusinessGenClassName()/] getSingleton ()
     {
        return ['singleton'.apply_attributeStatic()/];
     }
  
     @Override
     protected [m.getClassNameForUserPersistence_Abs()/] getUserPersistence ()
     {
  [if (m.usePersistence())]
          // dans cette factory de la partie commune entre un client et le serveur
          // on ne référence pas les classes d'implémentations "serveur" des services
          // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
    
          try
          {
             return ([m.getClassNameForUserPersistence_Abs()/]) Class.forName("[m.buildPackagePersistence()/].[m.buildParamPersistenceClassName()/]")
                      .getMethod("['get user persistence'.apply_methodDefault()/]").invoke(null);
          }
          catch (final Exception ['ex'.apply_variableFinal()/])
          {
             // ne devrait jamais arriver grâce à la génération de code
             throw new Spi4jRuntimeException(['ex'.apply_variableFinal()/], ['ex'.apply_variableFinal()/].toString(), "???");
          }
  [else]
    	  	// Pas de persistance pour cette application.
    		// Cette méthode n'a aucunne raison d'être appelée par spi4j.
    	  	return null;
  [/if]
     }
  
     // CHECKSTYLE:OFF
     @Override
     // CHECKSTYLE:ON
     public void initBindings () // NOPMD
     {
        // dans cette factory de la partie commune entre un client et le serveur
        // on ne référence pas les classes d'implémentations "serveur" des services
        // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
  [for (d : environment::DTO | m.listeDtosFromSystem())]
    [if (not d.isNotPersistent() and not d.isParent() or d.serviceFromDto() <> null)]
            final [null.buildServiceInterfaceName(d)/] [null.buildServiceName(d).apply_variableObjectDefault()/] = wrapService([null.buildServiceInterfaceName(d)/].class, "[d.serviceFromDto().buildPackageBusinessImplementationServiceDto(d)/].[null.buildServiceClassName(d)/]");
            bind([null.buildServiceInterfaceName(d)/].class, [null.buildServiceName(d).apply_variableObjectDefault()/]);
      
    [/if]
  [/for]
  [for (srv : soa::Service | m.listeServicesFromSystem())]
    [if (srv.serviceSeulFromSystem(m))]
            final [srv.buildServiceInterfaceName(null)/] [srv.buildServiceName(null).apply_variableObjectDefault()/] = wrapService([srv.buildServiceInterfaceName(null)/].class, "[srv.buildPackageBusinessImplementationServiceDto(null)/].[srv.buildServiceClassName(null)/]");
            bind([srv.buildServiceInterfaceName(null)/].class, [srv.buildServiceName(null).apply_variableObjectDefault()/]);
      
    [/if]
  [/for]
     }
  }[/template]

[comment : write all required imports for the class. /]
[template private writeImporsForBusiness(m : soa::System) post(self.trim())]
  [m.initImports()/]
  [m.addImport('fr.spi4j.exception.Spi4jRuntimeException')/]
  [m.addImport(m.getImportForUserBusiness_Abs())/]
  [m.addImport(m.getImportForUserPersistence_Abs())/]
  
  [for (srv : soa::Service | m.listeServicesFromSystem())]
    [if (srv.serviceSeulFromSystem(m))]
      		[m.addImport(srv.buildImportServiceInterface(null))/]
    [/if]
  [/for]
  
  [for (d : environment::DTO | m.listeDtosFromSystem())]
    [if (not d.isNotPersistent() and not d.isParent() or d.serviceFromDto() <> null)]
      		[m.addImport(d.serviceFromDto().buildPackageBusinessApiServiceDto(d) + '.' + null.buildServiceInterfaceName(d))/]
    [/if]
  [/for]
  
  [m.flushImports()/][/template]