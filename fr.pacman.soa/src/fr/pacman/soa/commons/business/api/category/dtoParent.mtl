[module dtoParent('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::types::packages/]
[import fr::pacman::commons::types::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::requests::counterQueries/]
[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::soa::common::packages/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public getExternalUserBusinessGen(d : environment::DTO)]
  [for (r : environment::Reference | d.references)]
    [if (r.referencedType.oclAsType(environment::DTO) <> null and not r.referencedType.oclAsType(environment::DTO).buildImportUserBusinessGen().toString().contains(d.buildImportUserBusinessGen()))][r.referencedType.oclAsType(environment::DTO).buildImportUserBusinessGen()/][/if]
  [/for]
[/template]

[template public dtoParent(d : environment::DTO)]
  [d.licence()/]
  package [d.buildPackageBusinessApiDto()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    [let attributs : OrderedSet(environment::Attribute) = d.getAttributes()]
    [/let]
    [d.writeImports()/]
    
  [/protected]
  
  
  /**
   * DTO abstrait '[d.nameClassDto()/]'.
   * @author [d.getAuthorName()/]
   */
  public abstract class [d.buildDtoClassName()/] implements [d.getClassNameForDto_Itf()/]<[d.genPkType()/]>[if (d.useSpi4jSecurity() and d.dtoIsUser())], User_Itf[/if]
  
  {
     /**
      * SerialUid.
      */
     private static final long serialVersionUID = -1;
  
     // ATTRIBUTS
  
     /** L'identifiant. */
     private [d.genPkType()/] [d.namePK_ID()/];
  
  [for (a : environment::Attribute | d.attributesNotComputed())]
       /** [a.description/]. */
       [a.getProperty()/];
    
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
         /** La FK sur le Type '[r.nameClassDto()/]'. */
         [r.getDtoReferenceId()/]
      
    [/if]
       /** L'instance de '[r.referencedType.oclAsType(environment::DTO).genTypeName()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
       [r.getDtoReference()/]
    
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
       /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
       [r.getRefListe()/]
    
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
       /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
       [r.getRefListe()/]
    
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
       /** La FK sur le type '[r.containingType.oclAsType(environment::DTO).nameBaseDtoUP()/]'. */
       [r.getDtoReferenceInverseId()/]
    
  [/for]
  [if (not d.isNotPersistent() and d.hasEntityWithVersion())]
       /** La valeur de la version. */
       @SuppressWarnings("all")
       private Serializable ['version value'.apply_attributeDefault()/];
    
  [/if]
     // METHODES
  
     /**
      * Constructeur sans paramètre du dto '[d.nameClassDto()/]'.
      */
     public [d.buildDtoClassName()/] ()
     {
        super();
     }
  
     @Override
     public [d.genPkType()/] getId ()
     {
        return [d.namePK_ID()/];
     }
  
     @Override
     public void setId (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/])
     {
        [d.getAffectationPrefix()/][d.namePK_ID()/] = [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/];
     }
  
  [for (a : environment::Attribute | d.getAttributes())]
       /**
    [a.comPrefix('Obtenir')/]
    [a.comReturn()/]
        */
    [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
         @Override
         public String getIdentifiant ()
    [else]
         [a.getGetter()/]
    [/if]
       {
    [if (a.isComputed())]
            // [a.name.apply_attributeDefault()/]
            [protected (a.getUserCodeId(a.name.apply_attributeDefault())) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO Calculer l'attribut
                    return null;
            [/protected]
      
    [else]
            return [a.name.normalize().apply_attributeDefault()/];
    [/if]
       }
    
    [if (not a.isComputed())]
         /**
      [a.comPrefix('Affecter')/]
      [a.getComParamIn()/]
          */
      [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
           public void setIdentifiant (final [a.genPropertyType()/] [a.name.normalize().apply_parameterMethodClassicIn()/])
      [else]
           [a.getSetter()/]
      [/if]
         {
            [a.getAffectationPrefix()/][a.name.normalize().apply_attributeDefault()/] = [a.name.normalize().apply_parameterMethodClassicIn()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
         /**
      [r.comPrefix('Obtenir')/]
      [r.comReturn()/]
          */
         [r.getGetterIdDto()/]
         {
            if ([r.name.normalize().apply_attributeDefault()/] != null)
            {
               [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.normalize().apply_attributeDefault()/].getId();
            }
            return [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/];
         }
      
         /**
      [r.comPrefix('Affecter')/]
      [r.getComParamIdIn()/]
          */
         [r.getSetterIdDto()/]
         {
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.normalize().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/] = null;
         }
      
    [/if]
       /**
    [r.comPrefix('Obtenir')/]
    [r.comReturn()/]
        */
       [r.getGetter()/]
       {
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
            if ([r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] != null && [r.name.normalize().apply_attributeDefault()/] == null)
            {
               [r.name.normalize().apply_attributeDefault()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildSimpleDtoName() + ' service').apply_methodDefault()/]().findById([r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/]);
            }
    [/if]
          return [r.name.normalize().apply_attributeDefault()/];
       }
    
       /**
    [r.comPrefix('Affecter')/]
    [r.getComParamIn()/]
        */
       [r.getSetterDtoReference()/]
       {
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
            if ([r.name.normalize().apply_parameterMethodClassicIn()/] == null)
            {
               [r.name.normalize().apply_methodSet()/][r.namePK_ID()/](null);
            }
            else
            {
               [r.name.normalize().apply_methodSet()/][r.namePK_ID()/]([r.name.normalize().apply_parameterMethodClassicIn()/].getId());
            }
    [/if]
          [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/] = [r.name.normalize().apply_parameterMethodClassicIn()/];
       }
    
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
       /**
    [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
    [r.comReturn()/]
        */
       [r.getGetterListDto()/]
       {
          if ([r.namePK_ID()/] != null && [r.name.normalize().apply_attributeMultiple()/] == null)
          {
             [r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessGenClassName()/].[('get ' + d.buildSimpleDtoName() + ' service').apply_methodDefault()/]().[r.getFindListRefByDto(d)/]([r.namePK_ID()/]);
          }
          return [r.name.normalize().apply_attributeMultiple()/];
       }
    
       /**
    [r.comPrefix('Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
    [r.getComParamTabIn()/]
        */
       [r.getSetterListDto()/]
       {
          [r.getAffectationPrefix()/][r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
       }
    
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
       /**
    [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
    [r.comReturn()/]
        */
       [r.getGetterListDto()/]
       {
    [if (not r.containingType.oclAsType(environment::DTO).isNotPersistent())]
            if ([r.namePK_ID()/] != null && [r.name.normalize().apply_attributeMultiple()/] == null)
            {
               [r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildSimpleDtoName() + ' service').apply_methodDefault()/]().[r.getFindListRefInverseByDto(d)/]([r.namePK_ID()/]);
            }
    [/if]
          return [r.name.normalize().apply_attributeMultiple()/];
       }
    
       /**
    [r.comPrefix('Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
    [r.getComParamTabIn()/]
        */
       [r.getSetterListDto()/]
       {
          [r.getAffectationPrefix()/][r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
       }
    
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
       /**
        * Obtenir [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
    [r.comReturnInverse()/]
        */
       [r.getGetterInverseIdDto()/]
       {
          return [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];
       }
    
       /**
        * Affecter [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
    [r.getComParamInverseIdIn()/]
        */
       [r.getSetterInverseIdDto()/]
       {
          [r.getAffectationPrefix()/][r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
       }
    
  [/for]
  [for (r : environment::Reference | d.referencesComputedNoStar())]
       /**
    [r.comPrefix('Obtenir l\'instance de \'' + r.nameClassDto() + '\' calculee :')/]
    [r.comReturn()/]
        */
       [r.getGetter()/]
       {
          // [r.name.normalize().apply_methodGet()/]
          [protected (r.getUserCodeId(r.name.normalize().apply_methodGet())) startTagPrefix('// ') endTagPrefix('// ')]
                  // TODO Calculer la référence
                  return null;
          [/protected]
    
       }
    
  [/for]
  [for (r : environment::Reference | d.referencesComputedStar())]
       /**
    [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' calculee :')/]
    [r.comReturn()/]
        */
       [r.getGetterListDto()/]
       {
          // [('get' + r.name.normalize().apply_attributeMultiple()).apply_methodDefault()/]
          [protected (r.getUserCodeId(('get' + r.name.normalize().apply_attributeMultiple()).apply_methodDefault())) startTagPrefix('// ') endTagPrefix('// ')]
                  // TODO Calculer la référence
                  return null;
          [/protected]
    
       }
    
  [/for]
     /**
      * Vérifie la validité des champs factorisés du DTO parent.
      * @return La liste des champs invalides (null si aucun champ n'est invalide)
      */
     protected List<String> prepareValidate ()
     {
  [if (d.hasMandatoryFields() or d.hasStringFieldWithSize())]
          // valide les attributs
          List<String> ['champs invalides'.apply_variableDefault()/] = null;
    [for (a : environment::Attribute | d.attributesNotComputed())][d.validProperty(a)/][/for]
    [for (r : environment::Reference | d.referencesNoStar())]
      [if (r.oppositeOf = null or not (r.oppositeOf.isMultiple() and r.oppositeOf.navigable))][d.validProperty(r)/][/if]
    [/for]
    [for (r : environment::Reference | d.referencingStar())][d.validPropertyInverse(r)/][/for]
          return ['champs invalides'.apply_variableDefault()/];
  [else]
          // aucun champ obligatoire
          return null;
  [/if]
     }
  
  }[/template]

[template private validProperty(d : environment::DTO, p : environment::Attribute)]
  [if (p.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.normalize().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
  [if (p.oclIsTypeOf(environment::Attribute))][d.validateSize(p.oclAsType(environment::Attribute))/][/if]
[/template]

[template private validProperty(d : environment::DTO, p : environment::Reference)]
  [if (p.isMandatory())]
    [if (not p.referencedType.oclAsType(environment::DTO).isNotPersistent())]
            ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.normalize().apply_attributeDefault()/][d.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
    [else]
            ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.normalize().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
    [/if]
  [/if]
[/template]

[template private validPropertyInverse(d : environment::DTO, r : environment::Reference)]
  [if (r.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[r.nameBaseReferenceInverse()/]", [r.nameBaseReferenceInverse().apply_attributeDefault()/][d.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[template private nameBase(p : environment::Property)]
  [if (p.oclIsTypeOf(environment::Attribute))][p.oclAsType(environment::Attribute).nameBaseAttribute()/][else]
                                                                                                          [if (p.oclIsTypeOf(environment::Reference))][p.oclAsType(environment::Reference).nameBaseReference()/][/if]
                                                                                                        [/if]
[/template]

[template private validateSize(d : environment::DTO, a : environment::Attribute)]
  [if (a.hasSize() and a.type.name = 'String')]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkFieldSize("[a.nameBase()/]", [a.name.normalize().apply_attributeDefault()/], [d.buildAttributesEnumName()/].[a.name.normalize().apply_attributeEnum()/].getSize(), ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[comment : Write all required imports. /]
[template private writeImports(d : environment::DTO) post(self.trim())]
  [d.initImports()/]
  [d.addImport('fr.spi4j.business.dto.DtoUtil')/]
  [d.addImport(d.getImportForDto_Itf(), d.useSpi4jSecurity() and d.dtoIsUser())/]
  [d.addImport('fr.spi4j.lib.security.User_Itf')/]
  [d.addImport(d.buildImportUserBusinessGen(), d.references->size() > 0)/]
  [d.addImport(d.getExternalUserBusinessGen(), d.references->size() > 0)/]
  [d.addImport('java.io.Serializable', not d.isNotPersistent() and d.hasEntityWithVersion())/]
  
  [for (r : environment::Reference | d.references)]
    [if (r.referencedType.oclAsType(environment::DTO) <> null and r.referencedType.oclAsType(environment::DTO).buildPackageBusinessApiDto() <> d.buildPackageBusinessApiDto())]
      [d.addImport(r.referencedType.oclAsType(environment::DTO).buildImportDto())/]
    [/if]
  [/for]
  
  [for (r : environment::Reference | d.referencingStar())]
    [if (r.referencedType.oclAsType(environment::DTO) <> null and r.containingType.oclAsType(environment::DTO).buildPackageBusinessApiDto() <> d.buildPackageBusinessApiDto())]
      [d.addImport(r.containingType.oclAsType(environment::DTO).buildImportDto())/]
    [/if]
  [/for]
  
  [for (enum : environment::Enumeration | d.getRoot().eAllContents(environment::Enumeration))]
    [d.addImport(enum.buildPackageEnum() + '.' + enum.buildEnumName())/]
  [/for]
  [d.flushImports()/][/template]