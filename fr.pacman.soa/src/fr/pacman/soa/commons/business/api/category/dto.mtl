[comment encoding = UTF-8 /]
[module dto('http://www.obeonetwork.org/dsl/soa/4.0.0',
            'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::utils /]
[import fr::pacman::commons::common::imports /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::packages /]

[import fr::pacman::commons::types::packages /]
[import fr::pacman::commons::types::names /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::attributes /]
[import fr::pacman::commons::requests::counterQueries /]

[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::commons::soa::common::comments /]
[import fr::pacman::commons::soa::common::references /]
[import fr::pacman::commons::soa::common::names /]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::soa::common::packages/]

[import fr::pacman::soa::common::attributes /]
[import fr::pacman::soa::common::packages /]
[import fr::pacman::soa::common::imports /]
[import fr::pacman::soa::common::name /]
[import fr::pacman::soa::common::classes /]
[import fr::pacman::soa::common::methodes /]
[import fr::pacman::soa::common::outils /]

[import fr::pacman::commons::services::SecurityUtils /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::convention::rule::variableRule /]
[import fr::pacman::commons::convention::rule::commonRule /]
[import fr::pacman::commons::convention::project::surcouche /]


[template public getExternalUserBusinessGen(d : DTO)]
[for (r : Reference | d.references)]
[if r.referencedType.oclAsType(DTO)<> null and not buildImportUserBusinessGen(r.referencedType.oclAsType(DTO)).toString().contains(d.buildImportUserBusinessGen())]
[buildImportUserBusinessGen(r.referencedType.oclAsType(DTO))/][/if][/for]
[/template]

[comment : Generation de la classe commune (application) pour les champs additionnels. /]
[template public dtoAppliAbs(s : System)]
[licence()/]
package [s.buildPackageBusiness()/];
// [protected ('for imports')]

[s.writeImports()/]

// [/protected]

/**
 * Classe abstraite contenant les attributs additionnels qui sont communs à tous les dtos.
 *
 * @author [getAuthorName()/]
 */
public abstract class [s.buildAppliDtoAbstractClassName()/] {

	// CONSTANTES

   /**
	* SerialUid.
	*/
	private static final long serialVersionUID = -1;

	[displayClearUserCodeId ('Constantes')/]
	// [protected (s.getUserCodeId('Constantes'))]

	// [/protected]

	// ATTRIBUTS
	[for (columnProp : String | get_automaticColumnsProperties())]
	[if (columnProp.hasToWriteColumn())]
   	/** [columnProp.getNameColumn().toUpperFirst()/] */
   	private [columnProp.getTypeColumn()/] [apply_attributeDefault(columnProp.getNameColumn())/];[lineSeparator()/]
	[/if][/for]

	[displayClearUserCodeId ('Commons Attributs')/] 
	// [protected (s.getUserCodeId('Commons Attributs'))]

	// [/protected]

 	// METHODES

	[for (columnProp : String | get_automaticColumnsProperties())]
	[columnProp.getAutomaticGetter() /]

	[columnProp.getAutomaticSetter() /]

	[/for]
}
[/template]

[comment : Generation des getter pour les champs additionnels. /]
[template private getAutomaticGetter(columnProp : String)]
[if (columnProp.hasToWriteColumn())]
public [columnProp.getTypeColumn()/] [apply_methodGet(columnProp.getNameColumn())/] ()
{
	return [apply_attributeDefault(columnProp.getNameColumn())/];
}[/if]
[/template]

[comment : Generation des setter pour les champs additionnels. /]
[template private getAutomaticSetter(columnProp : String)]
[if (columnProp.hasToWriteColumn())]
public void [apply_methodSet(columnProp.getNameColumn())/] (final [columnProp.getTypeColumn()/] [apply_parameterMethodClassicIn(columnProp.getNameColumn())/])
{
	[getAffectationPrefix()/][apply_attributeDefault(columnProp.getNameColumn())/] = [apply_parameterMethodClassicIn(columnProp.getNameColumn())/];
}[/if]
[/template]

[template private getImplementation (d : DTO) post(trim())]
[if hasAutomaticColumns() and not d.hasParent()]extends [d.buildAppliDtoAbstractClassName()/][/if] [d.getImplementationForNoAutomaticColumns()/]
[/template]

[template private getImplementationForNoAutomaticColumns (d : DTO) post(trim())]
[if d.hasParent()][if not hasAutomaticColumns()] extends[else], [/if][d.supertype.oclAsType(DTO).buildDtoClassName()/][if (useSpi4jSecurity() and dtoIsUser(d))] implements User_Itf[/if][else][d.getImplementationForSimpleDto()/][/if]
[/template]

[template private getImplementationForSimpleDto (d : DTO) post(trim())]
implements [getClassNameForDto_Itf()/]<[genPkType()/]>[if (useSpi4jSecurity() and dtoIsUser(d))], User_Itf[/if]
[/template]

[template public dto(d : DTO)]
[licence()/]
package [buildPackageBusinessApiDto(d)/];
// [protected ('for imports')]
[comment : appel à cette méthode pour charger les attributs hérités de l'entité dans le DTO /]
[let attributs : OrderedSet(Attribute) = d.getAttributes()/]

[comment : Add all required imports. /]
[d.writeImports()/]

// [/protected]

/**
 * DTO '[d.nameClassDto()/]'.
 * @author [getAuthorName()/]
 */
public class [d.buildDtoClassName()/] [d.getImplementation()/]
{
   /**
    * SerialUid.
    */
   private static final long serialVersionUID = -1;

   // ATTRIBUTS

   [if not d.isNotPersistent() and not d.hasParent()]
   /** L'identifiant. */
   private [genPkType()/] [namePK_ID()/];

   [/if]
[comment] On ne génére que les attributs qui ne possèdent pas de méta-donnée Annotation de titre "COMPUTED" [/comment]
[for (a : Attribute | d.attributesNotComputed())]
[if not isPropertyFromParent(a, d)]
   /** [a.description/]. */
   [a.getProperty()/];

[/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not isPropertyFromParent(r, d)]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
   /** La FK sur le Type '[r.nameClassDto()/]'. */
   [r.getDtoReferenceId()/]

[/if]
   /** L'instance de '[r.referencedType.oclAsType(DTO).genTypeName()/]' associee à  l'instance de '[d.nameClassDto()/]' courante. */
   [r.getDtoReference()/]

[/if]
[/for]
[for (r : Reference | d.referencingStar())]
[if not isPropertyFromParent(r, d)]
   /** La FK sur le type '[r.containingType.oclAsType(DTO).nameBaseDtoUP()/]'. */
   [r.getDtoReferenceInverseId()/]

[/if]
[/for]
[for (r : Reference | d.referencesStarStar())]
[if not isPropertyFromParent(r, d)]
   /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
   [r.getRefListe()/]
[/if]
[/for]
[for (r : Reference | d.referencesStarNoStar())]
[if not isPropertyFromParent(r, d)]
   /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
   [r.getRefListe()/]

[/if]
[/for]

[if not d.isNotPersistent() and d.hasEntityWithVersion()]
   /** La valeur de la version. */
   @SuppressWarnings("all")
   private Serializable [apply_attributeDefault('version value')/];

[/if]
[if d.isNotPersistent()]
   [displayClearUserCodeId ('Attributs')/]
   // [protected (d.getUserCodeId('Attributs'))]

   /** L'identifiant. */
   private [genPkType()/] [namePK_ID()/];

   // [/protected]

[/if]
   // METHODES

   /**
    * Constructeur sans paramètre du dto '[d.nameClassDto()/]'.
    */
   public [d.buildDtoClassName()/] ()
   {
      super();
[if d.isNotPersistent()]

      [displayClearUserCodeId ('Constructeur')/]
      // [protected (d.getUserCodeId('Constructeur'))]

      // [/protected]
[/if]
   }

   /**
    * Constructeur complet du dto '[d.nameClassDto()/]'.
    * @param [apply_parameterMethodClassicIn(nameENUM_PK_ID())/]
    *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : Attribute | d.attributesNotComputed())]
[a.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
[r.getComParamIdIn()/]
[/if]
    [/for]
    [for (r : Reference | d.referencingStar())]
[r.getComParamInverseIdIn()/]
    [/for]
    */
   public [d.buildDtoClassName()/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetAttributes()/][d.getResetDtoParametersId()/][d.getResetDtoReferencingParamsId()/])
   {
      super();
      [d.getNameResetDto()/]([apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetCallAttributes()/][d.getResetCallDtoParametersId()/][d.getResetCallDtoReferencingParamsId()/]);
   }
[if d.referencesNoStar()->select(r : Reference | not r.referencedType.oclAsType(DTO).isNotPersistent())->size() > 0 or d.referencingStar()->size() > 0]

   /**
    * Constructeur complet du dto '[d.nameClassDto()/]'.
    * @param [apply_parameterMethodClassicIn(nameENUM_PK_ID())/]
    *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : Attribute | d.attributesNotComputed())]
[a.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
[r.getComParamIn()/]
[/if]
    [/for]
    [for (r : Reference | d.referencingStar())]
[r.getComParamInverseIn()/]
    [/for]
    */
   public [d.buildDtoClassName()/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetAttributes()/][d.getResetDtoParameters()/][d.getResetDtoReferencingParams()/])
   {
      super();
      [d.getNameResetDto()/]([apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetCallAttributes()/][d.getResetCallDtoParameters()/][d.getResetCallDtoReferencingParams()/]);
   }
[/if]

[if not d.hasParent()]
   @Override
   public [genPkType()/] getId ()
   {
      [if d.isNotPersistent()]
      [displayClearUserCodeId ('getId')/]
      // [protected (d.getUserCodeId('getId'))]

      return [namePK_ID()/];

      // [/protected]
      [else]
      return [namePK_ID()/];
      [/if]
   }

   @Override
   public void setId (final [genPkType()/] [apply_parameterMethodClassicIn(nameENUM_PK_ID())/])
   {
      [if d.isNotPersistent()]
      [displayClearUserCodeId ('setId')/]
      // [protected (d.getUserCodeId('setId'))]

      [getAffectationPrefix()/][namePK_ID()/] = [apply_parameterMethodClassicIn(nameENUM_PK_ID())/];

      // [/protected]
      [else]
      [getAffectationPrefix()/][namePK_ID()/] = [apply_parameterMethodClassicIn(nameENUM_PK_ID())/];
      [/if]
   }

[/if]
[for (a : Attribute | d.getAttributes())]
[if not isPropertyFromParent(a, d)]
   /**
[comPrefix(a, 'Obtenir')/]
[comReturn(a)/]
    */
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
   @Override
   public String getIdentifiant ()
[else]
   [a.getGetter()/]
[/if]
   {
   [comment]
   Si un attribut possède une méta-donnée Annotation de titre "COMPUTED"
   alors le getter retourne null par défaut et devra être implémenté par le développeur
   sinon le getter retourne l'attribut.
   [/comment]
   [if (a.isComputed())]
      [displayClearUserCodeId (apply_attributeDefault(a.name))/]
      // [protected (a.getUserCodeId(apply_attributeDefault(a.name)))]
      // TODO Calculer l'attribut
      return null;
      // [/protected]
   [else]
      return [apply_attributeDefault(a.name.normalize())/];
    [/if]
   }

[comment] Le setter n'est généré que si l'attribut ne possède pas de méta-donnée Annotation de titre "COMPUTED". [/comment]
[if (not a.isComputed())]
   /**
[comPrefix(a, 'Affecter')/]
[a.getComParamIn()/]
    */
[comment]Cas particulier pour l'attribut identifiant qui ne suit pas la convention de nommage.[/comment]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
   public void setIdentifiant (final [a.genPropertyType()/] [apply_parameterMethodClassicIn(a.name.normalize())/])
[else]
   [a.getSetter()/]
[/if]
   {
      [getAffectationPrefix()/][apply_attributeDefault(a.name.normalize())/] = [apply_parameterMethodClassicIn(a.name.normalize())/];
   }

[/if]
[/if]
[/for]
[for (r : Reference | d.referencesNoStar())]
[if not isPropertyFromParent(r, d)]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
   /**
[comPrefix(r, 'Obtenir')/]
[comReturn(r)/]
    */
   [r.getGetterIdDto()/]
   {
      if ([apply_attributeDefault(r.name.toLowerFirst())/] != null)
      {
          [apply_attributeDefault(r.name.toLowerFirst())/][namePK_ID()/] = [apply_attributeDefault(r.name.toLowerFirst())/].getId();
      }
      return [apply_attributeDefault(r.name.toLowerFirst())/][namePK_ID()/];
   }

   /**
[comPrefix(r, 'Affecter')/]
[r.getComParamIdIn()/]
    */
   [r.getSetterIdDto()/]
   {
      [getAffectationPrefix()/][apply_attributeDefault(r.name.toLowerFirst())/][namePK_ID()/] = [apply_parameterMethodClassicIn(r.name.toLowerFirst())/][namePK_ID()/];
      [getAffectationPrefix()/][apply_attributeDefault(r.name.toLowerFirst())/] = null;
   }

[/if]
   /**
[comPrefix(r, 'Obtenir')/]
[comReturn(r)/]
    */
   [r.getGetter()/]
   {
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      if ([apply_attributeDefault(r.name.toLowerFirst())/][namePK_ID()/] != null && [apply_attributeDefault(r.name.toLowerFirst())/] == null)
      {
         [apply_attributeDefault(r.name.toLowerFirst())/] = [buildAppliUserBusinessClassName(r.referencedType.oclAsType(DTO))/].[apply_methodDefault('get '+ r.referencedType.oclAsType(DTO).buildSimpleDtoName() + ' service')/]().findById([apply_attributeDefault(r.name.toLowerFirst())/][namePK_ID()/]);
      }
[/if]
      return [apply_attributeDefault(r.name.toLowerFirst())/];
   }

   /**
[comPrefix(r, 'Affecter')/]
[r.getComParamIn()/]
    */
   [r.getSetterDtoReference()/]
   {
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      if ([apply_parameterMethodClassicIn(r.name.toLowerFirst())/] == null)
      {
         [apply_methodSet(r.name.toLowerFirst())/][namePK_ID()/](null);
      }
      else
      {
         [apply_methodSet(r.name.toLowerFirst())/][namePK_ID()/]([apply_parameterMethodClassicIn(r.name.toLowerFirst())/].getId());
      }
[/if]
      [getAffectationPrefix()/][apply_attributeDefault(r.name.toLowerFirst())/] = [apply_parameterMethodClassicIn(r.name.toLowerFirst())/];
   }

[/if]
[/for]
[for (r : Reference | d.referencesStarStar())]
[if not isPropertyFromParent(r, d)]
   /**
[comPrefix(r, 'Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
[comReturn(r)/]             
    */
   [r.getGetterListDto()/]
   {
      if ([namePK_ID()/] != null && [apply_attributeMultiple(r.name.toLowerFirst())/] == null)
      {
         [comment] Pour les relations N-N on appelle le getterInstanceService() sur dto lui même : d.getterInstanceService()[/comment]
         [apply_attributeMultiple(r.name.toLowerFirst())/] = [buildAppliUserBusinessClassName(r.referencedType.oclAsType(DTO))/].[apply_methodDefault('get '+ d.buildSimpleDtoName() + ' service')/]().[r.getFindListRefByDto(d)/]([namePK_ID()/]);
      }
      return [apply_attributeMultiple(r.name.toLowerFirst())/];
   }

   /**
[comPrefix(r, 'Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
[r.getComParamTabIn()/]
    */
   [r.getSetterListDto()/]
   {
      [getAffectationPrefix()/][apply_attributeMultiple(r.name.toLowerFirst())/] = [apply_parameterMethodMultiple(r.referencedType.oclAsType(DTO).name.toLowerFirst())/];
   }

[/if]
[/for]
[for (r : Reference | d.referencesStarNoStar())]
[if not isPropertyFromParent(r, d)]
   /**
[comPrefix(r, 'Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
[comReturn(r)/]
    */
   [r.getGetterListDto()/]
   {
      [if not r.containingType.oclAsType(DTO).isNotPersistent()]
      if ([namePK_ID()/] != null && [apply_attributeMultiple(r.name.toLowerFirst())/] == null)
      {
         [comment] Pour les relations 1-N on appelle le getterInstanceService() sur la référence du dto : r.getterInstanceService()[/comment]
         [apply_attributeMultiple(r.name.toLowerFirst())/] = [buildAppliUserBusinessClassName(r.referencedType.oclAsType(DTO))/].[apply_methodDefault('get '+ r.referencedType.oclAsType(DTO).buildSimpleDtoName() + ' service')/]().[r.getFindListRefInverseByDto(d)/]([namePK_ID()/]);
      }
      [/if]
      return [apply_attributeMultiple(r.name.toLowerFirst())/];
   }

   /**
[comPrefix(r, 'Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
[r.getComParamTabIn()/]
    */
   [r.getSetterListDto()/]
   {
      [getAffectationPrefix()/][apply_attributeMultiple(r.name.toLowerFirst())/] = [apply_parameterMethodMultiple(r.referencedType.oclAsType(DTO).name.toLowerFirst())/];
   }

[/if]
[/for]
[for (r : Reference | d.referencingStar())]
[if not isPropertyFromParent(r, d)]
   /**
    * Obtenir [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
[r.comReturnInverse()/]
    */
   [r.getGetterInverseIdDto()/]
   {
      return [apply_attributeDefault(r.nameBaseReferenceInverse())/][namePK_ID()/];
   }

   /**
    * Affecter [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
[r.getComParamInverseIdIn()/]
    */
   [r.getSetterInverseIdDto()/]
   {
      [getAffectationPrefix()/][apply_attributeDefault(r.nameBaseReferenceInverse())/][namePK_ID()/] = [apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/][namePK_ID()/];
   }

[/if]
[/for]
[for (r : Reference | d.referencesComputedNoStar())]
[if not isPropertyFromParent(r, d)]
   /**
[comPrefix(r, 'Obtenir l\'instance de \'' + r.nameClassDto() + '\' calculee :')/]
[comReturn(r)/]
    */
   [r.getGetter()/]
   {
      [displayClearUserCodeId (apply_methodGet(r.referencedType.oclAsType(DTO).name.normalize()))/]
      // [protected (r.getUserCodeId(apply_methodGet(r.referencedType.oclAsType(DTO).name.normalize())))]
      // TODO Calculer la référence
      return null;
      // [/protected]
   }

[/if]
[/for]
[for (r : Reference | d.referencesComputedStar())]
[if not isPropertyFromParent(r, d)]
   /**
[comPrefix(r, 'Obtenir la liste de \'' + r.nameClassDto() + '\' calculee :')/]
[comReturn(r)/]
    */
   [r.getGetterListDto()/]
   {
      [displayClearUserCodeId (apply_methodDefault('get'+ apply_attributeMultiple(r.referencedType.oclAsType(DTO).name.normalize())))/]
      // [protected (r.getUserCodeId(apply_methodDefault('get'+ apply_attributeMultiple(r.referencedType.oclAsType(DTO).name.normalize()))))]
      // TODO Calculer la référence
      return null;
      // [/protected]
   }

[/if]
[/for]
   /**
    * Recycler le dto '[d.nameClassDto()/]'.
    * @param [apply_parameterMethodClassicIn(nameENUM_PK_ID())/]
    *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : Attribute | d.attributesNotComputed())]
[a.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
[r.getComParamIdIn()/]
[/if]
    [/for]
    [for (r : Reference | d.referencingStar())]
[r.getComParamInverseIdIn()/]
    [/for]
    */
   public void [apply_methodReset(buildDtoClassName(d))/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetAttributes()/][d.getResetDtoParametersId()/][d.getResetDtoReferencingParamsId()/])
   {
      setId([apply_parameterMethodClassicIn(nameENUM_PK_ID())/]);
      [for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      setIdentifiant([apply_parameterMethodClassicIn(a.name.normalize())/]);
[else]
      [apply_methodSet(a.name.normalize())/]([apply_parameterMethodClassicIn(a.name.normalize())/]);
[/if]
      [/for]
      [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      [apply_methodSet(r.name.toLowerFirst())/][namePK_ID()/]([apply_parameterMethodClassicIn(r.name.toLowerFirst())/][namePK_ID()/]);
[/if]
      [/for]
      [for (r : Reference | d.referencesStarStar())]
      [apply_attributeMultiple(r.name.toLowerFirst())/] = null;
      [/for]
      [for (r : Reference | d.referencesStarNoStar())]
      [apply_attributeMultiple(r.name.toLowerFirst())/] = null;
      [/for]
      [for (r : Reference | d.referencingStar())]
      [apply_methodSet(r.nameBaseReferenceInverse())/][namePK_ID()/]([apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/][namePK_ID()/]);
      [/for]
[if not d.isNotPersistent() and d.hasEntityWithVersion()]
      [apply_attributeDefault('version value')/] = null;
[/if]
   }
[if d.referencesNoStar()->select(r : Reference | not r.referencedType.oclAsType(DTO).isNotPersistent())->size() > 0 or d.referencingStar()->size() > 0]

   /**
    * Recycler le dto '[d.nameClassDto()/]'.
    * @param [apply_parameterMethodClassicIn(nameENUM_PK_ID())/]
    *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : Attribute | d.attributesNotComputed())]
[a.getComParamIn()/]
    [/for]
    [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
[r.getComParamIn()/]
[/if]
    [/for]
    [for (r : Reference | d.referencingStar())]
[r.getComParamInverseIn()/]
    [/for]
    */
   public void [apply_methodReset(buildDtoClassName(d))/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameENUM_PK_ID())/][d.getResetAttributes()/][d.getResetDtoParameters()/][d.getResetDtoReferencingParams()/])
   {
      setId([apply_parameterMethodClassicIn(nameENUM_PK_ID())/]);
      [for (a : Attribute | d.attributesNotComputed())]
[if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')]
      setIdentifiant([apply_parameterMethodClassicIn(a.name.normalize())/]);
[else]
      [apply_methodSet(a.name.normalize())/]([apply_parameterMethodClassicIn(a.name.toLowerFirst())/]);
[/if]
      [/for]
      [for (r : Reference | d.referencesNoStar())]
[if not r.referencedType.oclAsType(DTO).isNotPersistent()]
      [apply_methodSet(r.name.toLowerFirst())/]([apply_parameterMethodClassicIn(r.name.toLowerFirst())/]);
[/if]
      [/for]
      [for (r : Reference | d.referencesStarStar())]
      [apply_attributeMultiple(r.name.toLowerFirst())/] = null;
      [/for]
      [for (r : Reference | d.referencesStarNoStar())]
      [apply_attributeMultiple(r.name.toLowerFirst())/] = null;
      [/for]
      [for (r : Reference | d.referencingStar())]
      if ([apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/] == null)
      {
         [apply_methodSet(r.nameBaseReferenceInverse())/][namePK_ID()/](null);
      }
      else
      {
         [apply_methodSet(r.nameBaseReferenceInverse())/][namePK_ID()/]([apply_parameterMethodClassicIn(r.nameBaseReferenceInverse())/].getId());
      }
      [/for]
[if not d.isNotPersistent() and d.hasEntityWithVersion()]
      [apply_attributeDefault('version value')/] = null;
[/if]
   }
[/if]

[if d.hasParent()]
   @Override
   public void validate () throws Spi4jValidationException
   {
[if d.hasMandatoryFields() or d.hasStringFieldWithSize()]
      List<String> [apply_variableDefault('champs invalides')/] = prepareValidate();
[for (a : Attribute | d.attributesNotComputed())]
[if not isPropertyFromParent(a, d)]
[validProperty(d, a)/][/if][/for]
[for (r : Reference | d.referencesNoStar())]
[if not isPropertyFromParent(r, d)]
[if (r.oppositeOf.oclIsUndefined()) or not (r.oppositeOf.isMultiple() and r.oppositeOf.navigable)]
[validProperty(d, r)/][/if][/if][/for]
[for (r : Reference | d.referencingStar())]
[if not isPropertyFromParent(r, d)]
[validPropertyInverse(d, r)/][/if][/for]
      // si la liste des champs invalides n'est pas nulle, elle ne peut pas être vide à cet endroit
      if ([apply_variableDefault('champs invalides')/] != null)
      {
         throw new Spi4jValidationException(this, [apply_variableDefault('champs invalides')/].toArray(new String['['/][apply_variableDefault('champs invalides')/]['.size()]'/]));
      }
[else]
      // aucun champ obligatoire
[/if]
   }
[else]
   @Override
   public void validate () throws Spi4jValidationException
   {
[if d.hasMandatoryFields() or d.hasStringFieldWithSize()]
      List<String> [apply_variableDefault('champs invalides')/] = null;
[for (a : Attribute | d.attributesNotComputed())]
[validProperty(d, a)/][/for]
[for (r : Reference | d.referencesNoStar())]
[if (r.oppositeOf.oclIsUndefined()) or not (r.oppositeOf.isMultiple() and r.oppositeOf.navigable)]
[validProperty(d, r)/][/if][/for]
[for (r : Reference | d.referencingStar())]
[validPropertyInverse(d, r)/][/for]
      // si la liste des champs invalides n'est pas nulle, elle ne peut pas être vide à cet endroit
      if ([apply_variableDefault('champs invalides')/] != null)
      {
         throw new Spi4jValidationException(this, [apply_variableDefault('champs invalides')/].toArray(new String['['/][apply_variableDefault('champs invalides')/]['.size()]'/]));
      }
[else]
      // aucun champ obligatoire
[/if]
   }
[/if]

   @Override
   public String toString ()
   {
      [displayClearUserCodeId ('toString')/]
      // [protected (d.getUserCodeId('toString'))]

      return [d.toString()/]

      // [/protected]
   }

   [displayClearUserCodeId ('Methodes')/]
   // [protected (d.getUserCodeId('Methodes'))]

   // [/protected]
}
[/template]

[template public resetDtoParametersId(d : DTO)]
[for (r : Reference | d.referencesNoStar())], final [genPkType()/] [r.nameParamId()/][/for]
[/template]

[template public resetCallDtoParametersId(d : DTO)]
[for (r : Reference | d.referencesNoStar())], [r.nameParamId()/][/for]
[/template]

[template public resetDtoParameters(d : DTO)]
[for (r : Reference | d.referencesNoStar())], final [r.nameDto()/] [r.nameParam()/][/for]
[/template]

[template public resetCallDtoParameters(d : DTO)]
[for (r : Reference | d.referencesNoStar())], [r.nameParam()/][/for]
[/template]

[template public toString(d : DTO)]
getClass().getSimpleName() + '['['/]' + [namePK_ID()/] [d.endToString()/] + '[']'/]';
[/template]

[template public endToString(d : DTO)]
[for (a : Attribute | d.attributesNotComputed())]+ ", " + [if (useSpi4jSecurity() and dtoIsUser(d) and a.name = 'identifiant')] getIdentifiant() [else][apply_methodGet(a.name.normalize())/]()[/if] [/for][for (r : Reference | d.referencesNoStar())][if not r.referencedType.oclAsType(DTO).isNotPersistent()] [if not isPropertyFromParent(r, d)] + ", " + [apply_methodGet(r.name.toLowerFirst())/][namePK_ID()/] ()[/if][/if][/for] [for (r : Reference | d.referencingStar())][if not isPropertyFromParent(r, d)] + ", " + [apply_methodGet(r.nameBaseReferenceInverse())/][namePK_ID()/] () [/if][/for]
[/template]

[template public resetDtoReferencingParamsId(d : DTO)]
[for (r : Reference | d.referencingStar())], final [genPkType()/] [r.nameParamInverseId()/][/for]
[/template]

[template public resetCallDtoReferencingParamsId(d : DTO)]
[for (r : Reference | d.referencingStar())], [r.nameParamInverseId()/][/for]
[/template]

[template public resetDtoReferencingParams(d : DTO)]
[for (r : Reference | d.referencingStar())], final [r.containingType.oclAsType(DTO).nameDto()/] [r.nameParamInverse()/][/for]
[/template]

[template public resetCallDtoReferencingParams(d : DTO)]
[for (r : Reference | d.referencingStar())], [r.nameParamInverse()/][/for]
[/template]

[template public resetAttributes(d : DTO)]
[for (a : Attribute | d.attributesNotComputed())], final [a.gentTypeAndNameParam()/][/for]
[/template]

[template public resetCallAttributes(d : DTO)]
[for (a : Attribute | d.attributesNotComputed())], [a.nameParam()/][/for]
[/template]

[template private validProperty(d : DTO, p : Attribute)]
[if isMandatory(p)]
      [apply_variableDefault('champs invalides')/] = DtoUtil.checkMandatoryField("[nameBase(p)/]", [apply_attributeDefault(p.name.toLowerFirst())/], [apply_variableDefault('champs invalides')/]);
[/if]
[if p.oclIsTypeOf(Attribute)]
[validateSize(d, p.oclAsType(Attribute))/][/if]
[/template]

[template private validProperty(d : DTO, p : Reference)]
[if isMandatory(p)]
[if not p.referencedType.oclAsType(DTO).isNotPersistent()]
      [apply_variableDefault('champs invalides')/] = DtoUtil.checkMandatoryField("[nameBase(p)/]", [apply_attributeDefault(p.name.toLowerFirst())/][namePK_ID()/], [apply_variableDefault('champs invalides')/]);
[else]
      [apply_variableDefault('champs invalides')/] = DtoUtil.checkMandatoryField("[nameBase(p)/]", [apply_attributeDefault(p.name.toLowerFirst())/], [apply_variableDefault('champs invalides')/]);
[/if]
[/if]
[/template]

[template private validPropertyInverse(d : DTO, r : Reference)]
[if isMandatory(r)]
      [apply_variableDefault('champs invalides')/] = DtoUtil.checkMandatoryField("[nameBaseReferenceInverse(r)/]", [apply_attributeDefault(r.nameBaseReferenceInverse())/][namePK_ID()/], [apply_variableDefault('champs invalides')/]);
[/if]
[/template]

[template private nameBase(p : Property)]
[if (p.oclIsTypeOf(Attribute))]
[nameBaseAttribute(p.oclAsType(Attribute))/][else]
[if (p.oclIsTypeOf(Reference))]
[nameBaseReference(p.oclAsType(Reference))/][/if]
[/if]
[/template]

[template private nameProp(p : Property)]
[if (p.oclIsTypeOf(Attribute))]
[nameProperty(p.oclAsType(Attribute))/][else]
[if (p.oclIsTypeOf(Reference))]
[namePropertyId(p.oclAsType(Reference))/][/if]
[/if]
[/template]

[template private validateSize(d : DTO, a : Attribute)]
[if hasSize(a) and a.type.name = 'String']
      [apply_variableDefault('champs invalides')/] = DtoUtil.checkFieldSize("[nameBase(a)/]", [apply_attributeDefault(a.name.normalize())/], [d.buildAttributesEnumName()/].[apply_attributeEnum(a.name.normalize())/].getSize(), [apply_variableDefault('champs invalides')/]);
[/if]
[/template]

[*******************
 * Paramétrage début
*/]

[template public getResetAttributes(d : DTO)]
[for (a : Attribute | d.attributesNotComputed())], final [a.getTypeAndNameParam()/][/for]
[/template]

[template public getResetDtoParameters(d : DTO)]
[for (r : Reference | d.referencesNoStar())][if not r.referencedType.oclAsType(DTO).isNotPersistent()], final [r.referencedType.oclAsType(DTO).buildDtoClassName()/] [apply_parameterMethodClassicIn(r.name.toLowerFirst())/][/if][/for]
[/template]

[template public getResetDtoParametersId(d : DTO)]
[for (r : Reference | d.referencesNoStar())][if not r.referencedType.oclAsType(DTO).isNotPersistent()], final [genPkType()/] [apply_parameterMethodClassicIn(r.name.toLowerFirst())/][namePK_ID()/][/if][/for]
[/template]

[template public getResetDtoReferencingParams(d : DTO)]
[for (r : Reference | d.referencingStar())], final [buildDtoClassName(r.containingType.oclAsType(DTO))/] [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][/for]
[/template]

[template public gresetDtoReferencingParams(d : DTO)]
[for (r : Reference | d.referencingStar())], final [r.containingType.oclAsType(DTO).nameDto()/] [r.nameParamInverse()/][/for]
[/template]

[template public getResetDtoReferencingParamsId(d : DTO)]
[for (r : Reference | d.referencingStar())], final [genPkType()/] [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][namePK_ID()/][/for]
[/template]

[**
 * Calls
*/]

[template public getResetCallDtoParametersId(d : DTO)]
[for (r : Reference | d.referencesNoStar())][if not r.referencedType.oclAsType(DTO).isNotPersistent()], [apply_parameterMethodClassicIn(nameBaseReference(r))/][namePK_ID()/][/if][/for]
[/template]

[template public getResetCallAttributes(d : DTO)]
[for (a : Attribute | d.attributesNotComputed())], [apply_parameterMethodClassicIn(a.name.normalize())/][/for]
[/template]

[template public getResetCallDtoReferencingParams(d : DTO)]
[for (r : Reference | d.referencingStar())], [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][/for]
[/template]

[template public getResetCallDtoReferencingParamsId(d : DTO)]
[for (r : Reference | d.referencingStar())], [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][namePK_ID()/][/for]
[/template]

[template public getResetCallDtoParameters(d : DTO)]
[for (r : Reference | d.referencesNoStar())][if not r.referencedType.oclAsType(DTO).isNotPersistent()], [apply_parameterMethodClassicIn(nameBaseReference(r))/][/if][/for]
[/template]

[comment : Add required imports for app auto fields /]
[template private writeImports (s : System) post(trim())]
[s.initImports()/]
[s.addImport('java.util.List')/]
[s.addImport('java.util.Date')/]
[s.addImport('fr.spi4j.type.XtopSup')/]
[s.addImport(getImportForDto_Itf())/]
[s.flushImports()/]
[/template]

[comment : Add all required imports. /]
[template private writeImports (d : DTO) post(trim())]
[d.initImports()/]
[d.addImport('java.util.List')/]
[d.addImport('java.util.Date')/]
[d.addImport('fr.spi4j.business.dto.DtoUtil')/]
[d.addImport('java.io.Serializable', not d.hasParent() and not d.isNotPersistent() and d.hasEntityWithVersion())/]
[d.addImport('fr.spi4j.exception.Spi4jValidationException')/]
[d.addImport('fr.spi4j.lib.security.User_Itf', useSpi4jSecurity() and d.dtoIsUser())/]
[d.addImport(d.buildPackageBusiness() + '.' + d.buildAppliDtoAbstractClassName(), d.hasAutomaticColumns())/]
[d.addImport(getImportForDto_Itf())/]
[d.addImport(d.getExternalUserBusinessGen(), d.references->size() > 0)/]
[d.addImport(buildImportUserBusinessGen(), d.references->size() > 0)/]

[comment : List all references to find relational DTOs. /]
[for (r : Reference | d.references)]
[if (r.referencedType.oclAsType(DTO) <> null and buildPackageBusinessApiDto(r.referencedType.oclAsType(DTO)) <> buildPackageBusinessApiDto(d))]
[d.addImport(buildImportDto(r.referencedType.oclAsType(DTO)))/]
[/if]
[/for]

[comment : List all references to find relational DTOs. /]
[for (r : Reference | d.referencingStar())]
[if (r.referencedType.oclAsType(DTO) <> null and buildPackageBusinessApiDto(r.containingType.oclAsType(DTO)) <> buildPackageBusinessApiDto(d))]
[d.addImport(buildImportDto(r.containingType.oclAsType(DTO)))/]
[/if]
[/for]

[comment : Get all imports in DTO for user created enum in entity modelisation. /]
[for (a : Attribute | d.attributes)][if a.type.oclIsKindOf(Enumeration) ]
[d.addImport(buildPackageEnum(a.type.oclAsType(Enumeration)) + '.' + a.type.oclAsType(Enumeration).buildEnumName())/]
[/if][/for]

[comment : Legacy, to be suppressed... /]
[for (enum: Enumeration | d.getRoot().eAllContents(Enumeration))]
[d.addImport(buildPackageEnum(enum) + '.' + enum.buildEnumName())/]
[/for]
[d.flushImports()/]
[/template]

[**
 * Autres
*/]

[template private getNameProp(p : Property)]
[if (p.oclIsTypeOf(Attribute))]
[nameProperty(p.oclAsType(Attribute))/][else]
[if (p.oclIsTypeOf(Reference))]
[namePropertyId(p.oclAsType(Reference))/][/if]
[/if]
[/template]

[template private getNameReferenceVar(r : Reference)]
[apply_attributeDefault(r.name.toLowerFirst())/]
[/template]

[*******************
 * Paramétrage fin
*/]