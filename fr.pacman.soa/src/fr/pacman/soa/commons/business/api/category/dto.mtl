[module dto('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::types::packages/]
[import fr::pacman::commons::types::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::requests::counterQueries/]
[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::attributes/]
[import fr::pacman::commons::soa::common::packages/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public getExternalUserBusinessGen(d : environment::DTO)]
  [for (r : environment::Reference | d.references)][if (r.referencedType.oclAsType(environment::DTO) <> null and not r.referencedType.oclAsType(environment::DTO).buildImportUserBusinessGen().toString().contains(d.buildImportUserBusinessGen()))][r.referencedType.oclAsType(environment::DTO).buildImportUserBusinessGen()/][/if][/for][/template]

[comment : Generation de la classe commune (application) pour les champs additionnels. /]
[template public dtoAppliAbs(s : soa::System)]
  [s.licence()/]
  package [s.buildPackageBusiness()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.writeImports()/]
    
  [/protected]
  
  
  /**
   * Classe abstraite contenant les attributs additionnels qui sont communs à tous les dtos.
   *
   * @author [s.getAuthorName()/]
   */
  public abstract class [s.buildAppliDtoAbstractClassName()/] {
  
  	// CONSTANTES
  
     /**
  	* SerialUid.
  	*/
  	private static final long serialVersionUID = -1;
  
  	// Constantes
  	[protected (s.getUserCodeId('Constantes')) startTagPrefix('// ') endTagPrefix('// ')]
     
   [/protected]
  
  
  	// ATTRIBUTS
  [for (columnProp : String | s.get_automaticColumnsProperties())]
    [if (columnProp.hasToWriteColumn())]
         	/** [columnProp.getNameColumn().toUpperFirst()/] */
         	private [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_attributeDefault()/];[columnProp.lineSeparator()/]
    [/if]
  [/for]
  
  	// Commons Attributs 
  	[protected (s.getUserCodeId('Commons Attributs')) startTagPrefix('// ') endTagPrefix('// ')]
     
   [/protected]
  
  
   	// METHODES
  
  [for (columnProp : String | s.get_automaticColumnsProperties())]
    	[columnProp.getAutomaticGetter()/]
    
    	[columnProp.getAutomaticSetter()/]
    
  [/for]
  }[/template]

[comment : Generation des getter pour les champs additionnels. /]
[template private getAutomaticGetter(columnProp : String)]
  [if (columnProp.hasToWriteColumn())]
    public [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_methodGet()/] ()
    {
    	return [columnProp.getNameColumn().apply_attributeDefault()/];
    }[/if]
[/template]

[comment : Generation des setter pour les champs additionnels. /]
[template private getAutomaticSetter(columnProp : String)]
  [if (columnProp.hasToWriteColumn())]
    public void [columnProp.getNameColumn().apply_methodSet()/] (final [columnProp.getTypeColumn()/] [columnProp.getNameColumn().apply_parameterMethodClassicIn()/])
    {
    	[columnProp.getAffectationPrefix()/][columnProp.getNameColumn().apply_attributeDefault()/] = [columnProp.getNameColumn().apply_parameterMethodClassicIn()/];
    }[/if]
[/template]

[template private getImplementation(d : environment::DTO) post(self.trim())]
  [if (d.hasAutomaticColumns() and not d.hasParent())]extends [d.buildAppliDtoAbstractClassName()/][/if] [d.getImplementationForNoAutomaticColumns()/][/template]

[template private getImplementationForNoAutomaticColumns(d : environment::DTO) post(self.trim())]
  [if (d.hasParent())][if (not d.hasAutomaticColumns())] extends[else], [/if][d.supertype.oclAsType(environment::DTO).buildDtoClassName()/][if (d.useSpi4jSecurity() and d.dtoIsUser())] implements User_Itf[/if][else][d.getImplementationForSimpleDto()/][/if][/template]

[template private getImplementationForSimpleDto(d : environment::DTO) post(self.trim())]
  implements [d.getClassNameForDto_Itf()/]<[d.genPkType()/]>[if (d.useSpi4jSecurity() and d.dtoIsUser())], User_Itf[/if][/template]

[template public dto(d : environment::DTO)]
  [d.licence()/]
  package [d.buildPackageBusinessApiDto()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    [let attributs : OrderedSet(environment::Attribute) = d.getAttributes()]
    [/let]
    
    [d.writeImports()/]
    
  [/protected]
  
  
  /**
   * DTO '[d.nameClassDto()/]'.
   * @author [d.getAuthorName()/]
   */
  public class [d.buildDtoClassName()/] [d.getImplementation()/]
  {
     /**
      * SerialUid.
      */
     private static final long serialVersionUID = -1;
  
     // ATTRIBUTS
  
  [if (not d.isNotPersistent() and not d.hasParent())]
       /** L'identifiant. */
       private [d.genPkType()/] [d.namePK_ID()/];
    
  [/if]
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [if (not a.isPropertyFromParent(d))]
         /** [a.description/]. */
         [a.getProperty()/];
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.isPropertyFromParent(d))]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
           /** La FK sur le Type '[r.nameClassDto()/]'. */
           [r.getDtoReferenceId()/]
        
      [/if]
         /** L'instance de '[r.referencedType.oclAsType(environment::DTO).genTypeName()/]' associee à  l'instance de '[d.nameClassDto()/]' courante. */
         [r.getDtoReference()/]
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [if (not r.isPropertyFromParent(d))]
         /** La FK sur le type '[r.containingType.oclAsType(environment::DTO).nameBaseDtoUP()/]'. */
         [r.getDtoReferenceInverseId()/]
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
    [if (not r.isPropertyFromParent(d))]
         /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
         [r.getRefListe()/]
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
    [if (not r.isPropertyFromParent(d))]
         /** La liste de type '[r.nameClassDto()/]' associee a  l'instance de '[d.nameClassDto()/]' courante. */
         [r.getRefListe()/]
      
    [/if]
  [/for]
  
  [if (not d.isNotPersistent() and d.hasEntityWithVersion())]
       /** La valeur de la version. */
       @SuppressWarnings("all")
       private Serializable ['version value'.apply_attributeDefault()/];
    
  [/if]
  [if (d.isNotPersistent())]
       // Attributs
       [protected (d.getUserCodeId('Attributs')) startTagPrefix('// ') endTagPrefix('// ')]
         
            /** L'identifiant. */
            private [d.genPkType()/] [d.namePK_ID()/];
         
       [/protected]
    
    
  [/if]
     // METHODES
  
     /**
      * Constructeur sans paramètre du dto '[d.nameClassDto()/]'.
      */
     public [d.buildDtoClassName()/] ()
     {
        super();
  [if (d.isNotPersistent())]
    
          // Constructeur
          [protected (d.getUserCodeId('Constructeur')) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
    
  [/if]
     }
  
     /**
      * Constructeur complet du dto '[d.nameClassDto()/]'.
      * @param [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]
      *           (In)(*) L'identifiant de [d.nameBaseDto()/].
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [a.getComParamIn()/]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
      [r.getComParamIdIn()/]
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [r.getComParamInverseIdIn()/]
  [/for]
      */
     public [d.buildDtoClassName()/] (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetAttributes()/][d.getResetDtoParametersId()/][d.getResetDtoReferencingParamsId()/])
     {
        super();
        [d.getNameResetDto()/]([d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetCallAttributes()/][d.getResetCallDtoParametersId()/][d.getResetCallDtoReferencingParamsId()/]);
     }
  [if (d.referencesNoStar()->select(r | not r.referencedType.oclAsType(environment::DTO).isNotPersistent())->size() > 0 or d.referencingStar()->size() > 0)]
    
       /**
        * Constructeur complet du dto '[d.nameClassDto()/]'.
        * @param [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]
        *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : environment::Attribute | d.attributesNotComputed())]
      [a.getComParamIn()/]
    [/for]
    [for (r : environment::Reference | d.referencesNoStar())]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
        [r.getComParamIn()/]
      [/if]
    [/for]
    [for (r : environment::Reference | d.referencingStar())]
      [r.getComParamInverseIn()/]
    [/for]
        */
       public [d.buildDtoClassName()/] (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetAttributes()/][d.getResetDtoParameters()/][d.getResetDtoReferencingParams()/])
       {
          super();
          [d.getNameResetDto()/]([d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetCallAttributes()/][d.getResetCallDtoParameters()/][d.getResetCallDtoReferencingParams()/]);
       }
  [/if]
  
  [if (not d.hasParent())]
       @Override
       public [d.genPkType()/] getId ()
       {
    [if (d.isNotPersistent())]
            // getId
            [protected (d.getUserCodeId('getId')) startTagPrefix('// ') endTagPrefix('// ')]
              
                    return [d.namePK_ID()/];
              
            [/protected]
      
    [else]
            return [d.namePK_ID()/];
    [/if]
       }
    
       @Override
       public void setId (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/])
       {
    [if (d.isNotPersistent())]
            // setId
            [protected (d.getUserCodeId('setId')) startTagPrefix('// ') endTagPrefix('// ')]
              
                    [d.getAffectationPrefix()/][d.namePK_ID()/] = [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/];
              
            [/protected]
      
    [else]
            [d.getAffectationPrefix()/][d.namePK_ID()/] = [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/];
    [/if]
       }
    
  [/if]
  [for (a : environment::Attribute | d.getAttributes())]
    [if (not a.isPropertyFromParent(d))]
         /**
      [a.comPrefix('Obtenir')/]
      [a.comReturn()/]
          */
      [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
           @Override
           public String getIdentifiant ()
      [else]
           [a.getGetter()/]
      [/if]
         {
      [if (a.isComputed())]
              // [a.name.apply_attributeDefault()/]
              [protected (a.getUserCodeId(a.name.apply_attributeDefault())) startTagPrefix('// ') endTagPrefix('// ')]
                      // TODO Calculer l'attribut
                      return null;
              [/protected]
        
      [else]
              return [a.name.normalize().apply_attributeDefault()/];
      [/if]
         }
      
      [if (not a.isComputed())]
           /**
        [a.comPrefix('Affecter')/]
        [a.getComParamIn()/]
            */
        [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
             public void setIdentifiant (final [a.genPropertyType()/] [a.name.normalize().apply_parameterMethodClassicIn()/])
        [else]
             [a.getSetter()/]
        [/if]
           {
              [a.getAffectationPrefix()/][a.name.normalize().apply_attributeDefault()/] = [a.name.normalize().apply_parameterMethodClassicIn()/];
           }
        
      [/if]
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.isPropertyFromParent(d))]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
           /**
        [r.comPrefix('Obtenir')/]
        [r.comReturn()/]
            */
           [r.getGetterIdDto()/]
           {
              if ([r.name.toLowerFirst().apply_attributeDefault()/] != null)
              {
                  [r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.toLowerFirst().apply_attributeDefault()/].getId();
              }
              return [r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/];
           }
        
           /**
        [r.comPrefix('Affecter')/]
        [r.getComParamIdIn()/]
            */
           [r.getSetterIdDto()/]
           {
              [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.toLowerFirst().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
              [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/] = null;
           }
        
      [/if]
         /**
      [r.comPrefix('Obtenir')/]
      [r.comReturn()/]
          */
         [r.getGetter()/]
         {
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
              if ([r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/] != null && [r.name.toLowerFirst().apply_attributeDefault()/] == null)
              {
                 [r.name.toLowerFirst().apply_attributeDefault()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildSimpleDtoName() + ' service').apply_methodDefault()/]().findById([r.name.toLowerFirst().apply_attributeDefault()/][r.namePK_ID()/]);
              }
      [/if]
            return [r.name.toLowerFirst().apply_attributeDefault()/];
         }
      
         /**
      [r.comPrefix('Affecter')/]
      [r.getComParamIn()/]
          */
         [r.getSetterDtoReference()/]
         {
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
              if ([r.name.toLowerFirst().apply_parameterMethodClassicIn()/] == null)
              {
                 [r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/](null);
              }
              else
              {
                 [r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/]([r.name.toLowerFirst().apply_parameterMethodClassicIn()/].getId());
              }
      [/if]
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeDefault()/] = [r.name.toLowerFirst().apply_parameterMethodClassicIn()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
      [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
      [r.comReturn()/]             
          */
         [r.getGetterListDto()/]
         {
            if ([r.namePK_ID()/] != null && [r.name.toLowerFirst().apply_attributeMultiple()/] == null)
            {
               [r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessClassName()/].[('get ' + d.buildSimpleDtoName() + ' service').apply_methodDefault()/]().[r.getFindListRefByDto(d)/]([r.namePK_ID()/]);
            }
            return [r.name.toLowerFirst().apply_attributeMultiple()/];
         }
      
         /**
      [r.comPrefix('Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
      [r.getComParamTabIn()/]
          */
         [r.getSetterListDto()/]
         {
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).name.toLowerFirst().apply_parameterMethodMultiple()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
      [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' :')/]
      [r.comReturn()/]
          */
         [r.getGetterListDto()/]
         {
      [if (not r.containingType.oclAsType(environment::DTO).isNotPersistent())]
              if ([r.namePK_ID()/] != null && [r.name.toLowerFirst().apply_attributeMultiple()/] == null)
              {
                 [r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).buildAppliUserBusinessClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildSimpleDtoName() + ' service').apply_methodDefault()/]().[r.getFindListRefInverseByDto(d)/]([r.namePK_ID()/]);
              }
      [/if]
            return [r.name.toLowerFirst().apply_attributeMultiple()/];
         }
      
         /**
      [r.comPrefix('Affecter la liste de \'' + r.nameClassDto() + '\' :')/]
      [r.getComParamTabIn()/]
          */
         [r.getSetterListDto()/]
         {
            [r.getAffectationPrefix()/][r.name.toLowerFirst().apply_attributeMultiple()/] = [r.referencedType.oclAsType(environment::DTO).name.toLowerFirst().apply_parameterMethodMultiple()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
          * Obtenir [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
      [r.comReturnInverse()/]
          */
         [r.getGetterInverseIdDto()/]
         {
            return [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];
         }
      
         /**
          * Affecter [r.nameBaseReferenceInverse()/] de [d.nameBaseDto()/].
      [r.getComParamInverseIdIn()/]
          */
         [r.getSetterInverseIdDto()/]
         {
            [r.getAffectationPrefix()/][r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesComputedNoStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
      [r.comPrefix('Obtenir l\'instance de \'' + r.nameClassDto() + '\' calculee :')/]
      [r.comReturn()/]
          */
         [r.getGetter()/]
         {
            // [r.referencedType.oclAsType(environment::DTO).name.normalize().apply_methodGet()/]
            [protected (r.getUserCodeId(r.referencedType.oclAsType(environment::DTO).name.normalize().apply_methodGet())) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO Calculer la référence
                    return null;
            [/protected]
      
         }
      
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesComputedStar())]
    [if (not r.isPropertyFromParent(d))]
         /**
      [r.comPrefix('Obtenir la liste de \'' + r.nameClassDto() + '\' calculee :')/]
      [r.comReturn()/]
          */
         [r.getGetterListDto()/]
         {
            // [('get' + r.referencedType.oclAsType(environment::DTO).name.normalize().apply_attributeMultiple()).apply_methodDefault()/]
            [protected (r.getUserCodeId(('get' + r.referencedType.oclAsType(environment::DTO).name.normalize().apply_attributeMultiple()).apply_methodDefault())) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO Calculer la référence
                    return null;
            [/protected]
      
         }
      
    [/if]
  [/for]
     /**
      * Recycler le dto '[d.nameClassDto()/]'.
      * @param [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]
      *           (In)(*) L'identifiant de [d.nameBaseDto()/].
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [a.getComParamIn()/]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
      [r.getComParamIdIn()/]
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
    [r.getComParamInverseIdIn()/]
  [/for]
      */
     public void [d.buildDtoClassName().apply_methodReset()/] (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetAttributes()/][d.getResetDtoParametersId()/][d.getResetDtoReferencingParamsId()/])
     {
        setId([d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]);
  [for (a : environment::Attribute | d.attributesNotComputed())]
    [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
            setIdentifiant([a.name.normalize().apply_parameterMethodClassicIn()/]);
    [else]
            [a.name.normalize().apply_methodSet()/]([a.name.normalize().apply_parameterMethodClassicIn()/]);
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesNoStar())]
    [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
            [r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/]([r.name.toLowerFirst().apply_parameterMethodClassicIn()/][r.namePK_ID()/]);
    [/if]
  [/for]
  [for (r : environment::Reference | d.referencesStarStar())]
          [r.name.toLowerFirst().apply_attributeMultiple()/] = null;
  [/for]
  [for (r : environment::Reference | d.referencesStarNoStar())]
          [r.name.toLowerFirst().apply_attributeMultiple()/] = null;
  [/for]
  [for (r : environment::Reference | d.referencingStar())]
          [r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/]([r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]);
  [/for]
  [if (not d.isNotPersistent() and d.hasEntityWithVersion())]
          ['version value'.apply_attributeDefault()/] = null;
  [/if]
     }
  [if (d.referencesNoStar()->select(r | not r.referencedType.oclAsType(environment::DTO).isNotPersistent())->size() > 0 or d.referencingStar()->size() > 0)]
    
       /**
        * Recycler le dto '[d.nameClassDto()/]'.
        * @param [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]
        *           (In)(*) L'identifiant de [d.nameBaseDto()/].
    [for (a : environment::Attribute | d.attributesNotComputed())]
      [a.getComParamIn()/]
    [/for]
    [for (r : environment::Reference | d.referencesNoStar())]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
        [r.getComParamIn()/]
      [/if]
    [/for]
    [for (r : environment::Reference | d.referencingStar())]
      [r.getComParamInverseIn()/]
    [/for]
        */
       public void [d.buildDtoClassName().apply_methodReset()/] (final [d.genPkType()/] [d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/][d.getResetAttributes()/][d.getResetDtoParameters()/][d.getResetDtoReferencingParams()/])
       {
          setId([d.nameENUM_PK_ID().apply_parameterMethodClassicIn()/]);
    [for (a : environment::Attribute | d.attributesNotComputed())]
      [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')]
              setIdentifiant([a.name.normalize().apply_parameterMethodClassicIn()/]);
      [else]
              [a.name.normalize().apply_methodSet()/]([a.name.toLowerFirst().apply_parameterMethodClassicIn()/]);
      [/if]
    [/for]
    [for (r : environment::Reference | d.referencesNoStar())]
      [if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())]
              [r.name.toLowerFirst().apply_methodSet()/]([r.name.toLowerFirst().apply_parameterMethodClassicIn()/]);
      [/if]
    [/for]
    [for (r : environment::Reference | d.referencesStarStar())]
            [r.name.toLowerFirst().apply_attributeMultiple()/] = null;
    [/for]
    [for (r : environment::Reference | d.referencesStarNoStar())]
            [r.name.toLowerFirst().apply_attributeMultiple()/] = null;
    [/for]
    [for (r : environment::Reference | d.referencingStar())]
            if ([r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/] == null)
            {
               [r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/](null);
            }
            else
            {
               [r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/]([r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/].getId());
            }
    [/for]
    [if (not d.isNotPersistent() and d.hasEntityWithVersion())]
            ['version value'.apply_attributeDefault()/] = null;
    [/if]
       }
  [/if]
  
  [if (d.hasParent())]
       @Override
       public void validate () throws Spi4jValidationException
       {
    [if (d.hasMandatoryFields() or d.hasStringFieldWithSize())]
            List<String> ['champs invalides'.apply_variableDefault()/] = prepareValidate();
      [for (a : environment::Attribute | d.attributesNotComputed())][if (not a.isPropertyFromParent(d))][d.validProperty(a)/][/if][/for][for (r : environment::Reference | d.referencesNoStar())][if (not r.isPropertyFromParent(d))][if (r.oppositeOf = null or not (r.oppositeOf.isMultiple() and r.oppositeOf.navigable))][d.validProperty(r)/][/if][/if][/for][for (r : environment::Reference | d.referencingStar())][if (not r.isPropertyFromParent(d))][d.validPropertyInverse(r)/][/if][/for]      // si la liste des champs invalides n'est pas nulle, elle ne peut pas être vide à cet endroit
            if (['champs invalides'.apply_variableDefault()/] != null)
            {
               throw new Spi4jValidationException(this, ['champs invalides'.apply_variableDefault()/].toArray(new String['['/]['champs invalides'.apply_variableDefault()/].size()]));
            }
    [else]
            // aucun champ obligatoire
    [/if]
       }
  [else]
       @Override
       public void validate () throws Spi4jValidationException
       {
    [if (d.hasMandatoryFields() or d.hasStringFieldWithSize())]
            List<String> ['champs invalides'.apply_variableDefault()/] = null;
      [for (a : environment::Attribute | d.attributesNotComputed())][d.validProperty(a)/][/for][for (r : environment::Reference | d.referencesNoStar())][if (r.oppositeOf = null or not (r.oppositeOf.isMultiple() and r.oppositeOf.navigable))][d.validProperty(r)/][/if][/for][for (r : environment::Reference | d.referencingStar())][d.validPropertyInverse(r)/][/for]      // si la liste des champs invalides n'est pas nulle, elle ne peut pas être vide à cet endroit
            if (['champs invalides'.apply_variableDefault()/] != null)
            {
               throw new Spi4jValidationException(this, ['champs invalides'.apply_variableDefault()/].toArray(new String['['/]['champs invalides'.apply_variableDefault()/].size()]));
            }
    [else]
            // aucun champ obligatoire
    [/if]
       }
  [/if]
  
     @Override
     public String toString ()
     {
        // toString
        [protected (d.getUserCodeId('toString')) startTagPrefix('// ') endTagPrefix('// ')]
          
                return [d.toString()/]
          
        [/protected]
  
     }
  
  [if (d.isNotPersistent())]
       // Méthodes
       [protected (d.getUserCodeId('Méthodes')) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    
  [/if]
  }[/template]

[template public resetDtoParametersId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())], final [r.genPkType()/] [r.nameParamId()/][/for][/template]

[template public resetCallDtoParametersId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())], [r.nameParamId()/][/for][/template]

[template public resetDtoParameters(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())], final [r.nameDto()/] [r.nameParam()/][/for][/template]

[template public resetCallDtoParameters(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())], [r.nameParam()/][/for][/template]

[template public toString(d : environment::DTO)]
  getClass().getSimpleName() + '['['/]' + [d.namePK_ID()/] [d.endToString()/] + ']';[/template]

[template public endToString(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())]+ ", " + [if (a.useSpi4jSecurity() and d.dtoIsUser() and a.name = 'identifiant')] getIdentifiant() [else][a.name.normalize().apply_methodGet()/]()[/if] [/for][for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())] [if (not r.isPropertyFromParent(d))] + ", " + [r.name.toLowerFirst().apply_methodGet()/][r.namePK_ID()/] ()[/if][/if][/for] [for (r : environment::Reference | d.referencingStar())][if (not r.isPropertyFromParent(d))] + ", " + [r.nameBaseReferenceInverse().apply_methodGet()/][r.namePK_ID()/] () [/if][/for][/template]

[template public resetDtoReferencingParamsId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], final [r.genPkType()/] [r.nameParamInverseId()/][/for][/template]

[template public resetCallDtoReferencingParamsId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], [r.nameParamInverseId()/][/for][/template]

[template public resetDtoReferencingParams(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], final [r.containingType.oclAsType(environment::DTO).nameDto()/] [r.nameParamInverse()/][/for][/template]

[template public resetCallDtoReferencingParams(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], [r.nameParamInverse()/][/for][/template]

[template public resetAttributes(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())], final [a.gentTypeAndNameParam()/][/for][/template]

[template public resetCallAttributes(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())], [a.nameParam()/][/for][/template]

[template private validProperty(d : environment::DTO, p : environment::Attribute)]
  [if (p.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.toLowerFirst().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
  [d.validateSize(p)/][/template]

[template private validProperty(d : environment::DTO, p : environment::Reference)]
  [if (p.isMandatory())]
    [if (not p.referencedType.oclAsType(environment::DTO).isNotPersistent())]
            ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.toLowerFirst().apply_attributeDefault()/][d.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
    [else]
            ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[p.nameBase()/]", [p.name.toLowerFirst().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
    [/if]
  [/if]
[/template]

[template private validPropertyInverse(d : environment::DTO, r : environment::Reference)]
  [if (r.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkMandatoryField("[r.nameBaseReferenceInverse()/]", [r.nameBaseReferenceInverse().apply_attributeDefault()/][d.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[template private nameBase(p : environment::Property)]
  [if (p.oclIsTypeOf(environment::Attribute))][p.oclAsType(environment::Attribute).nameBaseAttribute()/][elseif (p.oclIsTypeOf(environment::Reference))][p.oclAsType(environment::Reference).nameBaseReference()/][/if][/template]

[template private nameProp(p : environment::Property)]
  [if (p.oclIsTypeOf(environment::Attribute))][p.oclAsType(environment::Attribute).nameProperty()/][elseif (p.oclIsTypeOf(environment::Reference))][p.oclAsType(environment::Reference).namePropertyId()/][/if][/template]

[template private validateSize(d : environment::DTO, a : environment::Attribute)]
  [if (a.hasSize() and a.type.name = 'String')]
          ['champs invalides'.apply_variableDefault()/] = DtoUtil.checkFieldSize("[a.nameBase()/]", [a.name.normalize().apply_attributeDefault()/], [d.buildAttributesEnumName()/].[a.name.normalize().apply_attributeEnum()/].getSize(), ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[**
 * ****************
 * Paramétrage début
*/]
[template public getResetAttributes(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())], final [a.getTypeAndNameParam()/][/for][/template]

[template public getResetDtoParameters(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())], final [r.referencedType.oclAsType(environment::DTO).buildDtoClassName()/] [r.name.toLowerFirst().apply_parameterMethodClassicIn()/][/if][/for][/template]

[template public getResetDtoParametersId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())], final [r.genPkType()/] [r.name.toLowerFirst().apply_parameterMethodClassicIn()/][r.namePK_ID()/][/if][/for][/template]

[template public getResetDtoReferencingParams(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], final [r.containingType.oclAsType(environment::DTO).buildDtoClassName()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][/for][/template]

[template public gresetDtoReferencingParams(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], final [r.containingType.oclAsType(environment::DTO).nameDto()/] [r.nameParamInverse()/][/for][/template]

[template public getResetDtoReferencingParamsId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/][/for][/template]

[**
 * Calls
*/]
[template public getResetCallDtoParametersId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())], [r.nameBaseReference().apply_parameterMethodClassicIn()/][r.namePK_ID()/][/if][/for][/template]

[template public getResetCallAttributes(d : environment::DTO)]
  [for (a : environment::Attribute | d.attributesNotComputed())], [a.name.normalize().apply_parameterMethodClassicIn()/][/for][/template]

[template public getResetCallDtoReferencingParams(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][/for][/template]

[template public getResetCallDtoReferencingParamsId(d : environment::DTO)]
  [for (r : environment::Reference | d.referencingStar())], [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/][/for][/template]

[template public getResetCallDtoParameters(d : environment::DTO)]
  [for (r : environment::Reference | d.referencesNoStar())][if (not r.referencedType.oclAsType(environment::DTO).isNotPersistent())], [r.nameBaseReference().apply_parameterMethodClassicIn()/][/if][/for][/template]

[comment : Add required imports for app auto fields /]
[template private writeImports(s : soa::System) post(self.trim())]
  [s.initImports()/]
  [s.addImport('java.util.List')/]
  [s.addImport('java.util.Date')/]
  [s.addImport('fr.spi4j.type.XtopSup')/]
  [s.addImport(s.getImportForDto_Itf())/]
  [s.flushImports()/][/template]

[comment : Add all required imports. /]
[template private writeImports(d : environment::DTO) post(self.trim())]
  [d.initImports()/]
  [d.addImport('java.util.List')/]
  [d.addImport('java.util.Date')/]
  [d.addImport('fr.spi4j.business.dto.DtoUtil')/]
  [d.addImport('java.io.Serializable', not d.hasParent() and not d.isNotPersistent() and d.hasEntityWithVersion())/]
  [d.addImport('fr.spi4j.exception.Spi4jValidationException')/]
  [d.addImport('fr.spi4j.lib.security.User_Itf', d.useSpi4jSecurity() and d.dtoIsUser())/]
  [d.addImport(d.buildPackageBusiness() + '.' + d.buildAppliDtoAbstractClassName(), d.hasAutomaticColumns())/]
  [d.addImport(d.getImportForDto_Itf())/]
  [d.addImport(d.getExternalUserBusinessGen(), d.references->size() > 0)/]
  [d.addImport(d.buildImportUserBusinessGen(), d.references->size() > 0)/]
  
  [for (r : environment::Reference | d.references)]
    [if (r.referencedType.oclAsType(environment::DTO) <> null and r.referencedType.oclAsType(environment::DTO).buildPackageBusinessApiDto() <> d.buildPackageBusinessApiDto())]
      [d.addImport(r.referencedType.oclAsType(environment::DTO).buildImportDto())/]
    [/if]
  [/for]
  
  [for (r : environment::Reference | d.referencingStar())]
    [if (r.referencedType.oclAsType(environment::DTO) <> null and r.containingType.oclAsType(environment::DTO).buildPackageBusinessApiDto() <> d.buildPackageBusinessApiDto())]
      [d.addImport(r.containingType.oclAsType(environment::DTO).buildImportDto())/]
    [/if]
  [/for]
  
  [for (a : environment::Attribute | d.attributes)]
    [if (a.type.oclIsKindOf(environment::Enumeration))]
      [d.addImport(a.type.oclAsType(environment::Enumeration).buildPackageEnum() + '.' + a.type.oclAsType(environment::Enumeration).buildEnumName())/]
    [/if]
  [/for]
  
  [for (enum : environment::Enumeration | d.getRoot().eAllContents(environment::Enumeration))]
    [d.addImport(enum.buildPackageEnum() + '.' + enum.buildEnumName())/]
  [/for]
  [d.flushImports()/][/template]

[**
 * Autres
*/]
[template private getNameProp(p : environment::Property)]
  [if (p.oclIsTypeOf(environment::Attribute))][p.oclAsType(environment::Attribute).nameProperty()/][elseif (p.oclIsTypeOf(environment::Reference))][p.oclAsType(environment::Reference).namePropertyId()/][/if][/template]

[template private getNameReferenceVar(r : environment::Reference)]
  [r.name.toLowerFirst().apply_attributeDefault()/][/template]

[**
 * ****************
 * Paramétrage fin
*/]
