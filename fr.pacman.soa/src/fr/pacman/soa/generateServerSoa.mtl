[module generateServerSoa('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::files::genRSResources/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::files::genMatch/]
[import fr::pacman::soa::files::genMatchItf/]
[import fr::pacman::soa::files::genService/]
[import fr::pacman::soa::files::genServiceRequirements/]
[import fr::pacman::soa::files::genServiceTest/]
[import fr::pacman::soa::files::genServiceCXF/]
[import fr::pacman::soa::files::genServiceRS/]
[import fr::pacman::soa::files::genUserMatching/]
[import fr::pacman::soa::files::genAppliMatchAbs/]
[import fr::pacman::soa::files::genMapperItf/]
[import fr::pacman::soa::files::genMapper/]
[import fr::pacman::soa::files::genUserMapper/]
[import fr::pacman::soa::files::genLog4j/]
[import fr::pacman::soa::files::genWebAppSecurity/]
[import fr::pacman::soa::files::genWebappRemotingServlet/]
[import fr::pacman::soa::files::genCXFServlet/]
[import fr::pacman::soa::files::genRSResources/]

[comment encoding = UTF-8 /]
[comment : ****************************************************************/]
[comment : En OCL on a toujours pris une seule lettre pour les parametres. /]
[comment : pour eviter de confondre avec les services, System = m.         /]
[comment : ****************************************************************/]
[comment : Generation complete a partir du systeme.                        /]
[comment : ****************************************************************/]
[comment @main/]
[template public GenerateServerSystem(m : soa::System)]
  
      [m.genLog4j()/]
  	[if (m.usePersistence())][m.genUserMatching()/][/if]
  
      [if (m.hasAutomaticColumns())][m.genAppliMatchAbs()/][/if]
  
  	[m.genMappers()/]
      [m.genServicesImpls()/]
  	[m.genDtos()/]
  
  [if (m.useWS())]
    		[m.genRsTokensConfigurator()/]
    		[m.genRsTokensFileConfig()/]
    		[m.genRsTechnicalTokensResources()/]
    		[m.genRsOAuth2Resources()/]
    		[m.genRsWebXmlServletMappingFragment()/]
  [/if]
  	[if (m.useWS())][m.genCXFServlet()/][/if]
  
  	[if (m.isFacadeHk2Injection())][m.genRSApplicationConfig()/][/if]
  
  	[if (m.isFacadeFactory())][m.genRSServicesFacadeFactory()/][/if]
  
      [if (m.clientNeedRemotingServlet())][m.genWebappRemotingServlet()/][/if]
  
  	[if (m.useWebAppSecuritySchemes())][m.genWebAppSecurityHelper()/][/if]
  
  	[m.genAllOtherSelectedResources()/]
[/template]

[comment : Generation du fichier log4j dans les ressources. /]
[comment : On remplace le  log4j existant (entity) par une version SOA. /]
[template private genLog4j(m : soa::System)]
  
  [if (m.useLog4J())][m.genLog4j('server')/][/if]
  
[/template]

[comment : Generation des mappers. /]
[template private genMappers(m : soa::System)]
  
  [if (m.clientNeedXto() or m.isWSCrudApplication())]
            [m.eAllContents(environment::DTO)->asSet()->sortedBy(temp1 | temp1.name)->genMappers(m)/]
  [else]
            [if (m.useWS())][m.xtoAGenerer()->genMappers(m)/][/if]
    
  [/if]
  
[/template]

[comment : Generation des mappers. /]
[template private genMappers(xtos : OrderedSet(environment::DTO), n : environment::Namespace)]
  
  [if (not xtos->isEmpty())]
        [xtos->genUserMapper(n)/]
    [for (d : environment::DTO | xtos)]
      		[if (not d.isParent())][d.genMapperItf()/][d.genMapper()/][/if]
      
    [/for]
  [/if]
  
[/template]

[comment : Generation des services crud pour l'ensemble des DTOs (si option active). /]
[comment : Le nom de la methode n'est pas bon, mais il est conserv√© pour faire le pendant /]
[comment : avec ce qui existe deja au niveau de la generation du projet 'common'. /]
[template private genDtos(m : soa::System)]
  
  [if (m.isWSCrudApplication())]
    [for (d : environment::DTO | m.eAllContents(environment::DTO))]
      [if (not d.isNotPersistent() and not d.isParent())]
        			[null.genServiceRS(d)/]
        			[null.genRSResource(d)/]
      [/if]
    [/for]
  [/if]
  
[/template]

[comment : Generation des implementations pour les services. /]
[template private genServicesImpls(m : soa::System)]
  
  [for (s : soa::Service | m.eAllContents(soa::Service))][s.genServiceImplementations()/][/for]
  
[/template]

[comment : Generation des implementations pour un seul service. /]
[template private genServiceImplementations(s : soa::Service)]
  
  [if (s.serviceSeul())]
    [s.genService()/][s.genServiceTest()/]
    [if (s.useServiceRequirements())][s.genServiceRequirements()/][/if]
  [/if]
  [if (s.hasCXFOperations())][s.genServiceCXF()/][/if]
  
  [if (s.hasRSOperations())]
    [s.genServiceRS(null)/]
    [s.genRSResource(null)/][/if]
  
[/template]

[comment : Generation des autres ressources (matcher, requirement, etc... ). /]
[template private genAllOtherSelectedResources(m : soa::System)]
  	
  [for (d : environment::DTO | m.listeDtos())][d.genAllOtherSelectedResources()/][/for]
  
[/template]

[comment : Generation des autres ressources pour un DTO (matcher, requirement, etc... ). /]
[template private genAllOtherSelectedResources(d : environment::DTO)]
  	
  [if (not d.isNotPersistent() and not d.isParent())][d.genMatch()/][d.genMatchItf()/][/if]
  
  [if (not d.isNotPersistent() and not d.isParent() or d.serviceFromDto() <> null)]
    	[d.serviceFromDto().genService(d)/]
    	[if (d.useServiceRequirements())][d.serviceFromDto().genServiceRequirements(d)/][/if]
    
        [d.serviceFromDto().genServiceTest(d)/]
  [/if]
  
[/template]

[comment : ****************************/]
[comment : Les generations partielles. /]
[comment : ****************************/]
[comment : Generation pour un service specifique. /]
[comment @main/]
[template public GenerateServerService(s : soa::Service)]
  
  [s.genServiceImplementations()/]
  [if (s.hasCXFOperations())][s.genCXFServlet()/][/if]
   
[/template]

[comment :  Generation pour un composant. /]
[comment @main/]
[template public GenerateServerComponent(c : soa::Component)]
  
  [for (s : soa::Service | c.eAllContents(soa::Service))][s.genServiceImplementations()/][/for]
  
  [if (c.hasCXFOperations())][c.genCXFServlet()/][/if]
  
[/template]

[comment : Generation a partir d'un DTO. /]
[comment @main/]
[template public GenerateServerDto(d : environment::DTO)]
  
  [d.genAllOtherSelectedResources()/]
[/template]