[module generateCommonSoa('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::soa::common::services/]
[import fr::pacman::commons::soa::common::utils/]
[import fr::pacman::commons::soa::files::genXto/]
[import fr::pacman::commons::soa::files::genXtoTest/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::files::genServiceItf/]
[import fr::pacman::soa::files::genServiceCXFItf/]
[import fr::pacman::soa::files::genServiceRSItf/]
[import fr::pacman::soa::files::genUserBusiness/]
[import fr::pacman::soa::files::genDto/]
[import fr::pacman::soa::files::genDtoParent/]
[import fr::pacman::soa::files::genDtoTest/]
[import fr::pacman::soa::files::genAttributesEnum/]
[import fr::pacman::soa::files::genPermissionsItf/]
[import fr::pacman::soa::files::genFetchingStrategy/]
[import fr::pacman::soa::files::genLog4j/]

[comment encoding = UTF-8 /]
[comment : ****************************************************************/]
[comment : En OCL on a toujours pris une seule lettre pour les parametres. /]
[comment : pour eviter de confondre avec les services, System = m.         /]
[comment : ****************************************************************/]
[comment : Generation complete a partir du systeme.                        /]
[comment : ****************************************************************/]
[comment @main/]
[template public GenerateCommonSystem(m : soa::System)]
  
      [m.genLog4j()/]
  	[m.genPermissionsItf()/]
  	[m.genUserBusiness()/]	
  	[m.genXtos()/]
      [m.genServicesItfs()/]
  	[m.genDtos()/]
  	[m.genAppliDtoAbs()/]
  	[m.genAppliXtoAbs()/]
[/template]

[comment : Generation de la classe regroupant les champs additionnels (DTO). /]
[template private genAppliDtoAbs(m : soa::System)]
  
  [if (m.hasAutomaticColumns())][m.genDtoAppliAbs()/][/if]
[/template]

[comment : Generation de la classe regroupant les champs additionnels (XTO). /]
[template private genAppliXtoAbs(m : soa::System)]
  
  [if ((m.clientNeedXto() or m.useWS()) and m.hasAutomaticColumns())][m.genXtoAppliAbs()/][/if]
[/template]

[comment : Generation du fichier log4j dans les ressources. /]
[comment : On remplace le  log4j existant (entity) par une version SOA. /]
[template private genLog4j(m : soa::System)]
  
  [if (m.useLog4J())][m.genLog4j('commons')/][/if]
[/template]

[comment : Generation des XTOs (On recupere tous les XTO pour la selection). /]
[template private genXtos(n : environment::Namespace)]
  
  [if (n.clientNeedXto() or n.isWSCrudApplication())]
    	[n.eAllContents(environment::DTO)->asSet()->genSelectedXtos()/]
  [else]
    	[if (n.useWS())][n.xtoAGenerer()->genSelectedXtos()/][/if]
  [/if]
[/template]

[comment : Generation des Xtos (On recupere tous les XTO pour la selection). /]
[template private genSelectedXtos(xtos : OrderedSet(environment::DTO))]
  
  [for (d : environment::DTO | xtos)]
    	[if (not d.isParent())][d.genXtoTest()/][/if]
        [d.genXto()/]
  [/for]
  
[/template]

[comment : Generation des interfaces des services (On recupere tous les services pour la selection).. /]
[template private genServicesItfs(m : soa::System)]
  
  [for (s : soa::Service | m.eAllContents(soa::Service))][s.genServiceItfs()/][/for]
[/template]

[comment : Generation des DTO (On recupere tous les DTO pour la selection). /]
[template private genDtos(n : environment::Namespace)]
  
  [for (d : environment::DTO | n.listeDtos())][d.genSelectedDto()/][/for]
[/template]

[comment : Generation des interfaces pour un seul service. /]
[comment : Generation des services web (SOAP = CXF RS = REST). /]
[comment : Important d'essayer de recuperer le DTO, cela permet d'ecrire /]
[comment : le crud en plus des autres operations (si option crud active)./]
[template private genServiceItfs(s : soa::Service)]
  
  [if (s.serviceSeul())][s.genServiceItf()/][/if]
  [if (s.hasRSOperations())][s.genServiceRSItf(s.dtoFromService())/][/if]
  [if (s.hasCXFOperations())][s.genServiceCXFItf()/][/if]
[/template]

[comment : Generation pour un seul DTO (+ service si option crud active). /]
[template private genSelectedDto(d : environment::DTO)]
  
  [if (not d.isNotPersistent() and not d.isParent() or d.serviceFromDto() <> null)]
    	[d.serviceFromDto().genServiceItf(d)/]
  [/if]
  [if (d.isWSCrudApplication() and not d.isNotPersistent() and not d.isParent())]
    	[null.genServiceRSItf(d)/]
  [/if]
  [if (d.isParent())]
    	[d.genDtoParent()/]
  [else]
    	[d.genDto()/]
    	[d.genDtoTest()/]
    	[d.genAttributesEnum()/]
    	[if (d.useFetchingStrategy())][d.genFetchingStrategy()/][/if]
  [/if]
  
[/template]

[comment : ****************************/]
[comment : Les generations partielles. /]
[comment : ****************************/]
[comment : Generation partielle pour un service. /]
[comment @main/]
[template public GenerateCommonService(s : soa::Service)]
  
  [s.genServiceItfs()/]
[/template]

[comment : Generation partielle pour un composant. /]
[comment @main/]
[template public GenerateCommonComponent(component : soa::Component)]
  
  [for (s : soa::Service | component.eAllContents(soa::Service))]
    [s.genServiceItfs()/]
  [/for]
  
[/template]

[comment : Generation partielle pour un DTO. /]
[comment @main/]
[template public GenerateCommonDto(d : environment::DTO)]
  
  [d.genSelectedDto()/]
  
  [if (d.clientNeedXto() or not (d.systemeRacine() = null) and d.systemeRacine().xtoAGenerer()->includes(d) and d.useWS())]
    	[Sequence{d}->asSet()->genSelectedXtos()/]
  [/if]
   
  [if (d.systemeRacine() = null and not d.isNotPersistent() and not d.isParent() and d.serviceFromDto() = null)]
    	[d.serviceFromDto().genServiceItf(d)/]
  [/if]
  
[/template]

[comment : Generation partielle pour un namespace. /]
[comment @main/]
[template public GenerateCommonPackage(n : environment::Namespace)]
  
  [if (n.clientNeedXto() or not (n.systemeRacine() = null) and n.useWS())]
    	[n.systemeRacine().xtoAGenerer()->select(d | n.eAllContents(environment::DTO)->includes(d))->genSelectedXtos()/]
  [/if]
      
  [for (d : environment::DTO | n.eAllContents(environment::DTO))]
    [if (not (n.systemeRacine() = null))]
      [if (not d.isNotPersistent() and not d.isParent() and d.serviceFromDto() = null)]
                        [d.serviceFromDto().genServiceItf(d)/]
      [/if]
    [/if]
    	[d.genSelectedDto()/]
  [/for]
  
[/template]
