[module genRSResources('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::soa::common::classes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::server::ws::rs::impl::category::RSResources/]
[import fr::pacman::soa::server::ws::rs::impl::category::RSResourcesTest/]

[comment encoding = UTF-8 /]
[comment : ******************************************************/]
[comment : Generate the configuration file for REST publication. /]
[comment : ******************************************************/]
[template public genRsTokensFileConfig(m : soa::System)]
  [file (m.getServerResourcesDir().filename('', m.getApplicationName() + 'Tokens.properties'), overwrite, 'UTF-8')]
    [m.rsTokensConfigFile()/]
  [/file]
[/template]

[comment : ***************************************************************************** /]
[comment : Generate a authentication class helper for each defined token (apikey, http). /]
[comment : NOT USED FOR NOW... generated through modeling.                               /]
[comment : ***************************************************************************** /]
[template public genRsAuthResources(m : soa::System)]
  [for (c : soa::Component | m.eAllContents(soa::Component))]
    [for (s : soa::SecurityScheme | c.securitySchemes)]
      [if (s.isAuthApiKey())]
        [file (s.getServerSourceDir().filename(m.buildPackageRsResources(false), s.buildRSAuthenticationResourceClassName() + '.java'), overwrite, 'UTF-8')][s.rsAuthenticationResource(null)/][/file]
      [/if]
    [/for]
  [/for]
[/template]

[comment : ***************************************************************************** /]
[comment : Generate a authentication class helper for each defined token (oauth2, oidc). /]
[comment : ***************************************************************************** /]
[template public genRsOAuth2Resources(m : soa::System)]
  [for (c : soa::Component | m.eAllContents(soa::Component))]
    [for (s : soa::SecurityScheme | c.securitySchemes)]
      [if (s.isAuthOauth2() or s.isAuthOidc())]
        [for (f : soa::Flow | s.flows)]
          [if (not f.isAuthImplicit())]
            [file (f.getServerSourceDir().filename(m.buildPackageRsResources(false), s.buildRSO2AuthenticationResourceClassName(f) + '.java'), overwrite, 'UTF-8')][s.rsAuthenticationResource(f)/][/file]
          [/if]
        [/for]
      [/if]
    [/for]
  [/for]
[/template]

[comment : **********************************************************************************************/]
[comment : Generate a fragment for the web.xml file, contains the base URI to map for the REST services. /]
[comment : **********************************************************************************************/]
[template public genRsWebXmlServletMappingFragment(m : soa::System)]
  [file (m.getServerResourcesDir().filename('META-INF', 'web-fragment.xml'), overwrite, 'UTF-8')]
    [m.rsWebFragment()/]
  [/file]
[/template]

[comment : *******************************************************/]
[comment : Generate the technical resources for REST publication. /]
[comment : *******************************************************/]
[template public genRsTechnicalTokensResources(m : soa::System)]
  [file (m.getServerSourceDir().filename(m.buildPackageRsResources(false), m.buildRSTechnichalResourcesClassName() + '.java'), overwrite, 'UTF-8')]
    [m.rsTechnicalTokensResources()/]
  [/file]
[/template]

[comment : ******************************************************/]
[comment : Generate the TokensConfigurator for REST publication. /]
[comment : ******************************************************/]
[template public genRsTokensConfigurator(m : soa::System)]
  [file (m.getServerSourceDir().filename(m.buildPackageRS(), m.buildRSTokensConfiguratorClassName() + '.java'), overwrite, 'UTF-8')]
    [m.rsTokensConfigurator()/]
  [/file]
[/template]

[comment : ***************************************************************/]
[comment : Generation of resources for each service for REST publication. /]
[comment : ***************************************************************/]
[template public genRSResource(s : soa::Service, d : environment::DTO)]
  [file (s.getServerSourceDir().filename(s.buildPackageRsResources(s = null), s.buildRSResourceClassName(d) + '.java'), overwrite, 'UTF-8')]
    [s.rsResource(d)/]
  [/file]
[/template]

[comment : *****************************************************************************/]
[comment : Generation of resources for JUnit test of each service for REST publication. /]
[comment : *****************************************************************************/]
[template public genRSResourceTest(s : soa::Service, d : environment::DTO)]
  [file (s.getServerTestDir().filename(s.buildPackageRsResources(false), s.buildRSResourceTestClassName(d) + '.java'), overwrite, 'UTF-8')]
    [s.rsResourceTest()/]
  [/file]
[/template]