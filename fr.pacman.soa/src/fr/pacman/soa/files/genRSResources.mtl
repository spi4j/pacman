[comment encoding = UTF-8 /]
[module genRSResources('http://www.obeonetwork.org/dsl/soa/4.0.0',
                       'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::soa::common::classes /]
[import fr::pacman::soa::common::outils /]

[import fr::pacman::soa::server::ws::rs::impl::category::RSResources /]
[import fr::pacman::soa::server::ws::rs::impl::category::RSResourcesTest /]

[comment : ******************************************************/]
[comment : Generate the configuration file for REST publication. /]
[comment : ******************************************************/]
[template public genRsTokensFileConfig (m : System)]
[comment : Generate a .properties file with the default configuration for the required tokens. /]
[file (filename(getServerResourcesDir(), '', getApplicationName() + 'Tokens.properties'), false, 'UTF-8')]
[m.rsTokensConfigFile()/]
[/file]
[/template]

[comment : ***************************************************************************** /]
[comment : Generate a authentication class helper for each defined token (apikey, http). /]
[comment : NOT USED FOR NOW... generated through modeling.                               /]
[comment : ***************************************************************************** /]
[template public genRsAuthResources (m : System)]
[for (c : Component | m.eAllContents(Component))][for (s : SecurityScheme | c.securitySchemes)]
[if s.isAuthApiKey()]
[file (filename(getServerSourceDir(), m.buildPackageRsResources(false), buildRSAuthenticationResourceClassName() +'.java'), false, 'UTF-8')]
[s.rsAuthenticationResource(null)/][/file][/if][/for][/for]
[/template]

[comment : ***************************************************************************** /]
[comment : Generate a authentication class helper for each defined token (oauth2, oidc). /]
[comment : ***************************************************************************** /]
[template public genRsOAuth2Resources (m : System)]
[for (c : Component | m.eAllContents(Component))][for (s : SecurityScheme | c.securitySchemes)]
[if s.isAuthOauth2() or s.isAuthOidc()][for (f : Flow | s.flows)]
[if not f.isAuthImplicit()]
[file (filename(getServerSourceDir(), m.buildPackageRsResources(false), s.buildRSO2AuthenticationResourceClassName(f) +'.java'), false, 'UTF-8')]
[s.rsAuthenticationResource(f)/][/file][/if][/for][/if][/for][/for]
[/template]

[comment : **********************************************************************************************/]
[comment : Generate a fragment for the web.xml file, contains the base URI to map for the REST services. /]
[comment : **********************************************************************************************/]
[template public genRsWebXmlServletMappingFragment (m : System)]
[file (filename(getServerResourcesDir(), 'META-INF', 'web-fragment.xml'), false, 'UTF-8')]
[m.rsWebFragment()/]
[/file]
[/template]

[comment : *******************************************************/]
[comment : Generate the technical resources for REST publication. /]
[comment : *******************************************************/]
[template public genRsTechnicalTokensResources (m : System)]
[file (filename(getServerSourceDir(),  m.buildPackageRsResources(false), buildRSTechnichalResourcesClassName() + '.java'), false, 'UTF-8')]
[m.rsTechnicalTokensResources()/]
[/file]
[/template]

[comment : ******************************************************/]
[comment : Generate the TokensConfigurator for REST publication. /]
[comment : ******************************************************/]
[template public genRsTokensConfigurator (m : System)]
[file (filename(getServerSourceDir(),  buildPackageRS(), buildRSTokensConfiguratorClassName() + '.java'), false, 'UTF-8')]
[m.rsTokensConfigurator()/]
[/file]
[/template]

[comment : ***************************************************************/]
[comment : Generation of resources for each service for REST publication. /]
[comment : ***************************************************************/]
[template public genRSResource(s : Service, d : DTO)]
[file (filename(getServerSourceDir(),  s.buildPackageRsResources(s.oclIsUndefined()), s.buildRSResourceClassName(d) + '.java'), false, 'UTF-8')]
[s.rsResource(d)/]
[/file]
[/template]

[comment : *****************************************************************************/]
[comment : Generation of resources for JUnit test of each service for REST publication. /]
[comment : *****************************************************************************/]
[template public genRSResourceTest(s : Service, d : DTO)]
[file (filename(getServerTestDir(),  s.buildPackageRsResources(false), s.buildRSResourceTestClassName(d) + '.java'), false, 'UTF-8')]
[s.rsResourceTest()/]
[/file]
[/template]