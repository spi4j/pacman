[module serviceGwtImpl('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::comments/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]

[comment encoding = UTF-8 /]
[comment le Service existe sans DTO /]
[template public serviceGwtImpl(s : soa::Service)]
  [s.serviceGwtImpl(s.dtoFromService(), true)/][/template]

[template public serviceGwtImpl(d : environment::DTO)]
  [d.serviceFromDto().serviceGwtImpl(d, false)/][/template]

[comment le Service et le DTO existent /]
[template public serviceGwtImpl(s : soa::Service, d : environment::DTO)]
  [s.serviceGwtImpl(d, false)/][/template]

[template public serviceGwtImpl(s : soa::Service, d : environment::DTO, serviceSeul : Boolean)]
  [s.licence()/]
  [let self = if not (s = null) then s else if not (d = null) then d else 'PACKAGE NOT FOUND FOR SERVICE AND DTO NULL' endif endif]
    package [s.buildPackageBusinessGwtServerServiceDto(d)/];
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [s.writeImports(d, serviceSeul)/]
      
    [/protected]
    
    
    /**
     * Interface de services appelables par le client.
     * @author [s.getAuthorName()/]
     */
    public class [s.buildServiceGwtImplementationName(d)/][if (not serviceSeul)] extends GwtRemoteServiceImpl<[s.genPkType()/], [d.buildXtoClassNameFromDto()/], [d.buildDtoClassName()/]>[else] extends SpiRemoteServiceImpl[/if]
     implements [s.buildServiceGwtInterfaceName(d)/]
    {
    
       private static final long serialVersionUID = 1L;
    
    [if (not serviceSeul)]
         @Override
         protected [d.buildMapperInterfaceName()/] getMapper ()
         {
            // Mapper
            [protected (s.getUserCodeId('Mapper')) startTagPrefix('// ') endTagPrefix('// ')]
                    // Le Mapper n'est peut-être pas dans [d.specificOrDefaultIdAppli().toUpperFirst()/], il est peut-être dans un autre domaine qui contient les XTO
                    return [s.buildAppliUserMapperGenClassName()/].[('get ' + d.buildMapperClassName()).apply_methodDefault()/]();
            [/protected]
      
         }
      
         @Override
         protected [s.buildServiceInterfaceName(d)/] getService ()
         {
            // Service
            [protected (s.getUserCodeId('Service')) startTagPrefix('// ') endTagPrefix('// ')]
                    return [s.buildAppliUserBusinessGenClassName()/].[('get ' + s.buildServiceName(d)).apply_methodDefault()/]();
            [/protected]
      
         }
    [else]
         /**
          * @return le service réel
          */
         protected [s.buildServiceInterfaceName(null)/] getService ()
         {
            return [s.buildAppliUserBusinessGenClassName()/].[('get ' + s.buildServiceName(null)).apply_methodDefault()/]();
         }
    [/if]
    
       @Override
       protected SerializationPolicy doGetSerializationPolicy (final HttpServletRequest request,
                final String moduleBaseURL, final String strongName)
       {
          // TODO Auto-generated method stub
          return super.doGetSerializationPolicy (request, getServletContext().getInitParameter("moduleBaseURL"), strongName);
       }
    
    [if (not serviceSeul)]
      [for (r : environment::Reference | d.referencingStar())]
           @Override
           public List<[d.buildXtoClassNameFromDto()/]> [('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/])
           {
              return getMapper().convertListDtoToListXto(
                       getService ().[('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/]([r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]));
           }
        
      [/for]
      [for (r : environment::Reference | d.referencesStarStar())]
           @Override
           public List<[r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto()/]> [('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [r.containingType.oclAsType(environment::DTO).nameParamId().apply_parameterMethodClassicIn()/])
           {
              return [r.buildAppliUserMapperGenClassName()/].[('get ' + r.referencedType.oclAsType(environment::DTO).buildMapperClassName()).apply_methodDefault()/] ().convertListDtoToListXto(
                       getService ().[('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/]([r.containingType.oclAsType(environment::DTO).nameParamId().apply_parameterMethodClassicIn()/]));
           }
        
      [/for]
    [/if]
    [if (s <> null and not (s.ownedInterface = null))]
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
           // [o.userCodeForOperation()/]
           [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
             
                @Override
                public [o.paramOutXto()/] [o.name.apply_methodDefault()/] ([o.paramsInXto()/])
                {
             [if (o.paramOutXto() <> 'void')]
                     return [if (o.output->first().type.oclIsTypeOf(environment::DTO))]
                              [let return : environment::DTO = o.output->first().type.oclAsType(environment::DTO)]
                                [o.buildAppliUserMapperGenClassName()/].[('get ' + return.buildMapperClassName()).apply_methodDefault()/] ().convert[if (o.output->first().isMultiple())]List[/if]
                                DtoTo[if (o.output->first().isMultiple())]List[/if]
                                Xto( [o.buildAppliUserBusinessGenClassName()/].get[s.nameService(null)/] ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp1 | temp1.parametersXtoFromDto())->sep(', ')/]));
                              [/let]
                            [else]
                              null; /* @TODO : vérifier Pb Type retour inconnu */
                            [/if]
             [else]
               	 getService ().[o.nameOperation()/] ([o.input->asSequence()->collect(temp2 | temp2.parametersXtoFromDto())->sep(', ')/]);
             [/if]
             
                }
             
           [/protected]
        
        
      [/for]
    [/if]
       // [s.nameServiceInterfaceGwt(d)/]
       [protected (s.getUserCodeId(s.nameServiceInterfaceGwt(d))) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[template private parametersInXto(p : soa::Parameter)]
        [p.name.apply_parameterMethodClassicIn()/][/template]

[comment : Write all required imports. (beware d is null not safe (legacy) ..???)/]
[template private writeImports(s : soa::Service, d : environment::DTO, serviceSeul : Boolean) post(self.trim())]
  [s.initImports()/]
  [s.addImport('jakarta.servlet.http.HttpServletRequest')/]
  [s.addImport('com.google.gwt.user.server.rpc.SerializationPolicy')/]
  [s.addImport(s.buildPackageBusiness() + '.' + s.buildAppliUserBusinessGenClassName())/]
  [s.addImport(s.buildPackageMapper() + '.' + s.buildAppliUserMapperGenClassName())/]
  [s.addImport(s.buildPackageBusinessGwtClientServiceDto(d) + '.' + s.buildServiceGwtInterfaceName(d))/]
  [s.addImport(s.buildPackageBusinessApiServiceDto(d) + '.' + s.buildServiceInterfaceName(d))/]
  [s.addImport('fr.spi4j.ui.gwt.server.SpiRemoteServiceImpl', serviceSeul)/]
  [s.addImport('fr.spi4j.ui.gwt.server.GwtRemoteServiceImpl', not serviceSeul)/]
  [s.addImport(d.buildPackageMapperDto() + '.' + d.buildMapperInterfaceName(), not serviceSeul)/]
  
  [if (d <> null)]
    	[s.addImport(d.buildImportXtoGwt())/]
    	[s.addImport(d.buildImportDto())/]
    [for (r : environment::Reference | d.referencesStarStar())]
      		[s.addImport(r.referencedType.oclAsType(environment::DTO).buildImportXtoGwt())/]
    [/for]
  [/if]
  
  [s.flushImports()/][/template]