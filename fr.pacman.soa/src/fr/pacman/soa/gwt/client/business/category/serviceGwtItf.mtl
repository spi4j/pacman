[comment encoding = UTF-8 /]
[module serviceGwtItf('http://www.obeonetwork.org/dsl/soa/4.0.0',
                      'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::attributes /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::comments /]
[import fr::pacman::commons::common::imports /]

[import fr::pacman::commons::soa::common::methods /]
[import fr::pacman::commons::soa::common::references /]
[import fr::pacman::commons::soa::common::names /]

[import fr::pacman::soa::common::outils /]
[import fr::pacman::soa::common::imports /]
[import fr::pacman::soa::common::packages /]
[import fr::pacman::soa::common::name /]
[import fr::pacman::commons::soa::common::comments /]
[import fr::pacman::soa::common::attributes /]
[import fr::pacman::soa::common::methodes /]
[import fr::pacman::soa::common::classes /]

[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::common::properties /]

[comment] le Service existe sans DTO [/comment]
[template public serviceGwtItf(s : Service)]
[serviceGwtItf(s, dtoFromService(s), true)/]
[/template]

[template public serviceGwtItf(d : DTO)]
[serviceGwtItf(serviceFromDto(d), d, false)/]
[/template]

[comment] le Service et le DTO existent [/comment]
[template public serviceGwtItf(s : Service, d : DTO)]
[serviceGwtItf(s, d, false)/]
[/template]

[template public serviceGwtItf(s : Service, d : DTO, serviceSeul : Boolean)]
[licence()/]
[let self : OclAny = if not s.oclIsUndefined() then s else if not d.oclIsUndefined() then d else 'PACKAGE NOT FOUND FOR SERVICE AND DTO NULL' endif endif]
package [buildPackageBusinessGwtClientServiceDto(s, d)/];
// [protected ('for imports')]

[comment : Write all required imports. /]
[s.writeImports(d, serviceSeul)/]

// [/protected]

/**
 * Interface de services appelables par le client.
 * @author [getAuthorName()/]
 */
@RemoteServiceRelativePath("../[getApplicationName()/]/[buildServiceName(s, d)/]")
public interface [buildServiceGwtInterfaceName(s, d)/][if (not serviceSeul)] extends GwtRemoteService<[genPkType()/], [buildXtoClassNameFromDto(d)/]>[else] extends RemoteService[/if]
{

[if not serviceSeul]
[for (r : Reference | d.referencingStar())]
   /**
    * Obtenir la liste d'objets de type '[nameClassDto(d)/]' associés à l'instance de type '[nameClassDto(r.containingType.oclAsType(DTO))/]'.
[getComParamInverseIdIn(r)/]
    * @return une liste de [buildXtoClassNameFromDto(d)/] ayant [apply_attributeDefault(nameBaseReferenceInverse(r))/][namePK_ID()/] = [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][namePK_ID()/]
    */
   List<[buildXtoClassNameFromDto(d)/]> [apply_methodDefault('find list ' + r.name + ' by ' + r.containingType.oclAsType(DTO).buildSimpleDtoName())/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameBaseReferenceInverse(r))/][namePK_ID()/]);

[/for]
[for (r : Reference | d.referencesStarStar())]
   /**
    * Obtenir la liste d'objets de type '[nameBaseDtoUP(r.referencedType.oclAsType(DTO))/]' associés à l'instance de type '[nameBaseDtoUP(r.containingType.oclAsType(DTO))/]'.
    * @param [apply_parameterMethodClassicIn(r.containingType.name)/][namePK_ID()/]
    *           (In)(*) [nameBaseDtoUP(r.containingType.oclAsType(DTO))/].
    * @return une liste de [buildXtoClassNameFromDto(r.referencedType.oclAsType(DTO))/]
    */
   List<[buildXtoClassNameFromDto(r.referencedType.oclAsType(DTO))/]> [apply_methodDefault('find list ' + r.name + ' by ' + r.containingType.oclAsType(DTO).buildSimpleDtoName())/] (final [genPkType()/] [apply_parameterMethodClassicIn(r.containingType.name)/][namePK_ID()/]);

[/for]
[/if]
[if s <> null and not s.ownedInterface.oclIsUndefined()]
[for (o : Operation | s.ownedInterface.ownedOperations)]
   [displayClearUserCodeId (userCodeForOperation(o))/]
   // [protected (o.getUserCodeId(userCodeForOperation(o)))]

   /**
    * [o.description/].
[getComParamsIn(o)/][comParamOut(o)/]    */
   [paramOutXto(o)/] [apply_methodDefault(o.name)/] ([paramsInXto(o)/]);

   // [/protected]

[/for]
[/if]
   [displayClearUserCodeId (nameServiceInterfaceGwt(s, d))/]
   // [protected (s.getUserCodeId(nameServiceInterfaceGwt(s, d)))]

   // [/protected]
}[/let]
[/template]

[comment : Write all required imports. /]
[template private writeImports (s : Service, d : DTO, serviceSeul : Boolean) post(trim())]
[s.initImports() /]
[s.addImport('com.google.gwt.user.client.rpc.RemoteServiceRelativePath')/]

[if not d.oclIsUndefined()]
	[s.addImport(d.buildImportXtoGwt())/]
  	[for (r : Reference | d.referencesStarStar())]
		[s.addImport(buildImportXtoGwt(r.referencedType.oclAsType(DTO)))/]
  	[/for]
[/if]

[if serviceSeul]
	[s.addImport('com.google.gwt.user.client.rpc.RemoteService')/]
[else]
	[s.addImport('fr.spi4j.ui.gwt.client.services.GwtRemoteService')/]
[/if]

[s.flushImports()/]
[/template]
