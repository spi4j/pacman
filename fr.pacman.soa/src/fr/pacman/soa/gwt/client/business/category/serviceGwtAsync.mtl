[module serviceGwtAsync('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::comments/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::soa::common::methods/]
[import fr::pacman::commons::soa::common::references/]
[import fr::pacman::commons::soa::common::names/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::commons::soa::common::comments/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::soa::common::methodes/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::common::properties/]

[comment encoding = UTF-8 /]
[comment le Service existe sans DTO /]
[template public serviceGwtAsync(s : soa::Service)]
  [s.serviceGwtAsync(s.dtoFromService(), true)/][/template]

[template public serviceGwtAsync(d : environment::DTO)]
  [d.serviceFromDto().serviceGwtAsync(d, false)/][/template]

[comment le Service et le DTO existent /]
[template public serviceGwtAsync(s : soa::Service, d : environment::DTO)]
  [s.serviceGwtAsync(d, false)/][/template]

[template public serviceGwtAsync(s : soa::Service, d : environment::DTO, serviceSeul : Boolean)]
  [s.licence()/]
  [let self = if not (s = null) then s else if not (d = null) then d else 'PACKAGE NOT FOUND FOR SERVICE AND DTO NULL' endif endif]
    package [s.buildPackageBusinessGwtClientServiceDto(d)/];
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [s.writeImports(d, serviceSeul)/]
      
    [/protected]
    
    
    /**
     * Interface de services appelables par le client.
     * @author [s.getAuthorName()/]
     */
    public interface [s.buildServiceGwtAsyncClassName(d)/][if (not serviceSeul)] extends GwtRemoteServiceAsync<[s.genPkType()/], [d.buildXtoClassNameFromDto()/]>[/if]
    
    {
    
    [if (not serviceSeul)]
      [for (r : environment::Reference | d.referencingStar())]
           /**
            * Obtenir la liste d'objets de type '[d.nameClassDto()/]' associés à l'instance de type '[r.containingType.oclAsType(environment::DTO).nameClassDto()/]'.
        [r.getComParamInverseIdIn()/]
            * @param callback
            *           le callback pour retourner une liste de [d.buildXtoClassNameFromDto()/] ayant [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]
            */
           void [('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/], final AsyncCallback<List<[d.buildXtoClassNameFromDto()/]>> callback);
        
      [/for]
      [for (r : environment::Reference | d.referencesStarStar())]
           /**
            * Obtenir la liste d'objets de type '[r.referencedType.oclAsType(environment::DTO).nameBaseDtoUP()/]' associés à l'instance de type '[r.containingType.oclAsType(environment::DTO).nameBaseDtoUP()/]'.
            * @param [r.containingType.name.apply_parameterMethodClassicIn()/][r.namePK_ID()/]
            *           (In)(*) [r.containingType.oclAsType(environment::DTO).nameBaseDtoUP()/].
            * @param callback
            *           le callback pour retourner une liste de [r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto()/]
            */
           void [('find list ' + r.name + ' by ' + r.containingType.oclAsType(environment::DTO).buildSimpleDtoName()).apply_methodDefault()/] (final [r.genPkType()/] [r.containingType.name.apply_parameterMethodClassicIn()/][r.namePK_ID()/], final AsyncCallback<List<[r.referencedType.oclAsType(environment::DTO).buildXtoClassNameFromDto()/]>> callback);
        
      [/for]
    [/if]
    [if (s <> null and not (s.ownedInterface = null))]
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
           // [o.userCodeForOperation()/]
           [protected (o.getUserCodeId(o.userCodeForOperation())) startTagPrefix('// ') endTagPrefix('// ')]
             
                /**
                 * [o.description/].
             [o.getComParamsIn()/][o.comParamOutCallback()/]    */
                void [o.name.apply_methodDefault()/] ([o.paramsInXto()/][if (not o.input->isEmpty())], [/if]
             final AsyncCallback<[if (o.output->isEmpty())]Void[else][o.paramOutXto()/][/if]
             > callback);
             
           [/protected]
        
        
      [/for]
    [/if]
       // [s.buildServiceGwtAsyncClassName(d)/]
       [protected (s.getUserCodeId(s.buildServiceGwtAsyncClassName(d))) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[comment : Write all required imports. /]
[template private writeImports(s : soa::Service, d : environment::DTO, serviceSeul : Boolean) post(self.trim())]
  [s.initImports()/]
  [s.addImport('com.google.gwt.user.client.rpc.AsyncCallback')/]
  
  [if (not (d = null))]
    	[s.addImport(d.buildImportXtoGwt())/]
    [for (r : environment::Reference | d.referencesStarStar())]
      		[s.addImport(r.referencedType.oclAsType(environment::DTO).buildImportXtoGwt())/]
    [/for]
  [/if]
  
  [if (not serviceSeul)]
    	[s.addImport('fr.spi4j.ui.gwt.client.services.GwtRemoteServiceAsync')/]
  [/if]
  [s.flushImports()/][/template]