[module gwtUserBusiness('http://www.obeonetwork.org/dsl/soa/4.0.0', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::soa::common::classes/]
[import fr::pacman::soa::common::outils/]
[import fr::pacman::soa::common::imports/]
[import fr::pacman::soa::common::packages/]
[import fr::pacman::soa::common::name/]
[import fr::pacman::soa::common::attributes/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::common::names/]

[comment encoding = UTF-8 /]
[template public gwtUserBusiness(n : environment::Namespace)]
  [n.licence()/]
  package [n.buildPackageBusinessGwtClient()/]; // NOPMD
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import java.util.HashMap;
    import java.util.Map;
    
    import com.google.gwt.core.shared.GWT;
    
    
    [for (srv : soa::Service | n.eAllContents(soa::Service))]
      [if (srv.serviceSeul())]
        [srv.buildImportServiceInterfaceGwt(null)/]
        [srv.buildImportServiceInterfaceGwtAsync(null)/]
      [/if]
    [/for]
    
    import fr.spi4j.ui.gwt.client.services.GwtUserBusiness_Abs;
    
  [/protected]
  
  
  /**
   * Classe permettant de centraliser les factories business de l'application.
   * @author [n.getAuthorName()/]
   */
  public class [n.buildGwtUserBusinessClassName()/] extends GwtUserBusiness_Abs
  {
  
     /** Singleton. */
     private static [n.buildGwtUserBusinessClassName()/] ['singleton'.apply_attributeStatic()/] = new [n.buildGwtUserBusinessClassName()/]();
  
     /**
      * Constructeur privé.
      */
     protected [n.buildGwtUserBusinessClassName()/] ()
     {
        super();
     }
  
  
  [for (srv : soa::Service | n.eAllContents(soa::Service))]
    [if (srv.serviceSeul())]
      
         /**
          * Obtenir la façade de services '[srv.buildServiceName(null)/]'.
          * @return L'instance désirée.
          */
         public static [srv.buildServiceGwtAsyncClassName(null)/] [('get ' + srv.buildServiceName(null)).apply_methodDefault()/] ()
         {
            return ([srv.buildServiceGwtAsyncClassName(null)/]) ['singleton'.apply_attributeStatic()/].getBinding([srv.buildServiceGwtInterfaceName(null)/].class);
         }
    [/if]
  [/for]
  
     /**
      * @return le singleton de cette factory
      */
     public static [n.buildGwtUserBusinessClassName()/] ['get singleton'.apply_methodDefault()/] ()
     {
        return ['singleton'.apply_attributeStatic()/];
     }
  
     // CHECKSTYLE:OFF
     @Override
     // CHECKSTYLE:ON
     public void initBindings ()
     {
  
  [for (srv : soa::Service | n.eAllContents(soa::Service))]
    [if (srv.serviceSeul())]
            bind([srv.buildServiceGwtInterfaceName(null)/].class, GWT.create([srv.buildServiceGwtInterfaceName(null)/].class));
    [/if]
  [/for]
     }
  
     // Methodes
     [protected (n.getUserCodeId('Methodes')) startTagPrefix('// ') endTagPrefix('// ')]
       
          /**
           * Affecte un singleton dans le cas des tests d'intégration, qui renverra directement l'instance du service (sans passer par GWT).
           * @param ['singleton'.apply_parameterMethodClassicIn()/]
           *           le singleton pour les tests d'intégration
           */
          public static void ['set singleton'.apply_methodDefault()/] (final [n.buildGwtUserBusinessClassName()/] ['singleton'.apply_parameterMethodClassicIn()/])
          {
             [n.buildGwtUserBusinessClassName()/].['singleton'.apply_attributeStatic()/] = ['singleton'.apply_parameterMethodClassicIn()/];
          }
       
     [/protected]
  
  
  }[/template]