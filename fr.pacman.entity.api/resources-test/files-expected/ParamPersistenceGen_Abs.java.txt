package fr.appwhite1.persistence;

import javax.transaction.UserTransaction;

import fr.appwhite1.ParamAppli;
import fr.spi4j.persistence.ParamPersistence_Abs;

/**
 * Classe abstraite permettant de centraliser le paramétrage de persistance de l'application.
 * @author Pacman
 */
public abstract class ParamPersistenceGen_Abs extends ParamPersistence_Abs implements ParamAppli
{

   /**
    * Constructeur.
    */
   protected ParamPersistenceGen_Abs ()
   {
      super(c_idAppli);
   }

   /**
    * Constructeur.
    * @param p_userTransaction
    *           User transaction qui pourrait être différente de NonXAGlobalUserTransaction (par exemple : UserTransactionImpl en mode XA)
    */
   protected ParamPersistenceGen_Abs (final UserTransaction p_userTransaction)
   {
      super(c_idAppli, p_userTransaction);
   }

   /** Initilisation du paramétrage de la persistance. */
   protected abstract void initElemParamPersistence ();

   /**
    * Effectue des actions après chargement de la configuration de persistance.
    */
   protected abstract void afterInit ();

   /**
    * Initialiser les instances du paramétrage de la couche persistance.
    */
   private static synchronized void initInstance ()
   {
      ParamPersistenceGen_Abs v_ParamPersistence = (ParamPersistenceGen_Abs) getParamPersistence(c_idAppli);
      // Si pas d'instance
      if (v_ParamPersistence == null)
      {
         // Instancier 'ParamPersistenceApp'
         v_ParamPersistence = new ParamPersistenceApp();
         // Mémoriser l'instance 'ParamPersistence'
         setParamPersistence(c_idAppli, v_ParamPersistence);

         // Instancier un 'UserPersistenceApp'
         final UserPersistenceApp v_UserPersistence = new UserPersistenceApp(v_ParamPersistence);
         // Mémoriser l'instance 'UserPersistence'
         setUserPersistence(c_idAppli, v_UserPersistence);

         // Initialiser les éléments du paramétrage
         v_ParamPersistence.initElemParamPersistence();
      }
   }

   /**
    * Permet d'obtenir le 'UserPersistence' de l'application.
    * @return Une instance de 'UserPersistenceGen_Abs'
    */
   public static UserPersistenceGen_Abs getUserPersistence ()
   {
      return UserPersistenceStaticHolder.c_userPersistence;
   }

   /**
    * Design pattern "Static Holder": Classe pour initialiser au besoin (c'est-à-dire à la première demande)<br/>
    * le userPersistence de l'application sans nécessiter d'ajouter "synchronized" sur la méthode static getUserPersistence().<br/>
    * Ajouter "synchronized" pourrait devenir une contention car la méthode est static et est appelée très souvent dans l'application.<br/>
    * Le Static Holder permet d'initialiser l'attribut en étant automatiquement synchronisé par l'initialisation de la classe dans le ClassLoader.<br/>
    */
   private static final class UserPersistenceStaticHolder
   {
      /** Le 'UserPersistence' de l'application. */
      private static final UserPersistenceGen_Abs c_userPersistence;

      static
      {
         // Initialiser la couche de persistance
         initInstance();
         // Obtenir le 'UserPersistence' de l'application
         c_userPersistence = (UserPersistenceGen_Abs) getUserPersistence(c_idAppli);
         // finalise l'initialisation du ParamPersistence
         ((ParamPersistenceGen_Abs) getParamPersistence(c_idAppli)).afterInit();
      }

      /**
       * Constructeur.
       */
      private UserPersistenceStaticHolder ()
      {
         super();
      }
   }

}
