[module xtoTest('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::entity::api::common::xtoutils/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public xtoTest(e : entity::Entity)]
  [e.licence()/]
  package [e.buildPackageWsApiEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.writeImports()/]
    
  [/protected]
  
  
  /**
   * Classe de test pour le XTO '[e.nameClassXto()/]'.
   * @author [e.getAuthorName()/]
   */
  // Annotation for class
  [protected (e.getUserCodeId('Annotation for class')) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  
  public class [e.buildXtoTestClassName()/] extends [e.getClassNameForBeanTester_Abs()/]
  {
  
     /**
      * Test des attributs.
      */
  [if (not e.referencesStar()->isEmpty())]
       @SuppressWarnings("unchecked")
  [/if]
     @Test
     public void ['test xto'.apply_methodDefault()/] ()
     {
        // instanciation du xto
        final [e.buildXtoClassNameFromEntity()/] ['xto'.apply_variableDefault()/] = new [e.buildXtoClassNameFromEntity()/]();
  
        // génération des champs
        final [e.genPkType()/] [e.nameENUM_PK_ID().apply_variableDefault()/] = getRandom[e.genPkType()/]();
  [for (a : environment::Attribute | e.attributes())]
          final [if (a.type.oclIsTypeOf(environment::Enumeration))] String[else][a.genPropertyType()/][/if]
     [a.name.normalize().apply_variableDefault()/] = [if (a.type.oclIsTypeOf(environment::Enumeration))] "[a.type.oclAsType(environment::Enumeration).literals->first().name.toUpper()/]" [else]
                                                                                                                                                                                            getRandom[a.genPropertyTypeNoGenerics()/]([if (a.hasSize())][a.metadatas.size()/][/if]
                                                                                                                                                                                            )[/if]
    ;
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
    
          final [r.genPkType()/] [r.name.toLowerFirst().apply_variableDefault()/] = getRandom[r.genPkType()/]();
    
    //      final [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/] [r.name.toLowerFirst().apply_variableDefault()/] = new [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]();
    
  [/for]
  [for (r : environment::Reference | e.referencingStar())]
          final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_variableDefault()/] = getRandom[r.genPkType()/]();
  [/for]
  
        // remplissage du Xto
        ['xto'.apply_variableDefault()/].setId([e.nameENUM_PK_ID().apply_variableDefault()/]);
  [for (a : environment::Attribute | e.attributes())]
    [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]
            ['xto'.apply_variableDefault()/].setIdentifiant([a.name.normalize().apply_variableDefault()/]);
    [else]
            ['xto'.apply_variableDefault()/].[a.name.normalize().apply_methodSet()/]([a.name.normalize().apply_variableDefault()/]);
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
          ['xto'.apply_variableDefault()/].[r.name.toLowerFirst().apply_methodSet()/][r.namePK_ID()/]([r.name.toLowerFirst().apply_variableDefault()/]);
          //['xto'.apply_variableDefault()/].[r.name.toLowerFirst().apply_methodSet()/]([r.name.toLowerFirst().apply_variableDefault()/]);
  [/for]
  [for (r : environment::Reference | e.referencingStar())]
          ['xto'.apply_variableDefault()/].[r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/]([r.nameBaseReferenceInverse().apply_variableDefault()/]);
  [/for]
  
        // test des valeurs
        assertEquals([e.nameENUM_PK_ID().apply_variableDefault()/], ['xto'.apply_variableDefault()/].getId(), "Champ id incorrect");
  [for (a : environment::Attribute | e.attributes())]
    [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]
            assertEquals([a.name.normalize().apply_variableDefault()/], ['xto'.apply_variableDefault()/].getIdentifiant(), "Champ [a.nameBaseAttribute()/] incorrect");
    [else]
            assertEquals([a.name.normalize().apply_variableDefault()/], ['xto'.apply_variableDefault()/].[a.name.normalize().apply_methodGet()/](), "Champ [a.nameBaseAttribute()/] incorrect");
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
    
          assertEquals([r.name.toLowerFirst().apply_variableDefault()/], ['xto'.apply_variableDefault()/].[r.name.toLowerFirst().apply_methodGet()/][r.namePK_ID()/](), "Champ [r.nameSimpleProperty()/] incorrect");
      	//assertEquals([r.name.toLowerFirst().apply_variableDefault()/], ['xto'.apply_variableDefault()/].[r.name.toLowerFirst().apply_methodGet()/](), "Champ [r.nameSimpleProperty()/] incorrect");
  [/for]
  [for (r : environment::Reference | e.referencingStar())]
    [if (not (r.referencedType = null))]
            assertEquals([r.nameBaseReferenceInverse().apply_variableDefault()/], ['xto'.apply_variableDefault()/].[r.nameBaseReferenceInverse().apply_methodGet()/][r.namePK_ID()/](), "Champ [r.nameSimpleProperty()/] incorrect");
    [/if]
  [/for]
  
        // appel du toString
        assertNotNull(['xto'.apply_variableDefault()/].toString(), "toString incorrect");
  
        // déréférencement
  [for (r : environment::Reference | e.referencesStarNoStar())]
    [if (not (r.referencedType = null))]
            ['xto'.apply_variableDefault()/].[r.getNameSetterListEntity()/] (Collections.EMPTY_LIST);
            assertNotNull(['xto'.apply_variableDefault()/].[r.getNameGetterListEntity()/] (), "Champ [r.name.normalize().apply_attributeMultiple()/] incorrect");
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesStarStar())]
    [if (not (r.referencedType = null))]
            ['xto'.apply_variableDefault()/]. [r.getNameSetterListEntity()/](Collections.EMPTY_LIST);
            assertNotNull(['xto'.apply_variableDefault()/].[r.getNameGetterListEntity()/] (), "Champ [r.name.normalize().apply_attributeMultiple()/] incorrect");
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
          ['xto'.apply_variableDefault()/].[r.name.normalize().apply_methodSet()/][r.namePK_ID()/] (null);
          assertNull(['xto'.apply_variableDefault()/].[r.name.normalize().apply_methodGet()/][r.namePK_ID()/] (), "Champ [r.name.normalize()/][r.namePK_ID()/] incorrect");
  [/for]
  
  [for (r : environment::Reference | e.referencingStar())]
    [if (not (r.referencedType = null))]
      	['xto'.apply_variableDefault()/].[r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/] (null);
          assertNull(['xto'.apply_variableDefault()/].[r.nameBaseReferenceInverse().apply_methodGet()/][r.namePK_ID()/] (), "Champ [r.nameBaseReferenceInverse()/][r.namePK_ID()/] incorrect");
    [/if]
  [/for]
     }
  
  [for (a : environment::Attribute | e.attributes())]
    [if (not a.type.name.isStandardType() and not a.type.oclIsKindOf(environment::Enumeration))]
      	/**
          * getRandom[a.genPropertyTypeNoGenerics()/]
          */
         private [a.type.name.toUpperFirst()/] getRandom[a.genPropertyTypeNoGenerics()/] ()
         {
      	  // getRandom_[a.type.name.toUpperFirst()/]
      	  [protected (a.getUserCodeId('getRandom_' + a.type.name.toUpperFirst())) startTagPrefix('// ') endTagPrefix('// ')]
           
           		return [if (a.type.name <> null and a.type.name.contains('<'))]null[else]new [a.type.name.toUpperFirst()/] ()[/if]
           ;
           
         [/protected]
      
      
         }
    [/if]
  [/for]
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport('java.util.Collections')/]
  [e.addImport('org.junit.jupiter.api.Test')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertNotNull')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertNull')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertEquals')/]
  [e.addImport(e.getImportForBeanTester_Abs())/]
  [e.flushImports()/][/template]