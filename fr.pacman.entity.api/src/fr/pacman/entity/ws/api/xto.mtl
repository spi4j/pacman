[module xto('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::xtoutils/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public xto(e : entity::Entity)]
  [e.licence()/]
  package [e.buildPackageWsApiEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.writeImports()/]
    
  [/protected]
  
  
  /**
   * Implémentation XTO pour le type '[e.buildEntityImplClassName()/]'.
   * @author [e.getAuthorName()/]
   */
  @XmlRootElement(name = "[e.buildXtoClassNameFromEntity()/]", namespace = "http://[e.getNamespaceXto()/]/xto")
  @XmlAccessorType(XmlAccessType.FIELD)
  public class [e.buildXtoClassNameFromEntity()/] implements Serializable, [e.getClassNameForXto_Itf()/]<[e.genPkType()/]>, RsXto_Itf[if (e.entityIsUser())], User_Itf[/if]
  {
  
     private static final long serialVersionUID = 1L;
  
     // ATTRIBUTS
  
   /** L'identifiant. */
     @XmlElement(namespace = "", name = "[e.nameENUM_PK_ID()/]")
     @JsonProperty("[e.nameENUM_PK_ID()/]")
     private [e.genPkType()/] [e.nameENUM_PK_ID().apply_attributeDefault()/];
  
  
  [for (a : environment::Attribute | e.attributes())]
       /** [a.description/]. */
       @XmlElement(namespace = "", name = "[a.nameBaseAttribute()/]")
       @JsonProperty("[a.nameBaseAttribute()/]")
    [if (a.type.oclIsTypeOf(environment::Enumeration))]
         private String  [a.nameSimpleProperty().apply_attributeDefault()/]; 
    [else]
         [a.getProperty()/];
    [/if]
    
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
    
       /** La FK sur le Type '[r.nameClassXto()/]'. */
       @XmlElement(namespace = "", name = "[r.nameBaseReference()/][r.namePK_ID()/]")
       @JsonProperty("[r.nameBaseReference()/][r.namePK_ID()/]")
       [r.getXtoReferenceId()/]
    [if (not (r.referencedType = null))]
      
         /** L'instance de '[r.referencedType.oclAsType(entity::Entity).genTypeName()/]' associee a  l'instance de '[e.nameClassXto()/]' courante. */
         @XmlElement(namespace = "", name = "[r.nameBaseReference()/]")
         @JsonProperty("[r.nameBaseReference()/]")
         [r.getXtoReference()/]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesStarStar())]
    [if (not (r.referencedType = null))]
         /** La liste de type '[r.nameClassXto()/]' associee a  l'instance de '[e.nameClassXto()/]' courante. */
         @XmlElement(namespace = "", name = "[r.name.normalize().apply_attributeMultiple()/]")
         @JsonProperty("[r.name.normalize().apply_attributeMultiple()/]")
         [r.getRefListeXto()/]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesStarNoStar())]
    [if (not (r.referencedType = null))]
         /** La liste de type '[r.nameClassXto()/]' associee a  l'instance de '[e.nameClassXto()/]' courante. */
         @XmlElement(namespace = "", name = "[r.name.normalize().apply_attributeMultiple()/]")
         @JsonProperty("[r.name.normalize().apply_attributeMultiple()/]")
         [r.getRefListeXto()/]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStar())]
       /** La FK sur le type '[r.containingType.oclAsType(entity::Entity).nameBaseXtoUP()/]'. */
       @XmlElement(namespace = "", name = "[r.nameBaseReferenceInverse()/][r.namePK_ID()/]")
       @JsonProperty("[r.nameBaseReferenceInverse()/][r.namePK_ID()/]")
       [r.getXtoReferenceInverseId()/]
    
  [/for]
  [if (e.hasVersion())]
       /** La valeur de la version. */
       @SuppressWarnings("all")
       @XmlTransient
       private Serializable _versionValue;
  [/if]
     // METHODES
  
     @Override
     public [e.genPkType()/] getId ()
     {
        return [e.nameENUM_PK_ID().apply_attributeDefault()/];
     }
  
     @Override
     public void setId (final [e.genPkType()/] [e.nameENUM_PK_ID().apply_parameterMethodClassicIn()/])
     {
        [e.getAffectationPrefix()/][e.nameENUM_PK_ID().apply_attributeDefault()/] = [e.nameENUM_PK_ID().apply_parameterMethodClassicIn()/];
     }
  
  [for (a : environment::Attribute | e.attributes())]
       /**
    [a.comPrefix('Obtenir')/]
    [a.comReturn()/]
        */
    [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]
         @Override
         public String getIdentifiant ()
    [else]
      [if (a.type.oclIsTypeOf(environment::Enumeration))]
           [a.gen_getterEnum()/]
      [else]
           [a.gen_getter()/]
      [/if]
    [/if]
       {
          return [a.name.normalize().apply_attributeDefault()/];
       }
    
        /**
    [a.comPrefix('Affecter')/]
    [a.getComParamIn()/]
        */    
    [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]
         public void setIdentifiant (final [a.genPropertyType()/] [a.name.normalize().apply_parameterMethodClassicIn()/])
    [else]
      [if (a.type.oclIsTypeOf(environment::Enumeration))]
        [a.gen_setterEnum()/]
      [else]
           [a.gen_setter()/]
      [/if]
    [/if]
       {
          [a.getAffectationPrefix()/][a.name.normalize().apply_attributeDefault()/] = [a.name.normalize().apply_parameterMethodClassicIn()/];
       }
    
  [/for]
  [for (r : environment::Reference | e.referencesNoStar())]
    [if (not (r.referencedType = null))]
      
         /**
      [r.comPrefix('Obtenir')/]
      [r.comReturn()/]
          */
      
         [r.getGetterIdEntity()/]
         {
            if ([r.name.normalize().apply_attributeDefault()/] != null)
            {
               [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.normalize().apply_attributeDefault()/].getId();
            }
            return [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/];		
         }
      
         /**
      [r.comPrefix('Affecter')/]
      [r.getComParamIdIn()/]
          */
         [r.getSetterIdEntity()/]
         {
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] = [r.name.normalize().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/] = null;
         }
      
         /**
          * Obtenir l'instance de '[r.nameClassXto()/]' associee a  l'instance de '[e.nameClassXto()/]' courante.
          * @return L'instance desiree.
          */
         [r.getGetterXto()/]
         {
            return [r.name.normalize().apply_attributeDefault()/];
         }
      
         /**
          * Affecter [r.nameBaseReference()/] de [e.nameBaseXto()/].
      [r.getComParamIn()/]
          */
         [r.getSetterXtoReference()/]
         {
      
            if ([r.referencedType.name.normalize().apply_parameterMethodClassicIn()/] == null)
            {
               [r.name.normalize().apply_methodSet()/][r.namePK_ID()/](null);
            }
            else
            {
               [r.name.normalize().apply_methodSet()/][r.namePK_ID()/]([r.referencedType.name.normalize().apply_parameterMethodClassicIn()/].getId());
            }
      
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeDefault()/] = [r.referencedType.name.normalize().apply_parameterMethodClassicIn()/];
         }
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesStarStar())]
    [if (not (r.referencedType = null))]
         /**
          * Obtenir la liste de type '[r.nameClassXto()/]' associee à  l'instance de '[e.nameClassXto()/]' courante.
          * @return La liste desiree.
          */
         [r.getGetterListXto()/]
         {
            return [r.name.normalize().apply_attributeMultiple()/];
         }
      
         /**
          * Affecter les [r.nameClassXto()/] de [e.nameBaseXto()/].
      [r.getComParamTabIn()/]
          */
         [r.getSetterListXto()/]
         {
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
         }
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesStarNoStar())]
    [if (not (r.referencedType = null))]
         /**
          * Obtenir la liste de type '[r.nameClassXto()/]' associee à  l'instance de '[e.nameClassXto()/]' courante.
          * @return La liste desiree.
          */
         [r.getGetterListXto()/]
         {
            return [r.name.normalize().apply_attributeMultiple()/];
         }
      
         /**
          * Affecter les [r.nameClassXto()/] de [e.nameBaseXto()/].
      [r.getComParamTabIn()/]
          */
         [r.getSetterListXto()/]
         {
            [r.getAffectationPrefix()/][r.name.normalize().apply_attributeMultiple()/] = [r.referencedType.name.normalize().apply_parameterMethodMultiple()/];
         }
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStar())]
    [if (not (r.referencedType = null))]
      
         /**
          * Obtenir [r.nameBaseReferenceInverse()/] de [e.nameBaseXto()/].
      [r.comReturnInverse()/]
          */
         [r.getGetterInverseIdEntity()/]
         {
            return [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];
         }
      
         /**
          * Affecter [r.nameBaseReferenceInverse()/] de [e.nameBaseXto()/].
      		[r.getComParamInverseIdIn()/]
          */
         [r.getSetterInverseIdEntity()/]
         {
            [r.getAffectationPrefix()/][r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/];
         }
    [/if]
  [/for]
  
     @Override
     public String toString ()
     {
        // toString
        [protected (e.getUserCodeId('toString')) startTagPrefix('// ') endTagPrefix('// ')]
          
                return [e.toString()/]
          
        [/protected]
  
     }
  }[/template]

[template public toString(e : entity::Entity)]
  getClass().getName() + '['['/]' + getId ()  [e.endToString()/]+ ']';[/template]

[template public endToString(e : entity::Entity)]
  [for (a : environment::Attribute | e.attributes())]+ ", " + [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')] getIdentifiant() [else][a.name.normalize().apply_methodGet()/]()[/if]  [/for][for (r : environment::Reference | e.referencesNoStar())]+ ", " + [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/] [/for][/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport('java.io.Serializable')/]
  [e.addImport('jakarta.xml.bind.annotation.XmlAccessType')/]
  [e.addImport('jakarta.xml.bind.annotation.XmlAccessorType')/]
  [e.addImport('jakarta.xml.bind.annotation.XmlElement')/]
  [e.addImport('jakarta.xml.bind.annotation.XmlRootElement')/]
  [e.addImport('com.fasterxml.jackson.annotation.JsonProperty')/]
  [e.addImport('jakarta.xml.bind.annotation.XmlTransient', e.hasVersion())/]
  [e.addImport('fr.spi4j.lib.security.User_Itf', e.useSpi4jSecurity() and not e.useMatching() and e.entityIsUser())/]
  [e.addImport(e.getImportForXto_Itf())/]
  [e.addImport(e.getImportForRsXto_Itf())/]
  
  [for (r : environment::Reference | e.referencesNoStar())]
    [e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackageWsApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity())/]
  [/for]
  
  [for (r : environment::Reference | e.referencesStarStar())]
    [e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackageWsApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity())/]
  [/for]
  
  [for (r : environment::Reference | e.referencingStar())]
    [e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackageWsApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity())/]
  [/for]
  
  [e.flushImports()/][/template]
