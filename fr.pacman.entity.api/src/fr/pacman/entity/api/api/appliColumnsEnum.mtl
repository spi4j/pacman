[module appliColumnsEnum('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::convention::rule::commonRule/]

[comment encoding = UTF-8 /]
[template public enumStruct(void : ecore::EObject, columnProp : String)]
  [if (columnProp.hasToWriteColumn())]
       /** [void.get_nameEnumField(columnProp)/] */
       [void.get_nameEnumField(columnProp)/]("[void.get_nameEnumField(columnProp)/]", "[void.get_nameColumn(columnProp)/]", [void.get_typeColumn(columnProp)/].class, [void.columnNotNull(columnProp).toString()/], [if (void.columnHasSize(columnProp))][void.get_sizeColumn(columnProp)/][else]-1[/if], false)[/if][/template]

[template public appliColumnsEnum(r : entity::Root)]
  [r.licence()/]
  package [r.buildPackagePersistenceApi()/];
  
  [r.writeImports()/]
  
  /**
   * L'enumeration definissant les attributs additionels
   * @author [r.getAuthorName()/]
   */
  public enum [r.buildAppliColumnClassName()/] implements [r.getClassNameForColumnsNames_Itf()/]
  {
  [for (prop : String | r.get_automaticColumnsProperties())]
    [if (r.get_automaticColumnsProperties()->last().equalsIgnoreCase(prop))]
      [r.enumStruct(prop)/];
    [else]
      [r.enumStruct(prop)/],
    [/if]
  [/for]
  
     /**
      * Le nom physique de la table.
      */
     public static final String ['table name'.apply_attributeFinalStatic()/] = "";
  
     /** Le nom logique de la colonne. */
     private final String ['logical column name'.apply_attributeFinal()/];
  
     /** Le nom physique de la colonne. */
     private final String ['physical column name'.apply_attributeFinal()/];
  
     /** Le type associe a la colonne. */
     private final Class<?> ['type column'.apply_attributeFinal()/];
  
     /** Est-ce que la saisie de la valeur est obligatoire pour cette colonne ? */
     private final boolean ['mandatory'.apply_attributeFinal()/];
  
     /** La taille de la colonne. */
     private final int ['size'.apply_attributeFinal()/];
  
     /** Est-ce que la colonne est la cle primaire ? */
     private final boolean ['id'.apply_attributeFinal()/];
  
     /**
      * Constructeur permettant de spécifier le type de la colonne.
      * @param ['logical column name'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Le nom logique de la colonne.
      * @param ['physical column name'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Le nom physique de la colonne.
      * @param ['class type'.apply_parameterMethodObjectIn()/]
      *           (In)(*) Le type de la colonne.
      * @param ['mandatory'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Est-ce que la saisie de la valeur est obligatoire pour cette colonne?
      * @param ['size'.apply_parameterMethodClassicIn()/]
      *           (In)(*) La taille de la colonne
      * @param ['id'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Est-ce que la colonne est la clé primaire?
      */
     private [r.buildAppliColumnClassName()/] (final String ['logical column name'.apply_parameterMethodClassicIn()/], final String ['physical column name'.apply_parameterMethodClassicIn()/],
              final Class<?> ['class type'.apply_parameterMethodObjectIn()/], final boolean ['mandatory'.apply_parameterMethodClassicIn()/], final int ['size'.apply_parameterMethodClassicIn()/], final boolean ['id'.apply_parameterMethodClassicIn()/])
     {
        [r.getAffectationPrefix()/]['logical column name'.apply_attributeFinal()/] = ['logical column name'.apply_parameterMethodClassicIn()/];
        [r.getAffectationPrefix()/]['physical column name'.apply_attributeFinal()/] = ['physical column name'.apply_parameterMethodClassicIn()/];
        [r.getAffectationPrefix()/]['type column'.apply_attributeFinal()/] = ['class type'.apply_parameterMethodObjectIn()/];
        [r.getAffectationPrefix()/]['mandatory'.apply_attributeFinal()/] = ['mandatory'.apply_parameterMethodClassicIn()/];
        [r.getAffectationPrefix()/]['size'.apply_attributeFinal()/] = ['size'.apply_parameterMethodClassicIn()/];
        [r.getAffectationPrefix()/]['id'.apply_attributeFinal()/] = ['id'.apply_parameterMethodClassicIn()/];
     }
  
     @Override
     public String getLogicalColumnName ()
     {
        return ['logical column name'.apply_attributeFinal()/];
     }
  
     @Override
     public String getPhysicalColumnName ()
     {
        return ['physical column name'.apply_attributeFinal()/];
     }
  
     @Override
     public boolean isMandatory ()
     {
        return ['mandatory'.apply_attributeFinal()/];
     }
  
     @Override
     public int getSize ()
     {
        return ['size'.apply_attributeFinal()/];
     }
  
     @Override
     public boolean isId ()
     {
        return ['id'.apply_attributeFinal()/];
     }
  
     @Override
     public Class<?> getTypeColumn ()
     {
        return ['type column'.apply_attributeFinal()/];
     }
  
     @Override
     public String toString ()
     {
        return ['physical column name'.apply_attributeFinal()/];
     }
  
     @Override
     public String getTableName ()
     {
        return ['table name'.apply_attributeFinalStatic()/];
     }
  
     @Override
     public String getCompletePhysicalName ()
     {
        return getTableName() + '.' + getPhysicalColumnName();
     }
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(r : entity::Root) post(self.trim())]
  [r.initImports()/]
  [r.addImport('fr.spi4j.type.XtopSup')/]
  [r.addImport(r.getImportForColumnsNames_Itf())/]
  [r.flushImports()/][/template]
