[comment encoding = UTF-8 /]
[module entityItf('http://www.obeonetwork.org/dsl/entity/3.0.0','http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::attributes /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::imports /]
[import fr::pacman::commons::common::utils /]

[import fr::pacman::commons::types::packages /]
[import fr::pacman::commons::types::names /]
[import fr::pacman::commons::services::SecurityUtils /] 

[import fr::pacman::entity::api::common::packages /]
[import fr::pacman::entity::api::common::names /]
[import fr::pacman::entity::api::common::attributes /]
[import fr::pacman::entity::api::common::methodes /]
[import fr::pacman::entity::api::common::commentaires /]
[import fr::pacman::entity::api::common::serviceutils /]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::buildClassesEntityApi /]

[import fr::pacman::commons::convention::project::surcouche /]
[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]


[template public entityItf(e : Entity)]
[licence()/]
package [buildPackagePersistenceApiEntity(e)/];
// [protected ('for imports')]

[comment : Write all required imports. /]
[e.writeImports()/]

// [/protected]

[comClass(roleEntityItf())/]
public interface [buildEntityInterfaceName(e)/] extends [if hasAutomaticColumns()][buildAppliEntityInterfaceName()/]<[genPkType()/]>[if (useSpi4jSecurity() and not useMatching() and entityIsUser(e))], User_Itf[/if][else][getClassNameForEntity_Itf()/]<[genPkType()/]>[if (useSpi4jSecurity() and not useMatching() and entityIsUser(e))], User_Itf[/if][/if]
{
   // CONSTANTES

   [displayClearUserCodeId ('Constantes ' + buildEntityInterfaceName(e))/]
   // [protected (e.getUserCodeId('Constantes ' + buildEntityInterfaceName(e)))]

   // [/protected]

   // METHODES ABSTRAITES

[for (a : Attribute | e.attributesIncludingComputedNoPk())]
   /**
[comPrefix(a, 'Obtenir')/]
[comReturn(a)/]
    */
  [if (useSpi4jSecurity() and not useMatching() and (entityIsUser(e) and a.name = 'identifiant'))]
   String getIdentifiant ();
[else]
   [gen_getterInterface(a)/]
[/if]

[if (not a.isComputed() or useMatching())]
   /**
[comPrefix(a, 'Affecter')/]
[get_comParamIn(a)/]
    */
[if (useSpi4jSecurity() and not useMatching() and entityIsUser(e) and a.name = 'identifiant')]
   void setIdentifiant (final String [apply_parameterMethodClassicIn('identifiant')/]);
[else]
   [gen_setterInterface(a)/]
[/if]
[/if]

[/for]
[for (a : Attribute | e.getInheritDtoAttributes())]
   /**
[comPrefix(a, 'Obtenir')/]
[comReturn(a)/]
    */
  [if (useSpi4jSecurity() and not useMatching() and (entityIsUser(e) and a.name = 'identifiant'))]
   String getIdentifiant ();
[else]
   [gen_getterInterface(a)/]
[/if]

[if (not a.isComputed() or useMatching())]
   /**
[comPrefix(a, 'Affecter')/]
[get_comParamIn(a)/]
    */
[if (useSpi4jSecurity() and not useMatching() and entityIsUser(e) and a.name = 'identifiant')]
   void setIdentifiant (final String [apply_parameterMethodClassicIn('identifiant')/]);
[else]
   [gen_setterInterface(a)/]
[/if]
[/if]

[/for]
[for (r : Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(name.toLower()))]
[if r.containingType.oclAsType(entity::Entity) = e]
   /**
[comPrefix(r, 'Obtenir')/]
[comReturn(r)/]
    */
   [gen_getterInterface(r)/]

[if (not r.isComputed() or useMatching())]
   /**
[comPrefix(r, 'Affecter')/]
[get_comParamIn(r)/]
    */
   [gen_setterInterface(r)/]
[/if]
[/if]

[/for]
[for (r : Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(name.toLower()))]
[if r.oppositeOf.oclIsUndefined()]
   /**
[comPrefixInverse(r, 'Obtenir')/]
[comReturnInverse(r)/]
    */
   [gen_getterInverseInterface(r,i)/]

[if (not r.isComputed() or useMatching())]
   /**
[comPrefixInverse(r, 'Affecter')/]
[get_comParamInverseIn(r)/]
    */
   [gen_setterInverseInterface(r)/]

[/if]
[/if]

[/for]
[if (not useMatching())]
[for (r : Reference | e.referencesStarStar())]
   /**
    * Obtenir la liste de [r.referencedType.oclAsType(Entity).buildEntityInterfaceName()/] pour la relation [r.name.normalize()/]
    * @return [r.name.normalize()/]
    */
   [r.getGetterListEntity()/];

   /**
    * Affecter la liste de [r.referencedType.oclAsType(Entity).buildEntityInterfaceName()/] pour la relation [r.name.normalize()/]
    * @param [apply_parameterMethodMultiple(r.referencedType.oclAsType(Entity).name.normalize())/]
    */
   [r.getSetterListEntity()/];

[/for]
[/if]

   [displayClearUserCodeId ('Methodes ' + buildEntityInterfaceName(e))/]
   // [protected (e.getUserCodeId('Methodes ' + buildEntityInterfaceName(e)))]

   // [/protected]

}
[/template]

[comment : Write all required imports. /]
[template private writeImports (e : Entity) post(trim())]
[e.initImports()/]
[e.addImport('java.util.List', not useMatching())/]
[e.addImport(buildPackagePersistenceApi() + '.' + buildAppliEntityInterfaceName(), e.hasAutomaticColumns())/]
[e.addImport('fr.spi4j.lib.security.User_Itf', useSpi4jSecurity() and entityIsUser(e) and not useMatching())/]
[e.addImport(getImportForEntity_Itf(), not e.hasAutomaticColumns())/]

[comment : List enumerations. /]
[for (enum: Enumeration | e.getRoot().eAllContents(Enumeration))]
	[e.addImport(buildPackageEnum(enum) + '.' + enum.buildEnumName())/]
[/for]

[e.flushImports()/]
[/template]

[query public roleEntityItf(e : Entity) : String = 'L\'interface d√©finissant le contrat de persistance pour le type ' + nameSimpleEntity(e) /]
