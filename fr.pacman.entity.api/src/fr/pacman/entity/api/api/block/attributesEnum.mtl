[module attributesEnum('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::types::packages/]
[import fr::pacman::commons::types::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::convention::rule::commonRule/]

[comment encoding = UTF-8 /]
[template public enumStruct(p : environment::Property, e : entity::Entity)]
  XXX attributesEnum.enumStruct(p : Property) SHOULDN'T BE CALLED XXX[/template]

[template public enumStruct(a : environment::Attribute, e : entity::Entity)]
     /** [a.nameBaseAttribute()/]. */
     [a.name.normalize().apply_attributeEnum()/]("[a.name.normalize().apply_attributeEnum()/]", "[a.description.escape()/]", [a.type.genTypeNameWithPreCheck()/].class, [a.mandatory()/], [if (a.metadatas.hasSize())][a.metadatas.size()/][else]-1[/if])[/template]

[template public enumStruct(r : environment::Reference, e : entity::Entity)]
  [if (e.isReferenceNoStar(r))]
    [if (not r.isComputed())]
         [r.enumStructId()/],
    [/if]
       [r.enumStructReference()/][elseif (e.isReferenceStar(r))]   [r.enumStructTab()/][elseif (e.isReferencingStar(r))]   [r.enumStructInverseId()/][/if]
[/template]

[template public enumStructId(r : environment::Reference)]
  /** [r.nameBaseReference()/][r.namePK_ID()/]. */
  [r.nameBaseReference()/][r.namePK_ID()/]("[r.nameBaseReference()/][r.namePK_ID()/]", "[r.description.escape()/]", [r.genPkType()/].class, [r.mandatory()/], [if (r.metadatas.hasSize())][r.metadatas.size()/][else]-1[/if])[/template]

[template public enumStructReference(r : environment::Reference)]
  /** [r.nameBaseReference()/]. */
  [r.nameBaseReference()/]("[r.nameBaseReference()/]", "[r.description.escape()/]", [r.referencedType.oclAsType(entity::Entity).buildEntityName()/].class, [r.mandatory()/], [if (r.metadatas.hasSize())][r.metadatas.size()/][else]-1[/if])[/template]

[template public enumStructTab(r : environment::Reference)]
  /** [r.nameBaseReferenceTab()/]. */
  [r.nameBaseReferenceTab()/]("[r.nameBaseReferenceTab()/]", "[r.description.escape()/]", List.class, false, [if (r.metadatas.hasSize())][r.metadatas.size()/][else]-1[/if])[/template]

[template public enumStructInverseId(r : environment::Reference)]
  /** [r.nameBaseReferenceInverse()/][r.namePK_ID()/]. */
  [r.nameBaseReferenceInverse()/][r.namePK_ID()/]("[r.nameBaseReferenceInverse()/][r.namePK_ID()/]", "[r.description.escape()/]", [r.genPkType()/].class, [r.mandatory()/], [if (r.metadatas.hasSize())][r.metadatas.size()/][else]-1[/if])[/template]

[template public attributesEnum(e : entity::Entity)]
  [e.licence()/]
  package [e.buildPackageBusinessApiEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    [let attributs : OrderedSet(environment::Attribute) = e.attributesNoPk()]
    [/let]
    
    [e.writeImports()/]
    
  [/protected]
  
  
  /**
   * L'énumération définissant les informations de chaque attribut pour le type '[e.buildEntityName()/]'.
   * @author [e.getAuthorName()/]
   */
  public enum [e.buildAttributesEnumName()/] implements [e.getClassNameForAttributesNames_Itf()/]
  {
  
     /** [e.nameENUM_PK_ID()/]. */
     [let eAttributes : OrderedSet(environment::Property) = e.navigableProperties()]
       [if (not eAttributes->isEmpty())]
       [/if]
       [e.nameENUM_PK_ID()/]("[e.nameENUM_PK_ID()/]", "id", [e.genPkType()/].class, true, -1)[if (not eAttributes->isEmpty())]
                                                                                               ,
                                                                                               [eAttributes->asSequence()->collect(temp1 | temp1.enumStruct(e))->sep(',\r\n')/][/if]
       ;
     [/let]
  
     /** Le nom de l'attribut. */
     private final String ['name'.apply_attributeFinal()/];
  
     /** La description de l'attribut. */
     private final String ['description'.apply_attributeFinal()/];
  
     /** Le type associé à l'attribut. */
     private final Class<?> ['type'.apply_attributeFinal()/];
  
     /** Est-ce que la saisie de la valeur est obligatoire pour cet attribut ? */
     private final boolean ['mandatory'.apply_attributeFinal()/];
  
     /** La taille de l'attribut. */
     private final int ['size'.apply_attributeFinal()/];
  
     /** La méthode du getter. */
     private transient Method ['getter method'.apply_attributeDefault()/];
  
     /** La méthode du setter. */
     private transient Method ['setter method'.apply_attributeDefault()/];
  
     /**
      * Constructeur.
      * @param ['name'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Le nom de l'attribut.
      * @param ['description'.apply_parameterMethodClassicIn()/]
      *           (In)(*) La description de l'attribut.
      * @param ['class type'.apply_parameterMethodObjectIn()/]
      *           (In)(*) Le type de l'attribut.
      * @param ['mandatory'.apply_parameterMethodClassicIn()/]
      *           (In)(*) Est-ce que la saisie de la valeur est obligatoire pour cette colonne?
      * @param ['size'.apply_parameterMethodClassicIn()/]
      *           (In)(*) La taille de la colonne
      */
     private [e.buildAttributesEnumName()/] (final String ['name'.apply_parameterMethodClassicIn()/], final String ['description'.apply_parameterMethodClassicIn()/], final Class<?> ['class type'.apply_parameterMethodObjectIn()/], final boolean ['mandatory'.apply_parameterMethodClassicIn()/], final int ['size'.apply_parameterMethodClassicIn()/])
     {
        [e.getAffectationPrefix()/]['name'.apply_attributeFinal()/] = ['name'.apply_parameterMethodClassicIn()/];
        [e.getAffectationPrefix()/]['description'.apply_attributeFinal()/] = ['description'.apply_parameterMethodClassicIn()/];
        [e.getAffectationPrefix()/]['type'.apply_attributeFinal()/] = ['class type'.apply_parameterMethodObjectIn()/];
        [e.getAffectationPrefix()/]['mandatory'.apply_attributeFinal()/] = ['mandatory'.apply_parameterMethodClassicIn()/];
        [e.getAffectationPrefix()/]['size'.apply_attributeFinal()/] = ['size'.apply_parameterMethodClassicIn()/];
     }
  
     @Override
     public String getName ()
     {
        return ['name'.apply_attributeFinal()/];
     }
  
     @Override
     public String getDescription ()
     {
        return ['description'.apply_attributeFinal()/];
     }
  
     @Override
     public Class<?> getType ()
     {
        return ['type'.apply_attributeFinal()/];
     }
  
     @Override
     public boolean isMandatory ()
     {
        return ['mandatory'.apply_attributeFinal()/];
     }
  
     @Override
     public int getSize ()
     {
        return ['size'.apply_attributeFinal()/];
     }
  
     @Override
     public Method getGetterMethod ()
     {
        if (['getter method'.apply_attributeDefault()/] == null)
        {
           ['getter method'.apply_attributeDefault()/] = EntityAttributeHelper.getInstance().getGetterMethodForAttribute([e.buildEntityName()/].class, getName());
        }
        return ['getter method'.apply_attributeDefault()/];
     }
  
     @Override
     public Method getSetterMethod ()
     {
        if (['setter method'.apply_attributeDefault()/] == null)
        {
           ['setter method'.apply_attributeDefault()/] = EntityAttributeHelper.getInstance().getSetterMethodForAttribute([e.buildEntityName()/].class, getName(), getType());
        }
        return ['setter method'.apply_attributeDefault()/];
     }
  
     @Override
     public String toString ()
     {
        return ['description'.apply_attributeFinal()/];
     }
  }[/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport('java.lang.reflect.Method')/]
  [e.addImport(e.buildPackagePersistenceImplementationJdbcEntity() + '.' + e.buildEntityImplClassName())/]
  [e.addImport(e.getImportForAttributesNames_Itf())/];
  [e.addImport('fr.spi4j.persistence.entity.EntityAttributeHelper')/];
  
  [for (r : environment::Reference | e.referencesNoStar())]
    	 [e.addImport(r.containingType.oclAsType(entity::Entity).buildPackagePersistenceImplementationJdbcEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildEntityImplClassName())/]
  [/for]
  
  [for (r : environment::Reference | e.referencingStar())]
    	[e.addImport(r.containingType.oclAsType(entity::Entity).buildPackagePersistenceImplementationJdbcEntity() + '.' + r.containingType.oclAsType(entity::Entity).buildEntityImplClassName())/]
  [/for]
  
  [for (enum : environment::Enumeration | e.getRoot().eAllContents(environment::Enumeration))]
    	[e.addImport(enum.buildPackageEnum() + '.' + enum.buildEnumName())/]
  [/for]
  
  [e.flushImports()/][/template]

[comment Détermine si un attribut ou une référence possède une méta-donnée Annotation de titre "COMPUTED". /]
[query public isComputed(p : environment::Property) : Boolean = not (p.metadatas = null) and p.metadatas.metadatas->exists(m | not (m = null) and not (m.oclAsType(environment::Annotation).title = null) and m.oclAsType(environment::Annotation).title.equalsIgnoreCase('COMPUTED'))/]
