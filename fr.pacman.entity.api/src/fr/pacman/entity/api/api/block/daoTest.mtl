[module daoTest('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::types::packages/]
[import fr::pacman::commons::types::names/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public daoTest(e : entity::Entity, referentiel : Boolean)]
  [e.licence()/]
  package [e.buildPackagePersistenceApiEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.writeImports(referentiel)/]
    
  [/protected]
  
  
  /**
   * Classe de test du dao '[e.buildDaoInterfaceName()/]'.
   * @author [e.getAuthorName()/]
   */
  // Annotation for class
  [protected (e.getUserCodeId('Annotation for class')) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  
  public class [e.buildDaoTestClassName()/] extends [e.getClassNameForBeanTester_Abs()/]
  {
  
     /** Le 'UserPersistence' de l'application. */
     private static [e.buildUserPersistenceAppClassName()/] ['user persistence'.apply_attributeStatic()/];
  
     /** Le '[e.buildDaoInterfaceName()/]' teste. */
  [if (not e.useTestsCRUD())]
       @SuppressWarnings("all")
  [/if]
     private static [e.buildDaoInterfaceName()/] ['dao'.apply_attributeStatic()/];
  
     /** L'id du '[e.buildEntityInterfaceName()/]' stocke en base. */
     private static Long ['crud id'.apply_attributeStatic()/];
  
  [if (e.useTestsCRUD())]
       /**
        * Definition du ['crud id'.apply_attributeStatic()/].
        * @param ['crud id'.apply_parameterMethodClassicIn()/]
        *           le ['crud id'.apply_attributeStatic()/]
        */
       public static void ['set crud id'.apply_methodDefault()/] (final Long ['crud id'.apply_parameterMethodClassicIn()/])
       {
          [e.buildDaoTestClassName()/].['crud id'.apply_attributeStatic()/] = ['crud id'.apply_parameterMethodClassicIn()/];
       }
    
  [/if]
     /**
      * Methode d'initialisation de la classe de tests.
      */
     @BeforeAll
     public static void ['set up before class'.apply_methodDefault()/] ()
     {
        ['user persistence'.apply_attributeStatic()/] = [e.buildParamPersistenceClassName()/].['get user persistence'.apply_methodDefault()/]();
        ['dao'.apply_attributeStatic()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildDaoName()).apply_methodDefault()/]();
  
        // set up before class
        [protected (e.getUserCodeId('set up before class')) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
  
     }
  
     /**
      * Methode d'initialisation de tests.
      */
     @BeforeEach
     public void ['set up'.apply_methodDefault()/] ()
     {
        ['user persistence'.apply_attributeStatic()/].begin();
  
        // set up
        [protected (e.getUserCodeId('set up')) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
  
     }
  
  [if (e.useTestsCRUD())]
       /**
        * Test de recherche de toutes les entitys.
    [if (not referentiel)]
          * @throws Throwable
          *            si erreur de creation de l'entity.
    [/if]
        */
       @Test
       public void ['test find all'.apply_methodDefault()/] ()[if (not referentiel)] throws Throwable[/if]
    
       {
    [if (referentiel)]
            final List<[e.buildEntityInterfaceName()/]> ['all'.apply_variableFinal()/] = ['dao'.apply_attributeStatic()/].findAll();
      
            assertTrue(!['all'.apply_variableFinal()/].isEmpty(), "Aucune entity n'a ete trouve dans le referentiel");
      
            final [e.buildEntityInterfaceName()/] ['first'.apply_variableFinal()/] = ['all'.apply_variableFinal()/].get(0);
            ['set crud id'.apply_methodDefault()/](['first'.apply_variableFinal()/].getId());
      
            assertNotNull(['crud id'.apply_attributeStatic()/], "La premiere entity trouve dans le referentiel n'a pas de cle primaire");
      
    [else]
            ['test create'.apply_methodDefault()/]();
      
            final List<[e.buildEntityInterfaceName()/]> ['all'.apply_variableFinal()/] = ['dao'.apply_attributeStatic()/].findAll();
            assertNotNull(EntityUtil.findInCollectionById(['all'.apply_variableFinal()/], ['crud id'.apply_attributeStatic()/]), 
      			"L'entity n'a pas ete trouvee dans la liste de toutes les entitys");
      
    [/if]
          // findAll assertions
          [protected (e.getUserCodeId('findAll assertions')) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
    
       }
    
    [if (not referentiel)]
         /**
          * Test de creation de l'entity.
          * @throws Throwable
          *            si erreur de creation de l'entity.
          */
         @Test
         public void ['test create'.apply_methodDefault()/] () throws Throwable
         {
            final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildEntityName()).apply_methodDefault()/]();
      
            // create
            [protected (e.getUserCodeId('create')) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO renseigner donnees de test
              [for (a : environment::Attribute | e.attributesNoPk())]
                [if (not a.isComputed())]
                        ['entity'.apply_variableDefault()/].[if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]setIdentifiant[else][a.nameSimpleProperty().apply_methodSet()/][/if]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name/]")[else][a.genPropertyType().defaultValueForColumnType()/][/if]);
                [/if]
              [/for]
                    [e.completeTestCreateMethod()/]
            [/protected]
      
      
      	  [e.finalizeTestCreateMethod('entity')/]
      	  assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity creee devrait avoir une cle primaire renseignee");
      
            // create assertions
            [protected (e.getUserCodeId('create assertions')) startTagPrefix('// ') endTagPrefix('// ')]
              
            [/protected]
      
         }
      
      [if (e.hasMandatoryFieldsForDaoTest())]
           /**
            * Test de (non) creation de l'entity avec 
            * des valeurs nulles sur des champs obligatoires.
            * @throws Throwable
            *            si erreur .
            */
           @Test
           public void ['test create with null on mandatory fields'.apply_methodDefault()/] () throws Throwable
           {
              final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildEntityName()).apply_methodDefault()/]();
        
              // create null on mandatory
              [protected (e.getUserCodeId('create null on mandatory')) startTagPrefix('// ') endTagPrefix('// ')]
                      // TODO renseigner donnees de test
                [for (a : environment::Attribute | e.attributesNoPk())]
                  [if (not a.isComputed())]
                          ['entity'.apply_variableDefault()/].[if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]setIdentifiant[else][a.nameSimpleProperty().apply_methodSet()/][/if]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name/]")[else]null[/if]);
                  [/if]
                [/for]
                      [e.completeTestCreateMethod()/]
              [/protected]
            
        
              try{
                [e.finalizeTestCreateMethod('entity')/]
        		assertNull(['entity'.apply_variableDefault()/].getId(), "L'entity ne devrait pas avoir été créé");
              }
              catch(Spi4jValidationException p_e){
                   assertTrue(Boolean.TRUE);
              }
           }
      [/if]
      
      [if (e.hasNullFields())]
           /**
            * Test de creation de l'entity avec des valeurs nulles.
            * @throws Throwable
            *            si erreur de creation de l'entity.
            */
           @Test
           public void ['test create with null'.apply_methodDefault()/] () throws Throwable
           {
              final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildEntityName()).apply_methodDefault()/]();
        
              // create with null values
              [protected (e.getUserCodeId('create with null values')) startTagPrefix('// ') endTagPrefix('// ')]
                      // TODO renseigner donnees de test
                [for (a : environment::Attribute | e.attributesNoPk())]
                  [if (not a.isComputed())]
                          ['entity'.apply_variableDefault()/].[if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]setIdentifiant[else][a.nameSimpleProperty().apply_methodSet()/][/if]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name/]")[elseif (a.isMandatory())][a.genPropertyType().defaultValueForColumnType()/][else]null[/if]);
                  [/if]
                [/for]
                      [e.completeTestCreateMethod()/]
              [/protected]
        
        
        	  [e.finalizeTestCreateMethod('entity')/]
        	  assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity creee devrait avoir une cle primaire renseignee");
        
              // create assertions with null values
              [protected (e.getUserCodeId('create assertions with null values')) startTagPrefix('// ') endTagPrefix('// ')]
                
              [/protected]
        
           }
      [/if]
    [/if]
       /**
        * Test de recherche par identifiant de l'entity.
    [if (not referentiel)]
          * @throws Throwable
          *            si erreur de creation de l'entity.
    [/if]
        */
       @Test
       public void ['test find by id'.apply_methodDefault()/] ()[if (not referentiel)] throws Throwable[/if]
       {
    [if (referentiel)]
            // effectuer le findAll avant le findById pour assurer que crudId soit rempli
            if (['crud id'.apply_attributeStatic()/] == null)
            {
               ['test find all'.apply_methodDefault()/]();
            }
    [else]
            ['test create'.apply_methodDefault()/]();
      
    [/if]
          final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findById(crudId);
          assertNotNull(['entity'.apply_variableDefault()/], "L'entity devrait exister dans le referentiel");
          assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity creee devrait avoir une cle primaire renseignee");
          assertNotNull(['entity'.apply_variableDefault()/].toString(), "L'entity creee devrait avoir un toString");
    
          // findById assertions
          [protected (e.getUserCodeId('findById assertions')) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
    
       }
    
    [if (not referentiel)]
         /**
          * Test d egalite entre les champs de l entite pre et post insertion.
          * @throws Throwable
          *            si erreur de creation de l'entity.
          */
         @Test
         public void ['test all field inserted'.apply_methodDefault()/] () throws Throwable
         {
      
            final [e.buildEntityInterfaceName()/] ['entity insert'.apply_variableDefault()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildEntityName()).apply_methodDefault()/]();
      
            // findAllFieldInserted create
            [protected (e.getUserCodeId('findAllFieldInserted create')) startTagPrefix('// ') endTagPrefix('// ')]
                    // TODO renseigner donnees de test
              [for (a : environment::Attribute | e.attributesNoPk())]
                      ['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name/]")[else][a.genPropertyType().defaultValueForColumnType()/][/if]);
              [/for]
              [for (a : environment::Attribute | e.getInheritDtoAttributes())]
                      ['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name/]")[else][a.genPropertyType().defaultValueForColumnType()/][/if]);
              [/for]
              [if (e.hasAutomaticColumns())]
                [for (columnProp : String | e.get_automaticColumnsProperties())]
                        ['entity insert'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodSet()/]([e.get_typeColumn(columnProp).defaultValueForColumnType()/]);
                [/for]
              [/if]
              [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp1 | temp1.name.toLower()))]
                [if (r.containingType.oclAsType(entity::Entity) = e)]
                        ['entity insert'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodSet()/](1L);
                [/if]
              [/for]
              [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp2 | temp2.name.toLower()))]
                [if (r.oppositeOf = null)]
                        ['entity insert'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodSet()/][r.namePK_ID()/](1L);
                [/if]
              [/for]
            [/protected]
      
      
            ['dao'.apply_attributeStatic()/].create(['entity insert'.apply_variableDefault()/]);
            ['set crud id'.apply_methodDefault()/](['entity insert'.apply_variableDefault()/].getId());
            final [e.buildEntityInterfaceName()/] ['entity read'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findById(crudId);
      
            // findAllFieldInserted assertions
            [protected (e.getUserCodeId('findAllFieldInserted assertions')) startTagPrefix('// ') endTagPrefix('// ')]
                    HashCodeBuilder ['hash code builder entity insert'.apply_variableDefault()/] = new HashCodeBuilder();
              
              [for (a : environment::Attribute | e.attributesNoPk())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['hash code builder entity insert'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (a : environment::Attribute | e.getInheritDtoAttributes())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['hash code builder entity insert'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [if (e.hasAutomaticColumns())]
                [for (columnProp : String | e.get_automaticColumnsProperties())]
                        ['hash code builder entity insert'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]()[e.completeXtopSupValue(columnProp)/]);
                [/for]
              [/if]
              [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp3 | temp3.name.toLower()))]
                [if (r.containingType.oclAsType(entity::Entity) = e)]
                        ['hash code builder entity insert'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp4 | temp4.name.toLower()))]
                [if (r.oppositeOf = null)]
                        ['hash code builder entity insert'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodGet()/][r.namePK_ID()/]());
                [/if]
              [/for]
              
                    int  ['hash code entity insert'.apply_variableDefault()/] = ['hash code builder entity insert'.apply_variableDefault()/].toHashCode();
                    HashCodeBuilder ['hash code builder entity read'.apply_variableDefault()/] = new HashCodeBuilder();
              
              [for (a : environment::Attribute | e.attributesNoPk())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['hash code builder entity read'.apply_variableDefault()/].append(['entity read'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (a : environment::Attribute | e.getInheritDtoAttributes())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['hash code builder entity read'.apply_variableDefault()/].append(['entity read'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [if (e.hasAutomaticColumns())]
                [for (columnProp : String | e.get_automaticColumnsProperties())]
                        ['hash code builder entity read'.apply_variableDefault()/].append(['entity read'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]()[e.completeXtopSupValue(columnProp)/]);
                [/for]
              [/if]
              [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp5 | temp5.name.toLower()))]
                [if (r.containingType.oclAsType(entity::Entity) = e)]
                        ['hash code builder entity read'.apply_variableDefault()/].append(['entity read'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp6 | temp6.name.toLower()))]
                [if (r.oppositeOf = null)]
                        ['hash code builder entity read'.apply_variableDefault()/].append(['entity read'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodGet()/][r.namePK_ID()/]());
                [/if]
              [/for]
              
                    int  ['hash code entity read'.apply_variableDefault()/] = ['hash code builder entity read'.apply_variableDefault()/].toHashCode();
                    EqualsBuilder ['equals builder'.apply_variableDefault()/] = new EqualsBuilder();
              
              [for (a : environment::Attribute | e.attributesNoPk())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['equals builder'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/](), ['entity read'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (a : environment::Attribute | e.getInheritDtoAttributes())]
                [if (not a.genPropertyType().equalsIgnoreCase('Binary'))]
                        ['equals builder'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/](), ['entity read'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [if (e.hasAutomaticColumns())]
                [for (columnProp : String | e.get_automaticColumnsProperties())]
                        ['equals builder'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]()[e.completeXtopSupValue(columnProp)/], ['entity read'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]()[e.completeXtopSupValue(columnProp)/]);
                [/for]
              [/if]
              [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp7 | temp7.name.toLower()))]
                [if (r.containingType.oclAsType(entity::Entity) = e)]
                        ['equals builder'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodGet()/](), ['entity read'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodGet()/]());
                [/if]
              [/for]
              [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp8 | temp8.name.toLower()))]
                [if (r.oppositeOf = null)]
                        ['equals builder'.apply_variableDefault()/].append(['entity insert'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodGet()/][r.namePK_ID()/](), ['entity read'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodGet()/][r.namePK_ID()/]());
                [/if]
              [/for]
              
                    assertEquals(['hash code entity insert'.apply_variableDefault()/],['hash code entity read'.apply_variableDefault()/]);
                    assertTrue(['equals builder'.apply_variableDefault()/].isEquals());
              
              [for (a : environment::Attribute | e.attributesNoPk())]
                [if (a.genPropertyType().equalsIgnoreCase('Binary'))]
                        byte ['['/]][('entity insert byte ' + a.name).apply_variableDefault()/] = ['entity insert'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]().toByteArray();
                        Blob [('entity read ' + a.name).apply_variableDefault()/] = ['entity read'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]().getBlobSql();
                        byte ['['/]][('entity read byte ' + a.name).apply_variableDefault()/] = [('entity read ' + a.name).apply_variableDefault()/].getBytes(1, (int)[('entity read ' + a.name).apply_variableDefault()/].length());
                        assertTrue(Arrays.equals([('entity insert byte ' + a.name).apply_variableDefault()/], [('entity read byte ' + a.name).apply_variableDefault()/]));
                [/if]
              [/for]
            [/protected]
      
         }
      
    [/if]
       /**
        * Test de recherche par colonne.
    [if (not referentiel)]
          * @throws Throwable
          *            si erreur de creation de l'entity.
    [/if]
        */
       @Test
       public void ['test find by column'.apply_methodDefault()/] ()[if (not referentiel)] throws Throwable[/if]
       {
    [if (referentiel)]
            // effectuer le findAll avant le findById pour assurer que crudId soit rempli
            if (['crud id'.apply_attributeStatic()/] == null)
            {
               ['test find all'.apply_methodDefault()/]();
            }
    [else]
            ['test create'.apply_methodDefault()/]();
      
    [/if]
          final List<[e.buildEntityInterfaceName()/]> ['entitys'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findByColumn([e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID()/], crudId);
          assertEquals(1, ['entitys'.apply_variableDefault()/].size(), "Il ne devrait exister qu'une entity");
          final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['entitys'.apply_variableDefault()/].get(0);
          assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity creee devrait avoir une cle primaire renseignee");
    
          // findByColumn assertions
          [protected (e.getUserCodeId('findByColumn assertions')) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
    
       }
    
       /**
        * Test de recherche par critere.
    [if (not referentiel)]
          * @throws Throwable
          *            si erreur de recherche de l'entity.
    [/if]
        */
       @Test
       public void ['test find by criteria'.apply_methodDefault()/] ()[if (not referentiel)] throws Throwable[/if]
       {
    [if (referentiel)]
            // effectuer le findAll avant le findById pour assurer que crudId soit rempli
            if (['crud id'.apply_attributeStatic()/] == null)
            {
               ['test find all'.apply_methodDefault()/]();
            }
    [else]
            ['test create'.apply_methodDefault()/]();
      
    [/if]
          final TableCriteria<[e.buildEntityColumnEnumName()/]> ['table'.apply_variableFinal()/] = new TableCriteria<>(
                   "Test 'find by criteria' en cherchant sur l'id");
          ['table'.apply_variableFinal()/].addCriteria([e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID()/], Operator_Enum.equals, ['crud id'.apply_attributeStatic()/]);
          ['table'.apply_variableFinal()/].addOrderByDesc([e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID()/]);
          final List<[e.buildEntityInterfaceName()/]> ['entitys'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findByCriteria(['table'.apply_variableFinal()/]);
          assertEquals(1, ['entitys'.apply_variableDefault()/].size(), "Il ne devrait exister qu'une entity");
          final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['entitys'.apply_variableDefault()/].get(0);
          assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity creee devrait avoir une cle primaire renseignee");
    
          // findByCriteria assertions
          [protected (e.getUserCodeId('findByCriteria assertions')) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
    
       }
    
    [if (not referentiel)]
         /**
          * Test de mise a jour de l'entity.
          * @throws Throwable
          *            si erreur de mise a jour de l'entity.
          */
         @Test
         public void ['test update'.apply_methodDefault()/] () throws Throwable
         {
            ['test create'.apply_methodDefault()/]();
      
            final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findById(crudId);
      
            // update
            [protected (e.getUserCodeId('update')) startTagPrefix('// ') endTagPrefix('// ')]
              
            [/protected]
      
      
            ['dao'.apply_attributeStatic()/].update(['entity'.apply_variableDefault()/]);
      
            assertNotNull(['entity'.apply_variableDefault()/].getId(), "L'entity mise a jour devrait avoir une cle primaire renseignee");
      
            // update assertions
            [protected (e.getUserCodeId('update assertions')) startTagPrefix('// ') endTagPrefix('// ')]
              
            [/protected]
      
         }
      
         /**
          * Test de suppression de l'entity.
          * @throws Throwable
          *            si erreur de creation de l'entity.
          */
         @Test
         public void ['test delete'.apply_methodDefault()/] () throws Throwable
         {
            ['test create'.apply_methodDefault()/]();
      
            final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['dao'.apply_attributeStatic()/].findById(crudId);
      
            ['dao'.apply_attributeStatic()/].delete(['entity'.apply_variableDefault()/]);
            final List<[e.buildEntityInterfaceName()/]> ['all'.apply_variableFinal()/] = ['dao'.apply_attributeStatic()/].findAll();
            assertNull(EntityUtil.findInCollectionById(['all'.apply_variableFinal()/], crudId), 
      			"L'entity ne devrait plus exister dans la liste de toutes les entitys");
      
            // delete assertions
            [protected (e.getUserCodeId('delete assertions')) startTagPrefix('// ') endTagPrefix('// ')]
              
            [/protected]
      
         }
      
    [/if]
  [/if]
     /**
      * Test de l'enumeration des colonnes de l'entity.
      */
     @Test
     public void ['test columns'.apply_methodDefault()/] ()
     {
        for (final [e.buildEntityColumnEnumName()/] ['column'.apply_variableFinal()/] : [e.buildEntityColumnEnumName()/].values())
        {
           assertNotNull(['column'.apply_variableFinal()/].toString(), "name");
           assertNotNull(['column'.apply_variableFinal()/].getLogicalColumnName(), "logicalColumnName");
           assertNotNull(['column'.apply_variableFinal()/].getCompletePhysicalName(), "completePhysicalName");
           assertNotNull(['column'.apply_variableFinal()/].getSize(), "size");
           assertNotNull(['column'.apply_variableFinal()/].getTypeColumn(), "typeColumn");
           assertNotNull(['column'.apply_variableFinal()/].isMandatory(), "mandatory");
           assertNotNull(['column'.apply_variableFinal()/].isId(), "id");
        }
     }
  
     /**
      * Test de validation d'une entity.
      */
     @Test
     public void ['test validate'.apply_methodDefault()/] ()
     {
        // generation des champs
  [if (e.hasAutomaticColumns())]
    [for (columnProp : String | e.get_automaticColumnsProperties())]
            final [e.get_typeColumn(columnProp)/] [e.get_nameColumn(columnProp).toLower().apply_variableFinal()/] = getRandom[e.get_typeColumn(columnProp)/]([if (e.get_typeColumn(columnProp).isTypeAcceptSize())][e.get_sizeColumn(columnProp)/][/if]);
    [/for]
  [/if]
  [for (a : environment::Attribute | e.attributesNoPk())]
    [if (not a.isComputed())]
            final [a.genPropertyType()/] [a.nameSimpleProperty().apply_variableFinal()/] = [if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name.toUpper()/]")[else]getRandom[a.genPropertyTypeNoGenerics()/]([if (a.atributeHasSize() and a.type.name.isTypeAcceptSize())][e.buildEntityColumnEnumName()/].[a.nameSimpleProperty().apply_attributeEnum()/].getSize()[/if])[/if];
    [/if]
  [/for]
  [for (a : environment::Attribute | e.getInheritDtoAttributes())]
    [if (not a.isComputed())]
            final [a.genPropertyType()/] [a.nameSimpleProperty().apply_variableFinal()/] = [if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name.toUpper()/]")[else]getRandom[a.genPropertyTypeNoGenerics()/]([if (a.atributeHasSize() and a.type.name.isTypeAcceptSize())][e.buildEntityColumnEnumName()/].[a.nameSimpleProperty().apply_attributeEnum()/].getSize()[/if])[/if];
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp9 | temp9.name.toLower()))]
    [if (r.containingType.oclAsType(entity::Entity) = e)]
      [if (not r.isComputed())]
              final [r.genPkType()/] [r.nameSimpleProperty().apply_variableFinal()/] = getRandom[r.genPkType()/]();
      [/if]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp10 | temp10.name.toLower()))]
    [if (r.oppositeOf = null)]
      [if (not r.isComputed())]
              final [r.genPkType()/] [r.nameSimplePropertyInverse().apply_variableFinal()/] = getRandom[r.genPkType()/]();
      [/if]
    [/if]
  [/for]
  
        final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = ['user persistence'.apply_attributeStatic()/].[('get ' + e.buildEntityName()).apply_methodDefault()/]();
        ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
  [if (e.hasAutomaticColumns())]
    [for (columnProp : String | e.get_automaticColumnsProperties())]
            ['entity'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodSet()/]([e.get_nameColumn(columnProp).toLower().apply_variableFinal()/]);
            ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
    [/for]
  [/if]
  [for (a : environment::Attribute | e.attributesNoPk())]
    [if (not a.isComputed())]
            ['entity'.apply_variableDefault()/].[if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]setIdentifiant[else][a.nameSimpleProperty().apply_methodSet()/][/if]([a.nameSimpleProperty().apply_variableFinal()/]);
            ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
    [/if]
  [/for]
  [for (a : environment::Attribute | e.getInheritDtoAttributes())]
    [if (not a.isComputed())]
            ['entity'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/]([a.nameSimpleProperty().apply_variableFinal()/]);
            ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp11 | temp11.name.toLower()))]
    [if (r.containingType.oclAsType(entity::Entity) = e)]
      [if (not r.isComputed())]
              ['entity'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodSet()/]([r.nameSimpleProperty().apply_variableFinal()/]);
              ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
      [/if]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp12 | temp12.name.toLower()))]
    [if (r.oppositeOf = null)]
      [if (not r.isComputed())]
              ['entity'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodSet()/][r.namePK_ID()/]([r.nameSimplePropertyInverse().apply_variableFinal()/]);
              ['validate'.apply_methodDefault()/](['entity'.apply_variableDefault()/]);
      [/if]
    [/if]
  [/for]
  
        // test validate
        [protected (e.getUserCodeId('test validate')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
        // derniere validation avec entity valide
        try
        {
           ['entity'.apply_variableDefault()/].validate();
        }
        catch (final Spi4jValidationException ['e'.apply_variableFinal()/])
        {
           fail(['e'.apply_variableFinal()/].toString());
        }
     }
  
     /**
      * Validation de l'entity.
      * @param ['entity'.apply_parameterMethodClassicIn()/]
      *           l'entity a valider
      */
     private void ['validate'.apply_methodDefault()/] (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/])
     {
        try
        {
           ['entity'.apply_parameterMethodClassicIn()/].validate();
        }
        catch (final Spi4jValidationException ['e'.apply_variableFinal()/])
        {
           assertTrue(['e'.apply_variableFinal()/].getMessage().startsWith("Champ(s)"), "Message incorrect");
        }
     }
  
     /**
      * Methode de fin de test : rollback.
      */
     @AfterEach
     public void ['tear down'.apply_methodDefault()/] ()
     {
        ['user persistence'.apply_attributeStatic()/].rollback();
  
        // tear down
        [protected (e.getUserCodeId('tear down')) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
  
     }
  
  [for (a : environment::Attribute | e.attributesNoPk())]
    [if (not a.type.name.isStandardType() and not a.type.oclIsKindOf(environment::Enumeration))]
         /**
          * getRandom[a.genPropertyTypeNoGenerics()/]
          */
         private [a.type.name.toUpperFirst()/] getRandom[a.genPropertyTypeNoGenerics()/] ()
         {
            // getRandom_[a.type.name.toUpperFirst()/]
            [protected (a.getUserCodeId('getRandom_' + a.type.name.toUpperFirst())) startTagPrefix('// ') endTagPrefix('// ')]
              
                    return [if (a.type.name <> null and a.type.name.contains('<'))]null[else]new [a.type.name.toUpperFirst()/] ()[/if];
              
            [/protected]
      
      
         }
    [/if]
  [/for]
  
     // specific service test
     [protected (e.getUserCodeId('specific service test')) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]

[template private completeTestCreateMethod(e : entity::Entity) post(self.trim())]
  [for (a : environment::Attribute | e.getInheritDtoAttributes())]
    [if (not a.isComputed())]
      ['entity'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/]([if (a.type.oclIsTypeOf(environment::Enumeration))][a.genPropertyType()/].['get enum by value'.apply_methodDefault()/]("[a.type.oclAsType(environment::Enumeration).literals->first().name.toUpper()/]")[else][a.genPropertyType().defaultValueForColumnType()/][/if]);
    [/if]
  [/for]
  [if (e.hasAutomaticColumns())]
    [for (columnProp : String | e.get_automaticColumnsProperties())]
      ['entity'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodSet()/]([e.get_typeColumn(columnProp).defaultValueForColumnType()/]);
    [/for]
  [/if]
  [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp13 | temp13.name.toLower()))]
    [if (r.containingType.oclAsType(entity::Entity) = e)]
      [if (not r.isComputed())]
        ['entity'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodSet()/](1L);
      [/if]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp14 | temp14.name.toLower()))]
    [if (r.oppositeOf = null)]
      [if (not r.isComputed())]
        ['entity'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodSet()/][r.namePK_ID()/](1L);
      [/if]
    [/if]
  [/for]
[/template]

[template private finalizeTestCreateMethod(e : entity::Entity, s : String) post(self.trim())]
  ['dao'.apply_attributeStatic()/].create([s.apply_variableDefault()/]);
  ['set crud id'.apply_methodDefault()/]([s.apply_variableDefault()/].getId());[/template]

[template private defaultValueForColumnType(type : String)]
  [if (type.equalsIgnoreCase('String'))]"t"[elseif (type.equalsIgnoreCase('Boolean'))]false[elseif (type.equalsIgnoreCase('Integer'))]1[elseif (type.equalsIgnoreCase('XtopSup'))]new XtopSup(DatabaseLineStatus_Enum.active)[elseif (type.equalsIgnoreCase('Long'))]1L[elseif (type.equalsIgnoreCase('Float'))]1F[elseif (type.equalsIgnoreCase('Double'))]1D[elseif (type.equalsIgnoreCase('Date'))]new Date()[elseif (type.equalsIgnoreCase('Char'))]'t'[elseif (type.equalsIgnoreCase('Binary'))]getRandomBinary()[elseif (type.equalsIgnoreCase('Timestamp'))]new Timestamp(1L)[elseif (type.equalsIgnoreCase('Time'))]new Time(1L)[else]"Type non reconnu : "[type/]![/if][/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity, referentiel : Boolean) post(self.trim())]
  [e.initImports()/]
  [e.addImport('java.util.List')/]
  [e.addImport('java.util.Date')/]
  [e.addImport('org.apache.commons.lang3.builder.EqualsBuilder')/]
  [e.addImport('org.apache.commons.lang3.builder.HashCodeBuilder')/]
  [e.addImport('org.junit.jupiter.api.AfterEach')/]
  [e.addImport('org.junit.jupiter.api.BeforeAll')/]
  [e.addImport('org.junit.jupiter.api.BeforeEach')/]
  [e.addImport('org.junit.jupiter.api.Test')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertNotNull')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertEquals')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertNull')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.assertTrue')/]
  [e.addImport('static org.junit.jupiter.api.Assertions.fail')/]
  [e.addImport(e.buildPackagePersistence() + '.' + e.buildParamPersistenceClassName())/]
  [e.addImport(e.buildPackagePersistence() + '.' + e.buildUserPersistenceAppClassName())/]
  [e.addImport('fr.spi4j.exception.Spi4jValidationException')/]
  [e.addImport('fr.spi4j.persistence.dao.Operator_Enum')/]
  [e.addImport('fr.spi4j.persistence.dao.TableCriteria')/]
  [e.addImport(e.getImportForBeanTester_Abs())/]
  [e.addImport('fr.spi4j.type.XtopSup')/]
  
  [if (not referentiel)]
    	[e.addImport('fr.spi4j.persistence.entity.EntityUtil')/]
  [/if]
  
  [for (enum : environment::Enumeration | e.getRoot().eAllContents(environment::Enumeration))]
    	[e.addImport(enum.buildPackageEnum() + '.' + enum.buildEnumName())/]
  [/for]
  [e.flushImports()/][/template]

[comment : 10/03/2021 correctif temporaire pour les champs additionnels. /]
[query private isTypeAcceptSize(t : String) : Boolean = t.equalsIgnoreCase('String') or t.equalsIgnoreCase('Integer') or t.equalsIgnoreCase('Long')/]
