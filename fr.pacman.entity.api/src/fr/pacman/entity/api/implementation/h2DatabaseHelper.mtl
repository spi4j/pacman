[module h2DatabaseHelper('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]

[comment encoding = UTF-8 /]
[template public h2DatabaseHelper(r : entity::Root)]
  [r.licence()/]
  package [r.buildPackagePersistence()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [if (r.useH2EmbeddedDatabase())]
      import java.io.File;
    [/if]
    import fr.spi4j.persistence.H2DatabaseHelper;
    
  [/protected]
  
  
  [r.comClass('Classe utilitaire dinitialisation de la base de données à partir des scripts générés (pour H2 a priori)')/]
  public final class [r.buildH2DatabaseHelperClassName()/] extends H2DatabaseHelper
  {
  
     private static final [r.buildH2DatabaseHelperClassName()/] ['instance'.apply_attributeFinalStatic()/] = new [r.buildH2DatabaseHelperClassName()/]();
  
     /**
      * Constructeur.
      */
     private [r.buildH2DatabaseHelperClassName()/] ()
     {
        super([r.buildParamPersistenceClassName()/].getUserPersistence());
     }
  
     @Override
     protected void init ()
     {
        // Ajout de scripts
        [protected (r.getUserCodeId('Ajout de scripts')) startTagPrefix('// ') endTagPrefix('// ')]
                // Il est possible d'aller chercher les scripts SQL en fonction de leur emplacement par rapport au code source de cette classe, avec le code suivant :
                // (Il faut utiliser autant de fois getParentFile() qu'il n'existe de répertoires entre la racine des sources et la racine du projet)
                // (Exemple : 2 fois getParentFile() pour des sources dans src/main/java)
                // final String ['sqlPath'.apply_variableFinal()/] = new File((new File(getClass().getProtectionDomain().getCodeSource().getLocation().getFile()).getParentFile().getParentFile()), "[r.getServerSQLDir()/]").getPath();
                // addScript(['sqlPath'.apply_variableFinal()/] + "/create_tables_[r.getApplicationName()/]_H2.sql");
                // addScript(['sqlPath'.apply_variableFinal()/] + "/init_data_[r.getApplicationName()/].sql");
          
                // on ajoute ../[if r.getServerProjectName() <> null then r.getServerProjectName() else '' endif/] pour que les scripts soient visibles de tous les sous-projets
          
          [if (r.useH2EmbeddedDatabase())]
            	  String sqlPath = new File((new File(getClass().getProtectionDomain().getCodeSource()
            			  .getLocation().getFile()).getParentFile().getParentFile()), "src/main/sql/").getPath();
            
            	  // Permet de retrouver la racine du répertoire une fois l'application déployée,
            	  // sachant que pour l'instant, le seul serveur embarqué pleinement fonctionnel 
            	  // est le serveur tomcat.
            	  if (sqlPath.indexOf("tomcat.") > 0) {
            		   sqlPath = sqlPath.substring(0, sqlPath.indexOf("tomcat.")) + "conf";
            	  }
            	   	
            	  addScript(sqlPath + "/create_tables_[r.getApplicationName()/]_H2.sql");
            	  addScript(sqlPath +  "/init_data_[r.getApplicationName()/].sql");
          [else]
            [if (r.hasAdditionnalLibraries())]
              	  // TODO ajouter les initialisation des scripts des librairies.
              [for (prop : String | r.getAdditionnalLibraries())]
                      // [prop.getLibraryName(prop)/]
                      // addScript("../[if prop.getServerProjectName() <> null then prop.getServerProjectName().trim().ensureTrailingSlash() else '' endif/][prop.getServerSQLDir()/]create_tables_[prop.getLibraryName(prop)/]_H2.sql");
                      // addScript("../[if prop.getServerProjectName() <> null then prop.getServerProjectName().trim().ensureTrailingSlash() else '' endif/][prop.getServerSQLDir()/]init_data_[prop.getLibraryName(prop)/].sql");
              [/for]
            [/if]
            
                  // [r.getApplicationName()/]
                  addScript("../[if r.getServerProjectName() <> null then r.getServerProjectName().trim().ensureTrailingSlash() else '' endif/][r.getServerSQLDir()/]create_tables_[r.getApplicationName()/]_H2.sql");
                  addScript("../[if r.getServerProjectName() <> null then r.getServerProjectName().trim().ensureTrailingSlash() else '' endif/][r.getServerSQLDir()/]init_data_[r.getApplicationName()/].sql");
          [/if]
          
        [/protected]
  
     }
  
     /**
      * Méthode d'initialisation de la base de données.
      */
     public static void ['initialize database'.apply_methodDefault()/] ()
     {
        ['instance'.apply_attributeFinalStatic()/].initDatabase();
     }
  
     // Methodes
     [protected (r.getUserCodeId('Methodes')) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]