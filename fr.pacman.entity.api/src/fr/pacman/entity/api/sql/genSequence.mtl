[comment encoding = UTF-8 /]
[module genSequence('http://www.obeonetwork.org/dsl/entity/3.0.0','http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils /]
[import fr::pacman::entity::api::common::buildClassesEntityApi /]
[import fr::pacman::entity::api::common::attributes /]
[import fr::pacman::entity::api::sql::common /]
[import fr::pacman::commons::common::properties /]


[template public genSequence(databaseType : String, r : Root)]
/****************************************************************/
[genSlashedLine('Sequences', sizeHeader())/]
/****************************************************************/
[for (n : environment::Namespace | r.ownedNamespaces)]
[genSequence(databaseType,n)/]
[/for]
[/template]
[template private genSequence(databaseType : String, n : environment::Namespace)]
[for (sn : environment::Namespace | n.ownedNamespaces)]
[genSequence(databaseType,sn)/]
[/for]
[for (e : Entity | n.types->select(el|el.oclIsKindOf(entity::Entity)))]
[if not e.isNotPersistent() or useMatching()]
[genSequence(databaseType,e)/]
[/if]
[/for]
[/template]

[template public genSequence(databaseType : String, e : Entity)]
create sequence [nameSequence(e)/] start with 1000;
[/template]

[template private genSequence(e : Entity)]
create sequence [nameSequence(e)/] start with 1000;
[/template]


