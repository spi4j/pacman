[module generateSql('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::sql::dropConstraint/]
[import fr::pacman::entity::api::sql::dropSequence/]
[import fr::pacman::entity::api::sql::dropTable/]
[import fr::pacman::entity::api::sql::dropSchema/]
[import fr::pacman::entity::api::sql::dropIndex/]
[import fr::pacman::entity::api::sql::genConstraint/]
[import fr::pacman::entity::api::sql::genSequence/]
[import fr::pacman::entity::api::sql::genSchema/]
[import fr::pacman::entity::api::sql::genTable/]
[import fr::pacman::entity::api::sql::genInitData/]
[import fr::pacman::entity::api::sql::typeSQL/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[comment @main/]
[template public genMainSql(r : entity::Root)]
  [let databaseTypes : Sequence(String) = r.getDatabaseTypes()]
    [if (databaseTypes->isEmpty())]
          [r.genFiles('Oracle')/]
    [else]
      [for (databaseType : String | databaseTypes)]
                [r.genFiles(databaseType)/]
      [/for]
    [/if]
    [r.genInitData('H2')/]
  [/let]
[/template]

[template private genFiles(r : entity::Root, databaseType : String)]
  [r.releaseCounterForConstraints()/]
  [file (r.getServerSQLDir() + 'create_tables_' + r.getApplicationName() + '_' + databaseType + '.sql', overwrite, 'UTF-8')]
    /****************************************************************/
    [databaseType.baseDeDonnees().genSlashedLine(r.sizeHeader())/]
    [r.application().genSlashedLine(r.sizeHeader())/]
    [r.dateCreation().genSlashedLine(r.sizeHeader())/]
    /****************************************************************/
    [if (r.hasSQLTableSchema())]
      [databaseType.genSchema(r)/]
    [/if]
    [if (databaseType.typeDatabaseHasSequence())]
      [databaseType.genSequence(r)/]
    [/if]
    [databaseType.genTableCreate(r)/]
    [r.genConstraint()/]
  [/file]
  
  [r.releaseCounterForConstraints()/]
  [file (r.getServerSQLDir() + 'drop_tables_' + r.getApplicationName() + '_' + databaseType + '.sql', overwrite, 'UTF-8')]
    /****************************************************************/
    [databaseType.baseDeDonnees().genSlashedLine(r.sizeHeader())/]
    [r.application().genSlashedLine(r.sizeHeader())/]
    [r.dateCreation().genSlashedLine(r.sizeHeader())/]
    /****************************************************************/
    
    [if (databaseType.typeDatabaseHasSequence())]
      [r.dropSequence()/]
    [/if]
    [r.dropConstraint(databaseType)/]
    [r.dropIndex(databaseType)/]
    [r.dropTable()/]
    [if (r.hasSQLTableSchema())]
      [databaseType.dropSchema(r)/]
    [/if]
  [/file]
[/template]

[query private getDatabaseTypes(any : ecore::EObject) : Sequence(String) = any.getDataBasesNames().getPropertyAsList(',')/]

[query private baseDeDonnees(databaseType : String) : String = 'Base de donnees:      ' + databaseType/]

[query private application(any : ecore::EObject) : String = 'Application:          ' + any.getApplicationName()/]

[query private dateCreation(any : ecore::EObject) : String = 'Date de creation:     ' + 'dd/MM/yyyy HH:mm:ss'.date()/]