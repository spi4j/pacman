[comment encoding = UTF-8 /]
[module generateSql('http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::utils /]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::sql::dropConstraint /]
[import fr::pacman::entity::api::sql::dropSequence /]
[import fr::pacman::entity::api::sql::dropTable /]
[import fr::pacman::entity::api::sql::dropSchema /]
[import fr::pacman::entity::api::sql::dropIndex /]
[import fr::pacman::entity::api::sql::genConstraint /]
[import fr::pacman::entity::api::sql::genSequence /]
[import fr::pacman::entity::api::sql::genSchema /]
[import fr::pacman::entity::api::sql::genTable /]
[import fr::pacman::entity::api::sql::genInitData /]
[import fr::pacman::entity::api::sql::typeSQL /]
[import fr::pacman::commons::common::packages /]

[template public genMainSql(r : Root)]
[comment @main /]
[let databaseTypes : Sequence(String) = getDatabaseTypes()]
[if databaseTypes->isEmpty()]
    [genFiles(r, 'Oracle') /]
[else]
    [for (databaseType : String | databaseTypes)]
        [genFiles(r, databaseType) /]
    [/for]
[/if]
[genInitData(r, 'H2')/]
[/let]
[/template]

[template private genFiles(r : Root, databaseType : String)]
[releaseCounterForConstraints()/]
[file (getServerSQLDir() + 'create_tables_' + getApplicationName() + '_' + databaseType + '.sql', false, 'UTF-8')]
/****************************************************************/
[genSlashedLine(baseDeDonnees(databaseType), sizeHeader())/]
[genSlashedLine(application(), sizeHeader())/]
[genSlashedLine(dateCreation(), sizeHeader())/]
/****************************************************************/
[if hasSQLTableSchema()]
[genSchema(databaseType, r)/]
[/if]
[if typeDatabaseHasSequence(databaseType)]
[genSequence(databaseType,r)/]
[/if]
[genTableCreate(databaseType, r)/]
[genConstraint(r)/]
[/file]

[releaseCounterForConstraints()/]
[file (getServerSQLDir() + 'drop_tables_' + getApplicationName() + '_' + databaseType + '.sql', false, 'UTF-8')]
/****************************************************************/
[genSlashedLine(baseDeDonnees(databaseType), sizeHeader())/]
[genSlashedLine(application(), sizeHeader())/]
[genSlashedLine(dateCreation(), sizeHeader())/]
/****************************************************************/

[if typeDatabaseHasSequence(databaseType)]
[dropSequence(r)/]
[/if]
[dropConstraint(r, databaseType)/]
[dropIndex(r, databaseType)/]
[dropTable(r)/]
[if hasSQLTableSchema()]
[dropSchema(databaseType, r)/]
[/if]
[/file]
[/template]

[query private getDatabaseTypes (any : OclAny) : Sequence(String) =
    invoke('fr.pacman.commons.services.StringUtils', 'getPropertyAsList(java.lang.Object, java.lang.String)', Sequence{getDataBasesNames(), ','})
/]

[query private baseDeDonnees(databaseType : String) : String = 'Base de donnees:      ' + databaseType /]
[query private application(any : OclAny) : String = 'Application:          ' + getApplicationName() /]
[query private dateCreation(any : OclAny) : String = 'Date de creation:     ' + date('dd/MM/yyyy HH:mm:ss') /]

