[module genConstraint('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::sql::genTable/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::common::properties/]

[comment encoding = UTF-8 /]
[template public genConstraint(r : entity::Root)]
  /****************************************************************/
  ['Constraints'.genSlashedLine(r.sizeHeader())/]
  /****************************************************************/
  [for (n : environment::Namespace | r.ownedNamespaces)][n.genConstraint()/][/for]
[/template]

[template public genConstraintWithoutHeader(r : entity::Root)]
  [for (b : environment::Namespace | r.ownedNamespaces)]
    [b.genConstraint()/]
  [/for]
[/template]

[template private genConstraint(n : environment::Namespace)]
  [for (sn : environment::Namespace | n.ownedNamespaces)]
    [sn.genConstraint()/]
  [/for]
  [for (e : entity::Entity | n.types->select(el | el.oclIsKindOf(entity::Entity)))]
    [if (not e.isNotPersistent() or e.useMatching())][e.genConstraint()/][/if]
  [/for]
[/template]

[template private genConstraint(e : entity::Entity)]
  [for (a : environment::Attribute | e.attributes())]
    [if (a.hasCheckConstraint())]
      [e.genCK(a, e.get_counterCK())/]
    [/if]
    [if (a.type.oclIsKindOf(environment::Enumeration) and not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty())]
      [e.genCKEnum(a, e.get_counterCK())/]
    [/if]
  [/for]
  [for (ent : entity::Entity | e.entitiesReferencedOrReferencing())][e.genFK(ent, e.get_counterFK(e.referencesNoStarAndReferencingStarAllNavigability(ent)->size()))/][/for]
  [for (r : environment::Reference | e.referencesStarStarOwned())]
    alter table [r.nameTableJointureWithSchema()/] add constraint [r.nameConstraintJointure1()/] foreign key ([r.containingType.oclAsType(entity::Entity).namePK()/]) references [r.containingType.oclAsType(entity::Entity).nameTableWithSchema()/] ([r.containingType.oclAsType(entity::Entity).namePK()/]);
    alter table [r.nameTableJointureWithSchema()/] add constraint [r.nameConstraintJointure2()/] foreign key ([r.referencedType.oclAsType(entity::Entity).namePK()/]) references [r.referencedNameTableWithSchema()/] ([r.referencedType.oclAsType(entity::Entity).namePK()/]);
  [/for]
[/template]

[comment : construction du nom la table en fonction de l'entite externe (librairie) ou interne pour les relations bi-directionnelles. /]
[template private referencedNameTableWithSchema(r : environment::Reference)]
  [let e : entity::Entity = r.referencedType.oclAsType(entity::Entity)]
    [if (e.isLibraryEntity(r.getApplicationName()))][e.nameLibraryTableWithSchema()/][else][e.nameTableWithSchema()/][/if]
  [/let]
[/template]

[comment : le nouveau template permet simplement de passer le compteur (problÃ©matique OCL)./]
[template private genFK(e : entity::Entity, ent : entity::Entity, compteur : Integer)]
  [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
    [if (e = ent or e.referencesNoStarAndReferencingStarAllNavigability(ent)->size() > 1)]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.genFKMultiple(r, compteur + rIndex - 1, rIndex)/]
      [elseif (r.oppositeOf = null)]
        [e.genFKMultipleInverse(r, compteur + rIndex - 1, rIndex)/]
      [/if]
    [else]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.genFK(r, compteur)/]
      [elseif (r.oppositeOf = null)]
        [e.genFKInverse(r, compteur)/]
      [/if]
    [/if]
  [/for]
[/template]

[comment eferences/]
[template private genFKMultiple(e : entity::Entity, r : environment::Reference, compteur : Integer, i : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraint(r, compteur)/] foreign key ([r.nameColumnId(i)/]) references [r.referencedType.oclAsType(entity::Entity).nameTableWithSchema()/] ([r.referencedType.oclAsType(entity::Entity).namePK()/]);[/template]

[comment eferencing/]
[template private genFKMultipleInverse(e : entity::Entity, r : environment::Reference, compteur : Integer, i : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraintInverse(r, compteur)/] foreign key ([r.nameColumnReferencingId(i)/]) references [r.containingType.oclAsType(entity::Entity).nameTableWithSchema()/] ([r.containingType.oclAsType(entity::Entity).namePK()/]);[/template]

[comment eferences/]
[template private genFK(e : entity::Entity, r : environment::Reference, compteur : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraint(r, compteur)/] foreign key ([r.nameColumnId()/]) references [r.referencedType.oclAsType(entity::Entity).nameTableWithSchema()/] ([r.referencedType.oclAsType(entity::Entity).namePK()/]);[/template]

[comment eferencing/]
[template private genFKInverse(e : entity::Entity, r : environment::Reference, compteur : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraintInverse(r, compteur)/] foreign key ([r.nameColumnReferencingId()/]) references [r.containingType.oclAsType(entity::Entity).nameTableWithSchema()/] ([r.containingType.oclAsType(entity::Entity).namePK()/]);[/template]

[template private genCK(e : entity::Entity, a : environment::Attribute, compteur : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraintCK(compteur)/] CHECK ([a.nameColumn()/] [a.checkConstraint()/]);[/template]

[template private genCKEnum(e : entity::Entity, a : environment::Attribute, compteur : Integer)]
  alter table [e.nameTableWithSchema()/] add constraint [e.nameConstraintCK(compteur)/] CHECK ([a.nameColumn()/] IN ([a.type.oclAsType(environment::Enumeration).literals->asSequence()->collect(temp1 | temp1.enumStruct(a.type.oclAsType(environment::Enumeration)))->sep(',')/]));[/template]

[template public enumStruct(l : environment::Literal, e : environment::Enumeration)]
  '[l.name/]'[/template]