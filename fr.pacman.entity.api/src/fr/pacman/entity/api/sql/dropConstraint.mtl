[module dropConstraint('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::sql::genTable/]
[import fr::pacman::entity::api::sql::typeSQL/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]

[comment encoding = UTF-8 /]
[template public dropConstraint(r : entity::Root, databaseType : String)]
  /****************************************************************/
  ['Constraints'.genSlashedLine(r.sizeHeader())/]
  /****************************************************************/
  [for (n : environment::Namespace | r.ownedNamespaces)][n.dropConstraint(databaseType)/][/for]
[/template]

[template public dropConstraintWithoutComment(r : entity::Root, databaseType : String)]
  [for (n : environment::Namespace | r.ownedNamespaces)][n.dropConstraint(databaseType)/][/for]
[/template]

[template private dropConstraint(n : environment::Namespace, databaseType : String)]
  [for (sb : environment::Namespace | n.ownedNamespaces)]
    [sb.dropConstraint(databaseType)/]
  [/for]
  [for (e : entity::Entity | n.types->select(e | e.oclIsKindOf(entity::Entity)))]
    [if (not e.isNotPersistent() or e.useMatching())][e.dropConstraint(databaseType)/][/if]
  [/for]
[/template]

[template private dropConstraint(e : entity::Entity, databaseType : String)]
  [for (a : environment::Attribute | e.attributes())]
    [if (not a.isComputed())]
      [if (a.hasCheckConstraint() or a.type.oclIsKindOf(environment::Enumeration) and not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty())]
        [e.dropCK(e.get_counterCK())/]
      [/if]
    [/if]
  [/for]
  [for (ent : entity::Entity | e.entitiesReferencedOrReferencing())][e.dropFK(ent, databaseType, e.get_counterFK(e.referencesNoStarAndReferencingStarAllNavigability(ent)->size()))/][/for]
  [for (r : environment::Reference | e.referencesStarStarOwned())]
    [databaseType.dropConstraint(r.nameTableJointureWithSchema(), r.nameConstraintJointure1())/]
    [databaseType.dropConstraint(r.nameTableJointureWithSchema(), r.nameConstraintJointure2())/]
  [/for]
[/template]

[template private dropFK(e : entity::Entity, ent : entity::Entity, databaseType : String, compteur : Integer)]
  [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
    [if (e = ent or e.referencesNoStarAndReferencingStarAllNavigability(ent)->size() > 1)]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.dropFk(r, databaseType, compteur + rIndex - 1)/]
      [elseif (r.oppositeOf = null)]
        [e.dropFkInverse(r, databaseType, compteur + rIndex - 1)/]
      [/if]
    [else]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.dropFk(r, databaseType, compteur)/]
      [elseif (r.oppositeOf = null)]
        [e.dropFkInverse(r, databaseType, compteur)/]
      [/if]
    [/if]
  [/for]
[/template]

[template private dropCK(e : entity::Entity, compteur : Integer)]
  alter table [e.nameTableWithSchema()/] drop constraint [e.nameConstraintCK(compteur)/];[/template]

[template private dropFk(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer)]
  [databaseType.dropConstraint(e.nameTableWithSchema(), e.nameConstraint(r, compteur))/][/template]

[template private dropFkInverse(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer)]
  [databaseType.dropConstraint(e.nameTableWithSchema(), e.nameConstraintInverse(r, compteur))/][/template]