[comment encoding = UTF-8 /]
[module dropConstraint('http://www.obeonetwork.org/dsl/entity/3.0.0','http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::entity::api::common::attributes /]
[import fr::pacman::entity::api::common::names /]
[import fr::pacman::entity::api::sql::common /]
[import fr::pacman::entity::api::sql::genTable /]
[import fr::pacman::entity::api::sql::typeSQL /]
[import fr::pacman::entity::api::common::buildClassesEntityApi /]

[template public dropConstraint(r : Root, databaseType : String)]
/****************************************************************/
[genSlashedLine('Constraints', sizeHeader())/]
/****************************************************************/
[for (n : environment::Namespace | r.ownedNamespaces)]
[dropConstraint(n, databaseType)/][/for]
[/template]

[template public dropConstraintWithoutComment(r : Root, databaseType : String)]
[for (n : environment::Namespace | r.ownedNamespaces)]
[dropConstraint(n, databaseType)/][/for]
[/template]

[template private dropConstraint(n :  environment::Namespace, databaseType : String)]
[for (sb : environment::Namespace | n.ownedNamespaces)]
[dropConstraint(sb, databaseType)/]
[/for]
[for (e : Entity | n.types->select(e| e.oclIsKindOf(entity::Entity)))]
[if not e.isNotPersistent() or useMatching()]
[dropConstraint(e,databaseType)/][/if][/for]
[/template]

[template private dropConstraint(e : Entity, databaseType : String)]
[for (a : Attribute | e.attributes())]
[if (not a.isComputed())]
[if (hasCheckConstraint(a) or ((a.type.oclIsKindOf(Enumeration)) and (not a.type.oclAsType(Enumeration)->isEmpty())))]
[dropCK(e, e.get_counterCK())/]
[/if][/if]
[/for]
[for (ent : Entity | entitiesReferencedOrReferencing() )]
[dropFK(e, ent, databaseType, e.get_counterFK(referencesNoStarAndReferencingStarAllNavigability(e, ent)->size()))/][/for]
[for (r : Reference | e.referencesStarStarOwned())]
[dropConstraint(databaseType, nameTableJointureWithSchema(r), nameConstraintJointure1(r))/]
[dropConstraint(databaseType, nameTableJointureWithSchema(r), nameConstraintJointure2(r))/]
[/for]
[/template]

[template private dropFK(e : Entity, ent : Entity, databaseType : String, compteur : Integer)]
[for (r : Reference | referencesNoStarAndReferencingStarAllNavigability(e,ent))]
[if e=ent or referencesNoStarAndReferencingStarAllNavigability(e, ent)->size()>1]
[if r.containingType.oclAsType(entity::Entity) = e]
[dropFk(e, r, databaseType, compteur + (i-1))/]
[elseif r.oppositeOf.oclIsUndefined()]
[dropFkInverse(e, r, databaseType, compteur + (i-1))/]
[/if][else][if r.containingType.oclAsType(entity::Entity) = e]
[dropFk(e, r, databaseType, compteur)/]
[elseif r.oppositeOf.oclIsUndefined()]
[dropFkInverse(e, r, databaseType, compteur)/]
[/if][/if][/for]
[/template]

[template private dropCK(e : Entity, compteur : Integer)]
alter table [nameTableWithSchema(e)/] drop constraint [nameConstraintCK(e, compteur)/];
[/template]

[template private dropFk(e : Entity, r : Reference, databaseType : String , compteur : Integer)]
[dropConstraint(databaseType, nameTableWithSchema(e), nameConstraint(e, r, compteur))/]
[/template]

[template private dropFkInverse(e : Entity, r : Reference, databaseType : String , compteur : Integer)]
[dropConstraint(databaseType, nameTableWithSchema(e), nameConstraintInverse(e, r, compteur))/]
[/template]

