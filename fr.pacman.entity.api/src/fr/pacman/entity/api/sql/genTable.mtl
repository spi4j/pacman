[module genTable('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::requests::counterQueries/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::sql::typeSQL/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::entity::api::sql::common/]

[template private genTypeColumn(databaseType : String, a : environment::Attribute)]
  [databaseType.typeDataBase(a, a.attributeSize())/][/template]

[template private genTypeColumn(databaseType : String, r : environment::Reference)]
  [databaseType.typeDataBase(r)/][/template]

[template private genColumn(databaseType : String, a : environment::Attribute)]
  [a.nameColumn()/] [databaseType.genTypeColumn(a)/][if (a.isMandatory())] not null[/if][if (databaseType.isDbMsqlType())][a.genCommentMysql()/][/if][/template]

[template private genColumnReferenceId(databaseType : String, r : environment::Reference, compteur : Integer)]
  [r.nameColumnId(compteur)/] [databaseType.genTypeColumn(r)/][if (r.isMandatory())] not null[/if][if (databaseType.isDbMsqlType())][r.genCommentMysql()/][/if][/template]

[template private genColumnReferenceId(databaseType : String, r : environment::Reference)]
  [r.nameColumnId()/] [databaseType.genTypeColumn(r)/][if (r.isMandatory())] not null[/if][if (databaseType.isDbMsqlType())][r.genCommentMysql()/][/if][/template]

[template private genColumnReferencingId(databaseType : String, r : environment::Reference, compteur : Integer)]
  [r.nameColumnReferencingId(compteur)/] [databaseType.genTypeColumn(r)/][if (r.isMandatory())] not null[/if][if (databaseType.isDbMsqlType())][r.genCommentMysql()/][/if][/template]

[template private genColumnReferencingId(databaseType : String, r : environment::Reference)]
  [r.nameColumnReferencingId()/] [databaseType.genTypeColumn(r)/][if (r.isMandatory())] not null[/if][if (databaseType.isDbMsqlType())][r.genCommentMysql()/][/if][/template]

[template public genPK(databaseType : String, e : entity::Entity)]
  [e.namePK()/] [databaseType.typeDataBaseID()/][/template]

[template public genPKJointure(databaseType : String, e : entity::Entity)]
  [e.namePK()/] [databaseType.typeDataBaseIDJointure()/][/template]

[template public genReferenceID(databaseType : String, r : environment::Reference)]
  [r.nameReferenceID()/] [databaseType.typeDataBaseID()/][/template]

[template public genTableCreate(databaseType : String, r : entity::Root)]
  [for (n : environment::Namespace | r.ownedNamespaces)]
    [databaseType.genTableCreate(n)/]
  [/for]
[/template]

[template public genTableCreate(databaseType : String, n : environment::Namespace)]
  [for (sn : environment::Namespace | n.ownedNamespaces)]
    [databaseType.genTableCreate(sn)/]
  [/for]
  
  [for (e : entity::Entity | n.types->select(el | el.oclIsKindOf(entity::Entity)))]
    [if (not e.isNotPersistent() or e.useMatching())]
      
      /****************************************************************/
      [e.headerTable().genSlashedLine(e.sizeHeader())/]
      /****************************************************************/
      create table [e.nameTableWithSchema().toUpper()/]
      (
          [databaseType.genPK(e)/],
      [for (a : environment::Attribute | e.attributesNoPk())]
        [if (not a.isComputed())]
              [databaseType.genColumn(a)/][if (a.hasDefaultValue())] DEFAULT '[a.defaultValue()/]'[/if],
        [/if]
      [/for]
      [for (a : environment::Attribute | e.getInheritDtoAttributes())]
        [if (not a.isComputed())]
              [databaseType.genColumn(a)/][if (a.hasDefaultValue())] DEFAULT '[a.defaultValue()/]'[/if],
        [/if]
      [/for]
      
      [for (ent : entity::Entity | e.entitiesReferencedOrReferencing())]
        [if (e = ent or e.referencesNoStarAndReferencingStarAllNavigability(ent)->size() > 1)]
          [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
            [if (r.containingType.oclAsType(entity::Entity) = e)]
                  [databaseType.genColumnReferenceId(r, rIndex)/],
            [elseif (r.oppositeOf = null)]
                  [databaseType.genColumnReferencingId(r, rIndex)/],
            [/if]
          [/for]
        [else]
          [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
            [if (r.containingType.oclAsType(entity::Entity) = e)]
                  [databaseType.genColumnReferenceId(r)/],
            [elseif (r.oppositeOf = null)]
                  [databaseType.genColumnReferencingId(r)/],
            [/if]
          [/for]
        [/if]
      [/for]
          [if (e.hasAutomaticColumns())]
            [e.get_automaticColumns(databaseType)/]
          [/if]
          [databaseType.genConstraintPK(e)/]
      );
      [if (e.hasUniqueIndex())]
        [e.genUniqueIDXOnTable(databaseType, e.get_nbColumnsInUniqueConstraint(e.uniqueIndex()), e.get_counterUN(1))/]
      [/if]
      [for (a : environment::Attribute | e.attributes())]
        [if (not a.isComputed() and a.isUniqueIndex())]
          [e.genUniqueIDX(a, databaseType, e.get_counterUN(1))/]
        [/if]
      [/for]
      [for (ent : entity::Entity | e.entitiesReferencedOrReferencing())][e.genIDX(ent, databaseType, e.get_counterIDX(e.referencesNoStarAndReferencingStarAllNavigability(ent)->size()))/][/for]
      [if (not databaseType.isDbMsqlType())]
        [e.genComment()/]
        [for (a : environment::Attribute | e.attributesNoPk())]
          [if (not a.isComputed())][e.genComment(a)/][/if]
        [/for]
        [for (a : environment::Attribute | e.getInheritDtoAttributes())]
          [if (not a.isComputed())][e.genComment(a)/][/if]
        [/for]
        [for (ent : entity::Entity | e.entitiesReferencedOrReferencing())]
          [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
            [if (r.containingType.oclAsType(entity::Entity) = e)][e.genCommentReferenceId(r)/][elseif (r.oppositeOf = null)][e.genCommentReferencingId(r)/][/if]
          [/for]
        [/for]
      [/if]
      [for (r : environment::Reference | e.referencesStarStarOwned())]
        
        /****************************************************************/
        [r.headerTableJointure().genSlashedLine(r.sizeHeader())/]
        /****************************************************************/
        create table [r.nameTableJointureWithSchema().toUpper()/]
        (
            [databaseType.genPKJointure(r.containingType.oclAsType(entity::Entity))/],
            [databaseType.genPKJointure(r.referencedType.oclAsType(entity::Entity))/],
            [if (r.hasXdMaj())][r.gen_automaticColumn(databaseType, r.getXdmajKey())/][/if]
            [if (r.hasXtopSup())][r.gen_automaticColumn(databaseType, r.getXtopSuppKey())/][/if]
            [databaseType.genConstraintPKJointure(r, rIndex)/]
        );
      [/for]
    [/if]
  [/for]
[/template]

[comment : le nouveau template permet simplement de passer le compteur./]
[template private genIDX(e : entity::Entity, ent : entity::Entity, databaseType : String, compteur : Integer)]
  [for (r : environment::Reference | e.referencesNoStarAndReferencingStarAllNavigability(ent))]
    [if (e = ent or e.referencesNoStarAndReferencingStarAllNavigability(ent)->size() > 1)]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.genIDXMultiple(r, databaseType, compteur + rIndex - 1, rIndex)/]
      [elseif (r.oppositeOf = null)]
        [e.genIDXMultipleInverse(r, databaseType, compteur + rIndex - 1, rIndex)/]
      [/if]
    [else]
      [if (r.containingType.oclAsType(entity::Entity) = e)]
        [e.genIDXSimple(r, databaseType, compteur)/]
      [elseif (r.oppositeOf = null)]
        [e.genIDXInverse(r, databaseType, compteur)/]
      [/if]
    [/if]
  [/for]
[/template]

[template private get_automaticColumns(void : ecore::EObject, databaseType : String)]
  [for (columnProp : String | void.get_automaticColumnsProperties())]
    [void.gen_automaticColumn(databaseType, columnProp)/]
  [/for]
[/template]

[template private gen_automaticColumn(void : ecore::EObject, databaseType : String, columnProp : String) post(self.trim())]
  [if (columnProp.hasToWriteColumn())][void.get_nameColumn(columnProp)/] [void.gen_typeColumn(databaseType, columnProp)/][if (void.columnHasDefault(columnProp))] default [void.get_defaultColumn(columnProp)/][/if][if (void.columnNotNull(columnProp))] not null[/if],[/if][/template]

[template private gen_typeColumn(void : ecore::EObject, databaseType : String, columnProp : String)]
  [databaseType.typeDataBase(void.get_typeColumn(columnProp), void.get_sizeColumn(columnProp))/][/template]

[template private genUniqueIDXOnTable(e : entity::Entity, databaseType : String, nbCol : Integer, compteur : Integer)]
  create unique index [e.nameUniqueIndex(nbCol, compteur)/] on [e.nameTableWithSchema()/] ([e.uniqueIndex().replaceAll(':', ' ')/])[e.genTableSpace(databaseType)/];[/template]

[template private genUniqueIDX(e : entity::Entity, a : environment::Attribute, databaseType : String, compteur : Integer)]
  create unique index [e.nameUniqueIndex(a, 1, compteur)/] on [e.nameTableWithSchema()/] ([a.nameColumn()/] [a.uniqueIndex().replaceAll(':', ' ')/])[e.genTableSpace(databaseType)/];[/template]

[template private genIDXMultiple(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer, i : Integer)]
  create index [r.nameIndex(compteur)/] on [e.nameTableWithSchema()/] ([r.nameColumnId(i)/])[e.genTableSpace(databaseType)/];[/template]

[template private genIDXSimple(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer)]
  create index [r.nameIndex(compteur)/] on [e.nameTableWithSchema()/] ([r.nameColumnId()/])[e.genTableSpace(databaseType)/];[/template]

[template private genIDXMultipleInverse(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer, i : Integer)]
  create index [r.nameIndex(compteur)/] on [e.nameTableWithSchema()/] ([r.nameColumnReferencingId(i)/])[e.genTableSpace(databaseType)/];[/template]

[template private genIDXInverse(e : entity::Entity, r : environment::Reference, databaseType : String, compteur : Integer)]
  create index [r.nameIndex(compteur)/] on [e.nameTableWithSchema()/] ([r.nameColumnReferencingId()/])[e.genTableSpace(databaseType)/];[/template]

[template private genComment(e : entity::Entity) post(self.removeLineSeparators())]
  [if (not (e.description = null) and e.description.size() <> 0)]comment on table [e.nameTableWithSchema()/] is '[e.description.toString().replaceAll('\'', '\'\'')/]';[/if][/template]

[template private genComment(e : entity::Entity, a : environment::Attribute)]
  [if (not (a.description = null) and a.description.size() <> 0)]
    comment on column [e.nameTableWithSchema()/].[a.nameColumn()/] is '[a.description.toString().replaceAll('\'', '\'\'')/]';
  [/if]
[/template]

[template private genCommentReferenceId(e : entity::Entity, r : environment::Reference)]
  [if (not (r.description = null) and r.description.size() <> 0)]
    comment on column [e.nameTableWithSchema()/].[r.nameColumnId()/] is '[r.description.toString().replaceAll('\'', '\'\'')/]';
  [/if]
[/template]

[template private genCommentReferencingId(e : entity::Entity, r : environment::Reference)]
  [if (not (r.description = null) and r.description.size() <> 0)]
    comment on column [e.nameTableWithSchema()/].[r.nameColumnReferencingId()/] is '[r.description.toString().replaceAll('\'', '\'\'')/]';
  [/if]
[/template]

[query private genTableSpace(e : entity::Entity, databaseType : String) : String = if databaseType.isDbOracleType() or databaseType.isDbOracle32Type() and e.getSQLOracleIndexTableSpace() <> null and e.getSQLOracleIndexTableSpace().trim().size() > 0 then ' tablespace ' + e.getSQLOracleIndexTableSpace() else '' endif/]
