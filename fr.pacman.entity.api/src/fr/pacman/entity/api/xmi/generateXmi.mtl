[module generateXmi('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::services::UuidUtils/]

[comment encoding = UTF-8 /]
[template public fullName(e : entity::Entity)]
  [e.eContents(environment::Namespace)->collect(temp1 | temp1.name)->sep('.')/].[e.name/][/template]

[template public fullName(t : environment::Type)]
  [if (t.oclIsTypeOf(entity::Entity))]
    [t.oclAsType(entity::Entity).fullName()/]
  [elseif (t.oclIsTypeOf(environment::Attribute))]
    [t.oclAsType(environment::Attribute).fullName()/]
  [elseif (t.oclIsTypeOf(environment::Reference))]
    [t.oclAsType(environment::Reference).fullName()/]
  [/if]
[/template]

[template public fullName(r : environment::Reference)]
  [r.containingType.oclAsType(entity::Entity).fullName()/].[r.name/][/template]

[template public fullName(a : environment::Attribute)]
  [a.containingType.oclAsType(entity::Entity).fullName()/].[a.name/][/template]

[template public fullName(s : String, e : entity::Entity)]
  [e.fullName()/].[s/][/template]

[template public attribute(a : environment::Attribute)]
                              <UML:Attribute name = "[a.physicalName()/]" xmi.id = "{[a.fullName().nameUUID()/]}" ownerScope = "instance" visibility = "private" changeability = "changeable">[a.attributeMultiplicity()/]
                                  <UML:StructuralFeature.type>
                                      <UML:Classifier xmi.idref = "[a.type.name.typeXmiRef(a.metadatas.size())/]"/>
                                  </UML:StructuralFeature.type>
                              </UML:Attribute>[/template]

[template public genXmiPK(e : entity::Entity)]
  [if (e.ownedAttributes->exists(a | a.isIdentifier))][e.ownedAttributes->select(a | a.isIdentifier)->asSequence()->collect(temp2 | temp2.attributePK())/][else][e.entityPK()/][/if]
[/template]

[template public attributePK(a : environment::Attribute)]
                              <UML:Attribute name = "[a.nameColumn()/]" xmi.id = "{[a.fullName().nameUUID()/]}" ownerScope = "instance" visibility = "private" changeability = "changeable">
                                  <UML:StructuralFeature.multiplicity>
                                      <UML:Multiplicity>
                                          <UML:Multiplicity.range>
                                              <UML:MultiplicityRange>
                                                  <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                  <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>
                                              </UML:MultiplicityRange>
                                          </UML:Multiplicity.range>
                                      </UML:Multiplicity>
                                  </UML:StructuralFeature.multiplicity>
                                  <UML:StructuralFeature.type>
                                      <UML:Classifier xmi.idref = "type[a.genPkType()/]"/>
                                  </UML:StructuralFeature.type>
                              </UML:Attribute>
                              <UML:Stereotype xmi.id = "{[(a.fullName() + '_PK').nameUUID()/]}" name = "PK" extendedElement="{[a.fullName().nameUUID()/]}">
                              </UML:Stereotype>[/template]

[template public entityPK(e : entity::Entity)]
                              <UML:Attribute name = "[e.nameEntityPK()/]" xmi.id = "{[(e.fullName() + 'ID').nameUUID()/]}" ownerScope = "instance" visibility = "private" changeability = "changeable">
                                  <UML:StructuralFeature.multiplicity>
                                      <UML:Multiplicity>
                                          <UML:Multiplicity.range>
                                              <UML:MultiplicityRange>
                                                  <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                  <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>
                                              </UML:MultiplicityRange>
                                          </UML:Multiplicity.range>
                                      </UML:Multiplicity>
                                  </UML:StructuralFeature.multiplicity>
                                  <UML:StructuralFeature.type>
                                      <UML:Classifier xmi.idref = "type[e.genPkType()/]"/>
                                  </UML:StructuralFeature.type>
                              </UML:Attribute>
                              <UML:Stereotype xmi.id = "{[(e.fullName() + 'ID_PK').nameUUID()/]}" name = "PK" extendedElement="{[(e.fullName() + 'ID').nameUUID()/]}">
                              </UML:Stereotype>[/template]

[template public class(e : entity::Entity)]
                      <UML:Class name = "[e.get_prefix()/][e.physicalName()/]" isLeaf = "false" xmi.id = "{[e.fullName().nameUUID()/]}" isAbstract = "false" visibility = "public">
                          <UML:ModelElement.taggedValue>
                              <UML:TaggedValue tag = "strictfp" value = "false"/>
                          </UML:ModelElement.taggedValue>
                          <UML:Classifier.feature>
  [OrderedSet{e.genXmiPK()}->sep('\r\n')/]
  [e.attributesNoPk()->asSequence()->collect(temp3 | temp3.attribute())->sep('\r\n')/]
  [e.getInheritDtoAttributes()->asSequence()->collect(temp4 | temp4.attribute())->sep('\r\n')/]
  [if (e.hasAutomaticColumns())][e.genAutomaticColumns()/][/if]
                          </UML:Classifier.feature>
                      </UML:Class>[/template]

[template public attributeMultiplicity(a : environment::Attribute)]
  [if (a.multiplicity = environment::MultiplicityKind::ONE or a.multiplicity = environment::MultiplicityKind::ONE_STAR)]
    
        <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
                <UML:Multiplicity.range>
                    <UML:MultiplicityRange>
                        <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                        <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>
                    </UML:MultiplicityRange>
                </UML:Multiplicity.range>
            </UML:Multiplicity>
        </UML:StructuralFeature.multiplicity>[/if]
[/template]

[template public multi(r : environment::MultiplicityKind)]
  [if (r = environment::MultiplicityKind::ONE)]
                                                    <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                    <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>[/if]
  [if (r = environment::MultiplicityKind::ONE_STAR)]
                                                    <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                    <UML:MultiplicityRange.upper>-1</UML:MultiplicityRange.upper>[/if]
  [if (r = environment::MultiplicityKind::ZERO_ONE)]
                                                    <UML:MultiplicityRange.lower>0</UML:MultiplicityRange.lower>
                                                    <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>[/if]
  [if (r = environment::MultiplicityKind::ZERO_STAR)]
                                                    <UML:MultiplicityRange.lower>0</UML:MultiplicityRange.lower>
                                                    <UML:MultiplicityRange.upper>-1</UML:MultiplicityRange.upper>[/if]
[/template]

[template public association(r : environment::Reference)]
                      <UML:Association name = "[r.physicalName()/]" xmi.id = "{[r.fullName().nameUUID()/]}">
                          <UML:ModelElement.taggedValue>
                              <UML:TaggedValue tag = "roleAContainer" value = "&lt;None&gt;"/>
                              <UML:TaggedValue tag = "roleAImplementationClass" value = "&lt;None&gt;"/>
                              <UML:TaggedValue tag = "roleBContainer" value = "&lt;None&gt;"/>
                              <UML:TaggedValue tag = "roleBImplementationClass" value = "&lt;None&gt;"/>
                          </UML:ModelElement.taggedValue>
                          <UML:Association.connection>
                              <UML:AssociationEnd xmi.id = "{[r.fullName().nameUUID()/]}a" visibility = "public">
                                  <UML:AssociationEnd.aggregation xmi.value = "none"/>
                                  <UML:AssociationEnd.changeability xmi.value = "changeable"/>
                                  <UML:AssociationEnd.isNavigable xmi.value = "false"/>
                                  <UML:AssociationEnd.ordering xmi.value = "unordered"/>
                                  <UML:AssociationEnd.type>
                                      <UML:Classifier xmi.idref = "{[r.containingType.oclAsType(entity::Entity).fullName().nameUUID()/]}"/>
                                  </UML:AssociationEnd.type>
                                  <UML:AssociationEnd.multiplicity>
                                      <UML:Multiplicity>
                                          <UML:Multiplicity.range>
                                              <UML:MultiplicityRange>
                                                  <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                  <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>
                                              </UML:MultiplicityRange>
                                          </UML:Multiplicity.range>
                                      </UML:Multiplicity>
                                  </UML:AssociationEnd.multiplicity>
                              </UML:AssociationEnd>
                              <UML:AssociationEnd xmi.id = "{[r.fullName().nameUUID()/]}b" visibility = "public">
                                  <UML:AssociationEnd.aggregation xmi.value = "none"/>
                                  <UML:AssociationEnd.changeability xmi.value = "changeable"/>
                                  <UML:AssociationEnd.isNavigable xmi.value = "[if (r.navigable)]true[else]false[/if]
  "/>
                                  <UML:AssociationEnd.ordering xmi.value = "unordered"/>
                                  <UML:AssociationEnd.type>
                                      <UML:Classifier xmi.idref = "{[r.referencedType.oclAsType(entity::Entity).fullName().nameUUID()/]}"/>
                                  </UML:AssociationEnd.type>
                                  <UML:AssociationEnd.multiplicity>
                                      <UML:Multiplicity>
                                          <UML:Multiplicity.range>
                                              <UML:MultiplicityRange>
  [r.multiplicity.multi()/]
                                              </UML:MultiplicityRange>
                                          </UML:Multiplicity.range>
                                      </UML:Multiplicity>
                                  </UML:AssociationEnd.multiplicity>
                              </UML:AssociationEnd>
                          </UML:Association.connection>
                      </UML:Association>[/template]

[comment @main/]
[template public generate(r : entity::Root)]
  
  [for (b : environment::Namespace | r.eAllContents(environment::Namespace))]
    [file (b.getServerXMIDir() + b.name + '.xml', overwrite, 'UTF-8')]
      <?xml version='1.0' encoding='UTF-8' ?>
          <XMI xmlns:UML = "//org.omg/UML/1.3" xmi.version = "1.1">
              <XMI.header>
                  <XMI.documentation>
                      <XMI.exporter>PowerAMC</XMI.exporter>
                  </XMI.documentation>
                  <XMI.metamodel xmi.name = "UML" xmi.version = "1.3"/>
              </XMI.header>
              <XMI.content>
                  <UML:Model name = "[b.name/]" xmi.id = "{[b.name.nameUUID()/]}">
                      <UML:ModelElement.taggedValue>
                          <UML:TaggedValue tag = "SchemaNamespace" value = "http://www.w3.org/2001/XMLSchema"/>
                          <UML:TaggedValue tag = "SoapBindingTransport" value = "http://schemas.xmlsoap.org/soap/http"/>
                      </UML:ModelElement.taggedValue>
                      <UML:Namespace.ownedElement>
      [b.eAllContents(entity::Entity)->collect(temp5 | temp5.class())->sep('\r\n')/]
      [b.eAllContents(environment::Reference)->collect(temp6 | temp6.association())->sep('\r\n')/]
                      </UML:Namespace.ownedElement>
                  </UML:Model>
      [b.comments()/]            <UML:DataType name = "java.lang.String" xmi.id = "typeString"/>
                  <UML:DataType name = "java.lang.Integer" xmi.id = "typeInteger"/>
                  <UML:DataType name = "java.lang.Float" xmi.id = "typeFloat"/>
                  <UML:DataType name = "java.lang.Double" xmi.id = "typeDouble"/>
                  <UML:DataType name = "java.util.Date" xmi.id = "typeDate"/>
                  <UML:DataType name = "java.lang.Boolean" xmi.id = "typeBoolean"/>
                  <UML:DataType name = "java.lang.[b.genPkType()/]" xmi.id = "type[b.genPkType()/]"/>
      [for (s : String | b.getSizeIntegerAttributes())]
                    <UML:DataType name = "number([s/])" xmi.id = "typeNumber['['/][s/]]"/>
      [/for]
      [for (s : String | b.getSizeStringAttributes())]
                    <UML:DataType name = "[s.varchar()/]" xmi.id = "typeString['['/][s/]]"/>
      [/for]
      [for (s : String | b.getSizeFloatsAndDoubleAttributes())]
                    <UML:DataType name = "float([s/])" xmi.id = "typeFloat['['/][s/]]"/>
      [/for]
      [for (e : entity::Entity | b.eAllContents(entity::Entity))]
                    <UML:TaggedValue tag = "persistence" value = "persistent" xmi.id = "Tag[e.fullName()/]" modelElement = "{[e.fullName().nameUUID()/]}"/>
      [/for]
      [for (a : environment::Attribute | b.eAllContents(environment::Attribute))]
                    <UML:TaggedValue tag = "persistence" value = "persistent" xmi.id = "Tag[a.fullName()/]" modelElement = "{[a.fullName().nameUUID()/]}"/>
      [/for]
              </XMI.content>
          </XMI>
    [/file]
  [/for]
[/template]

[comment écupère les différentes tailles d'Integer du modèle/]
[query public getSizeIntegerAttributes(b : environment::Namespace) : Sequence(String) = b.eAllContents(environment::Attribute)->select(a | a.type.name.equalsIgnoreCase('Integer') and a.metadatas.hasSize())->collect(temp7 | temp7.metadatas)->collect(temp8 | temp8.size())->union(b.eAllContents(entity::Entity)->collect(temp9 | temp9.getSizeIntegerAttributesDefaultColumns()))->asOrderedSet()->asSequence()/]

[comment écupère les différentes tailles de String du modèle/]
[query public getSizeStringAttributes(b : environment::Namespace) : Sequence(String) = b.eAllContents(environment::Attribute)->select(a | a.type.name.equalsIgnoreCase('String') and a.metadatas.hasSize())->collect(temp10 | temp10.metadatas)->collect(temp11 | temp11.size())->union(b.eAllContents(entity::Entity)->collect(temp12 | temp12.getSizeStringAttributesDefaultColumns()))->asOrderedSet()->asSequence()/]

[comment écupère les différentes tailles de Float et Doubles du modèle/]
[query public getSizeFloatsAndDoubleAttributes(b : environment::Namespace) : Sequence(String) = b.eAllContents(environment::Attribute)->select(a | (a.type.name.equalsIgnoreCase('Float') or a.type.name.equalsIgnoreCase('Double')) and a.metadatas.hasSize())->collect(temp13 | temp13.metadatas)->collect(temp14 | temp14.size())->union(b.eAllContents(entity::Entity)->collect(temp15 | temp15.getSizeFloatsAndDoubleAttributesDefaultColumns()))->asOrderedSet()->asSequence()/]

[comment écupère les différentes tailles de Float et Doubles du modèle dans les colonnes automatiques/]
[query public getSizeFloatsAndDoubleAttributesDefaultColumns(e : entity::Entity) : Sequence(String) = if e.hasAutomaticColumns() then e.get_automaticColumnsProperties()->select(s | (s.get_typeColumn(e).equalsIgnoreCase('Float') or s.get_typeColumn(e).equalsIgnoreCase('Double')) and s.get_sizeColumn(e) <> null)->collect(temp16 | temp16.get_sizeColumn(e))->asOrderedSet()->asSequence() else Sequence{} endif/]

[comment écupère les différentes tailles de Integer du modèle dans les colonnes automatiques/]
[query public getSizeIntegerAttributesDefaultColumns(e : entity::Entity) : Sequence(String) = if e.hasAutomaticColumns() then e.get_automaticColumnsProperties()->select(s | s.get_typeColumn(e).equalsIgnoreCase('Integer') and e.get_sizeColumn(s) <> null)->collect(temp17 | temp17.get_sizeColumn(e))->asOrderedSet()->asSequence() else Sequence{} endif/]

[comment écupère les différentes tailles de String du modèle dans les colonnes automatiques/]
[query public getSizeStringAttributesDefaultColumns(e : entity::Entity) : Sequence(String) = if e.hasAutomaticColumns() then e.get_automaticColumnsProperties()->select(s | s.get_typeColumn(e).equalsIgnoreCase('String') and s.get_sizeColumn(e) <> null)->collect(temp18 | temp18.get_sizeColumn(e))->asOrderedSet()->asSequence() else Sequence{} endif/]

[query public nameUUID(msg : String) : String = msg.name()/]

[query public randomUUID(any : ecore::EObject) : String = any.uniqueJavaService()/]

[template public physicalName(e : entity::Entity)]
  [if (e.metadatas.annotationsPN()->size() > 0)][e.metadatas.annotationsPN()->at(1).body/][else][e.name/][/if]
[/template]

[template public physicalName(p : environment::Property)]
  [if (p.metadatas.annotationsPN()->size() > 0)][p.metadatas.annotationsPN()->at(1).body/][else][p.name/][/if]
[/template]

[query public annotationsPN(m : environment::MetaDataContainer) : OrderedSet(environment::Annotation) = if m = null then OrderedSet{} else m.metadatas->select(m | not (m.oclAsType(environment::Annotation).title = null) and m.oclAsType(environment::Annotation).title.equalsIgnoreCase('PHYSICAL_NAME') and not (m.oclAsType(environment::Annotation).body = null) and m.oclAsType(environment::Annotation).body <> '')->asSequence()->collect(temp19 | temp19.oclAsType(environment::Annotation)) endif/]

[template public genAutomaticColumns(e : entity::Entity)]
  [for (columnProp : String | e.get_automaticColumnsProperties())]
    [if (e.columnHasName(columnProp) and e.columnHasType(columnProp))]
                                  <UML:Attribute name = "[e.get_nameColumn(columnProp)/]" xmi.id = "{[e.get_nameColumn(columnProp).fullName(e).nameUUID()/]}" ownerScope = "instance" visibility = "private" changeability = "changeable">[if (e.columnNotNull(columnProp))]
                                                                                                                                                                                                                                                                            <UML:StructuralFeature.multiplicity>
                                                                                                                                                                                                                                                                                <UML:Multiplicity>
                                                                                                                                                                                                                                                                                    <UML:Multiplicity.range>
                                                                                                                                                                                                                                                                                        <UML:MultiplicityRange>
                                                                                                                                                                                                                                                                                            <UML:MultiplicityRange.lower>1</UML:MultiplicityRange.lower>
                                                                                                                                                                                                                                                                                            <UML:MultiplicityRange.upper>1</UML:MultiplicityRange.upper>
                                                                                                                                                                                                                                                                                        </UML:MultiplicityRange>
                                                                                                                                                                                                                                                                                    </UML:Multiplicity.range>
                                                                                                                                                                                                                                                                                </UML:Multiplicity>
                                                                                                                                                                                                                                                                            </UML:StructuralFeature.multiplicity>[/if]
                                      <UML:StructuralFeature.type>
                                          <UML:Classifier xmi.idref = "[e.xmiIdRefAutoColumns(columnProp)/]"/>
                                      </UML:StructuralFeature.type>
                                  </UML:Attribute>
    [/if]
  [/for]
[/template]

[template public xmiIdRefAutoColumns(e : entity::Entity, s : String)]
  type[e.get_typeColumn(s)/][if (e.columnHasSize(s))][e.get_sizeColumn(s)/][/if]
[/template]

[template public typeXmiRef(type : String, size : String) post(self.trim())]
  [if (size = null or size.equalsIgnoreCase(''))]
    type[type/]
  [elseif (type.equalsIgnoreCase('Integer'))]
    typeNumber['['/][size/]]
  [elseif (type.equalsIgnoreCase('Double'))]
    typeFloat['['/][size/]]
  [else]
    type[type/]['['/][size/]]
  [/if]
[/template]

[template public comments(b : environment::Namespace)]
  [for (t : environment::Type | b.eAllContents(environment::Type)->select(t | not (t.description = null) and t.description.size() > 0))]
                <UML:Comment name="[t.description/]" xmi.id="[t.description.normalize().nameUUID()/]">
                    <UML:Comment.annotatedElement>
                        <UML:ModelElement xmi.idref="{[t.fullName().nameUUID()/]}"/>
                    </UML:Comment.annotatedElement>
                </UML:Comment>
  [/for]
  [for (a : environment::Attribute | b.eAllContents(environment::Attribute)->select(a | not (a.description = null) and a.description.size() > 0))]
                <UML:Comment name="[a.description/]" xmi.id="[a.description.normalize().nameUUID()/]">
                    <UML:Comment.annotatedElement>
                        <UML:ModelElement xmi.idref="{[a.fullName().nameUUID()/]}"/>
                    </UML:Comment.annotatedElement>
                </UML:Comment>
  [/for]
[/template]

[comment specifique Oracle /]
[template private varchar(e : String)]
  varchar([e/])[/template]