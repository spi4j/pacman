[comment encoding = UTF-8 /]
[module serviceItf('http://www.obeonetwork.org/dsl/environment/3.0.0',
				   'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::commons::common::licence /]
[import fr::pacman::commons::common::utils /]
[import fr::pacman::commons::common::properties /]
[import fr::pacman::commons::common::attributes /]
[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::packages /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::imports /]

[import fr::pacman::entity::api::common::attributes /]
[import fr::pacman::entity::api::common::names /]
[import fr::pacman::entity::api::common::packages /]
[import fr::pacman::entity::api::common::buildClassesEntityApi /]
[import fr::pacman::entity::api::common::serviceutils /]

[import fr::pacman::commons::convention::rule::parameterRule /]
[import fr::pacman::commons::convention::rule::attributeRule /]
[import fr::pacman::commons::convention::rule::methodRule /]
[import fr::pacman::commons::convention::project::surcouche /]


[comment] le Service [/comment]
[template public serviceItf(e : Entity)]
[licence()/]
[let self : OclAny = if not e.oclIsUndefined() then e else 'PACKAGE NOT FOUND FOR SERVICE AND ENTITY NULL' endif]
package [buildPackageServiceApiEntity(e)/];
// [protected ('for imports')]

[comment : Write all required imports. /]
[e.writeImports()/]

// [/protected]

/**
 * Définit le contrat de services spécifiques pour le type : '[buildEntityImplClassName(e)/].
 * @author [getAuthorName()/]
 */
[displayClearUserCodeId ('Annotations Service')/]
// [protected (e.getUserCodeId('Annotations Service'))]
[if useEjb()]
@Local
[/if]
// [/protected]
public interface [buildServiceInterfaceName(e)/] extends [if not e.isNotPersistent()][getClassNameForEntityService_Itf()/]<[genPkType()/], [buildEntityInterfaceName(e)/]> [if isReferentiel(e)], [getClassNameForServiceReferentiel_Itf()/][/if][else]ApplicationService_Itf[/if]
{

	[displayClearUserCodeId ('Methodes ' + buildServiceInterfaceName(e))/]
	// [protected (e.getUserCodeId('Methodes ' + buildServiceInterfaceName(e)))]

[if not e.isNotPersistent()]
[for (r : Reference | e.referencingStar())]
   /**
    * Obtenir la liste d'objets de type '[buildEntityInterfaceName(e)/]' associés à l'instance de type '[buildEntityImplClassName(r.containingType.oclAsType(Entity))/]'.
[comParamInverseIdIn(r)/]
    * @return une liste de [buildEntityImplClassName(e)/] ayant [apply_parameterMethodClassicIn(nameParamInverseId(r))/] = [apply_parameterMethodClassicIn(nameParamInverseId(r))/]
    */
   List<[buildEntityInterfaceName(e)/]> [apply_methodDefault('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(Entity).nameSimpleEntity())/] (final [genPkType()/] [apply_parameterMethodClassicIn(nameParamInverseId(r))/]);

[/for]
[for (r : Reference | e.referencesStarStar())]
	/**
    * Sauvegarde les relations entre '[buildEntityImplClassName(e)/]' et '[nameSimpleEntity(r.referencedType.oclAsType(Entity))/]' pour l'entity.
    * @param [apply_parameterMethodClassicIn('entity')/]
    *           le entity
    * @param [apply_parameterMethodMultiple(r.name.normalize())/]
    *           les relations à ajouter
    */
    void [apply_methodDefault('save ' + r.name.normalize())/] (final [buildEntityInterfaceName(e)/] [apply_parameterMethodClassicIn('entity')/], final List<[buildEntityInterfaceName(r.referencedType.oclAsType(Entity))/]> [apply_parameterMethodMultiple(r.name.normalize())/]);

   /**
    * Obtenir la liste d'objets de type '[buildEntityImplClassName(r.referencedType.oclAsType(Entity)).toUpperFirst()/]' associés à l'instance de type '[buildEntityImplClassName(r.containingType.oclAsType(Entity)).toUpperFirst()/]'.
    * @param [apply_parameterMethodClassicIn(r.containingType.oclAsType(Entity).buildEntityImplClassName())/][namePK_ID()/]
    *           (In)(*) [buildEntityImplClassName(r.containingType.oclAsType(Entity)).toUpperFirst()/].
    * @return une liste de [buildEntityInterfaceName(r.referencedType.oclAsType(Entity))/]
    */
   List<[buildEntityInterfaceName(r.referencedType.oclAsType(Entity))/]> [apply_methodDefault('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(Entity).nameSimpleEntity())/] (final [genPkType()/] [apply_parameterMethodClassicIn(r.containingType.oclAsType(Entity).buildEntityInterfaceName())/][namePK_ID()/]);

	/**
    * Supprime les relations [r.name/] entre '[buildEntityImplClassName(e)/]' et '[nameSimpleEntity(r.referencedType.oclAsType(Entity))/]' pour ce Entity.
    * @param [apply_parameterMethodClassicIn('entity')/]
    *           le Entity
    */
    void [apply_methodDefault('delete ' + r.name.normalize())/] (final [buildEntityInterfaceName(e)/] [apply_parameterMethodClassicIn('entity')/]) ;

[/for]
[/if]

    // [/protected]

}[/let]
[/template]

[template public getImportEntity(e : Entity)]
import [buildPackageBusinessApiEntity(e)/].[e.buildEntityInterfaceName()/];
[/template]

[comment : Write all required imports. /]
[template private writeImports (e : Entity) post(trim())]
[e.initImports()/]
[e.addImport('jakarta.ejb.Local', useEjb())/]
[e.addImport(buildPackagePersistenceApiEntity(e) + '.' + buildEntityInterfaceName(e))/]
[e.addImport(getImportForEntityService_Itf(), not e.isNotPersistent())/]
[e.addImport('fr.spi4j.business.ApplicationService_Itf', e.isNotPersistent())/]
[e.addImport(getImportForServiceReferentiel_Itf(), e.isReferentiel())/]

[comment : List references./]
[for (r : Reference | e.referencingStar())]
	[if not (buildEntityInterfaceName(e).equalsIgnoreCase(buildEntityInterfaceName(r.referencedType.oclAsType(entity::Entity))))]
		[e.addImport(buildPackagePersistenceApiEntity(r.referencedType.oclAsType(entity::Entity)) + '.' + buildEntityInterfaceName(r.referencedType.oclAsType(entity::Entity)))/]
	[/if]
	[if not (buildEntityImplClassName(e).equalsIgnoreCase(buildEntityImplClassName(r.referencedType.oclAsType(Entity))))]
		[e.addImport(buildPackagePersistenceImplementationJdbcEntity(r.referencedType.oclAsType(Entity)) + '.' + buildEntityImplClassName(r.referencedType.oclAsType(entity::Entity)))/]
	[/if]
[/for]

[comment : Liste references. /]
[for (r : Reference | e.referencesStarStar())]
	[e.addImport(buildPackagePersistenceApiEntity(r.referencedType.oclAsType(Entity)) + '.' + buildEntityInterfaceName(r.referencedType.oclAsType(Entity)))/]
[/for]

[e.flushImports()/]
[/template]