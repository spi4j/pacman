[module userBusinessEntity('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::common::names/]

[comment encoding = UTF-8 /]
[template public userBusinessEntity(r : entity::Root)]
  [r.licence()/]
  // CHECKSTYLE:OFF
  package [r.buildPackageBusiness()/]; // NOPMD
  // CHECKSTYLE:ON
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [for (e : entity::Entity | r.eAllContents(entity::Entity))]
      import [e.buildPackageServiceApiEntity()/].[e.buildServiceInterfaceName()/];
    [/for]
    import [r.getImportForUserBusiness_Abs()/];
    import fr.spi4j.exception.Spi4jRuntimeException;
    import [r.getImportForUserPersistence_Abs()/];
    
  [/protected]
  
  /**
   * Classe permettant de centraliser les factories business de l'application.
   * @author [r.getAuthorName()/]
   */
  public class [r.buildAppliUserBusinessEntityGenClassName()/] extends [r.getClassNameForUserBusiness_Abs()/]
  {
  
     /** Singleton. */
     private static [r.buildAppliUserBusinessEntityGenClassName()/] ['singleton'.apply_attributeStatic()/] = new [r.buildAppliUserBusinessEntityGenClassName()/]();
  
     /**
      * Constructeur privé.
      */
     protected [r.buildAppliUserBusinessEntityGenClassName()/] ()
     {
        super();
     }
  
  	// Getter de services Crud
  	[protected (r.getUserCodeId('Getter de services Crud')) startTagPrefix('// ') endTagPrefix('// ')]

     [for (e : entity::Entity | r.eAllContents(entity::Entity))]
       /**
        * Obtenir la façade de services '[e.buildServiceInterfaceName()/]'.
        * @return L'instance désirée.
        */
       public static [e.buildServiceInterfaceName()/] [('get ' + e.buildServiceClassName()).apply_methodDefault()/] ()
       {
          return ['singleton'.apply_attributeStatic()/].getBinding([e.buildServiceInterfaceName()/].class);
       }

     [/for]
   [/protected]
  
     /**
      * @return le ['singleton'.apply_attributeStatic()/] de cette factory
      */
     public static [r.buildAppliUserBusinessEntityGenClassName()/] getSingleton ()
     {
        return ['singleton'.apply_attributeStatic()/];
     }
  
     @Override
     protected [r.getClassNameForUserPersistence_Abs()/] getUserPersistence ()
     {
  [if (r.usePersistence())]
          // dans cette factory de la partie commune entre un client et le serveur
          // on ne référence pas les classes d'implémentations "serveur" des services
          // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
    
          try
          {
             return ([r.getClassNameForUserPersistence_Abs()/]) Class.forName("[r.buildPackagePersistence()/].[r.buildParamPersistenceClassName()/]")
                      .getMethod("['get user persistence'.apply_methodDefault()/]").invoke(null);
          }
          catch (final Exception ['ex'.apply_variableFinal()/])
          {
             // ne devrait jamais arriver grâce à la génération de code
             throw new Spi4jRuntimeException(['ex'.apply_variableFinal()/], ['ex'.apply_variableFinal()/].toString(), "???");
          }
  [else]
    	  	// Pas de persistance pour cette application.
    		// Cette méthode n'a aucunne raison d'être appelée par spi4j.
    	  	return null;
  [/if]
     }
  
     // CHECKSTYLE:OFF
     @Override
     // CHECKSTYLE:ON
     public void initBindings () // NOPMD
     {
         initBindingsEntities();
     }
  
     public void initBindingsEntities () // NOPMD
     {
        // dans cette factory de la partie commune entre un client et le serveur
        // on ne référence pas les classes d'implémentations "serveur" des services
        // pour ne pas avoir d'erreur de compilation (et pour ne pas avoir ClassNotFoundException à l'exécution)
  
     // Bingding correspondant aux Services Crud
     [protected (r.getUserCodeId('Bingding correspondant aux Services Crud')) startTagPrefix('// ') endTagPrefix('// ')]

       [for (e : entity::Entity | r.eAllContents(entity::Entity))]
               final [e.buildServiceInterfaceName()/] [e.buildServiceImplClassName().apply_variableObjectDefault()/] = wrapService([e.buildServiceInterfaceName()/].class, "[e.buildPackageBusinessImplementationServiceEntity()/].[e.buildServiceImplClassName()/]");
               bind([e.buildServiceInterfaceName()/].class, [e.buildServiceImplClassName().apply_variableObjectDefault()/]);

       [/for]
     [/protected]
  
     }
  
  }[/template]