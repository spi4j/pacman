[module DbReferentiel('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::requests::counterQueries/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::classesEntity/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]

[comment encoding = UTF-8 /]
[template public createReferentiel(b : environment::Namespace)]
  [file (b.getServerSourceDir().filename(b.buildPackagePersistenceReferentiel(), b.buildReferentielClassName() + '.java'), overwrite, 'UTF-8')]
    [b.licence()/]
    package [b.buildPackagePersistenceReferentiel()/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      import org.apache.logging.log4j.Logger;
      import org.apache.logging.log4j.LogManager;
      
      import fr.spi4j.Parameters;
      
      import [b.buildPackagePersistence()/].[b.buildParamPersistenceClassName()/];
      
      [for (e : entity::Entity | b.types->select(el | el.oclIsKindOf(entity::Entity)))]
        import [e.buildPackagePersistenceReferentielEntity()/].[e.buildReferentielEntityClassName()/];
      [/for]
      
      [for (it : entity::Entity | b.types->select(el | el.oclIsKindOf(entity::Entity)))]
        [for (r : environment::Reference | it.references)]
          [if (r.navigable)]
            [if (r.isRelationN1())]
              import [r.buildPackagePersistenceReferentielReference()/].[r.buildReferentielReferenceClassName()/];
            [/if]
          [/if]
        [/for]
      [/for]
      
    [/protected]
    
    
    /**
     * Permet d'effectuer le remplissage référentiel du Namespace '[b.name/]'.
     */
    public class [b.buildReferentielClassName()/]
    {
        // CONSTANTES
    	
    	/** Le repertoire des csv, a recuperer via la variable d'environnement [b.getApplicationName()/].dbreferentiel.[b.name/].repcsv */
    	private static final String ['rep csv'.apply_attributeFinalStatic()/] = Parameters.getParameter( "[b.getApplicationName()/].dbreferentiel.[b.name/].repcsv", "" );
    
    	/** Le repertoire des logs, a recuperer via a recuperer via la variable d'environnement [b.getApplicationName()/].dbreferentiel.replogs  */
    	private static final String ['rep logs'.apply_attributeFinalStatic()/] = Parameters.getParameter( "[b.getApplicationName()/].dbreferentiel.[b.name/].replogs", "" );
    
    	/** Le logger  */
        private static final Logger ['LOG'.apply_attributeFinalStatic()/] = LogManager.getLogger( [b.buildReferentielClassName()/].class );
    
       // Constantes [b.buildReferentielClassName()/]
       [protected (b.getUserCodeId('Constantes ' + b.buildReferentielClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    
    
    	// ATTRIBUTS
    
    	/** Le flag indiquant si on commite le traitement */
    	private static boolean ['commit traitement'.apply_attributeStatic()/] = true;
    
       // Attributs [b.buildReferentielClassName()/]
       [protected (b.getUserCodeId('Attributs ' + b.buildReferentielClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    
    
    	// METHODES
    
        /**
        * Obtenir le répertoire où se trouvent les fichiers à importer
        * @return String ['rep csv'.apply_parameterMethodClassicIn()/]
        */
        public static synchronized String ['get rep csv'.apply_methodDefault()/] ()
        {
        	return ['rep csv'.apply_attributeFinalStatic()/];
        }
    
        /**
        * Obtenir le répertoire où se trouvent les fichiers de log
        * @return String ['rep logs'.apply_parameterMethodClassicIn()/]
        */
        public static synchronized String ['get rep logs'.apply_methodDefault()/] ()
        {
        	return ['rep logs'.apply_attributeFinalStatic()/];
        }
    
        /**
        * Obtenir la valeur du flag indiquant si on commite le traitement
        * @return boolean ['rep csv'.apply_parameterMethodClassicIn()/]
        */
        public static synchronized boolean ['get commit traitement'.apply_methodDefault()/] ()
        {
        	return  ['commit traitement'.apply_attributeStatic()/];
        }
    
        /**
        * Set le flag indiquant si on commite le traitement
        * @param boolean ['commit traitement'.apply_parameterMethodClassicIn()/]
        */
        public static synchronized void ['set commit traitement'.apply_methodDefault()/] ( boolean ['commit traitement value'.apply_parameterMethodClassicIn()/] )
        {
        	 ['commit traitement'.apply_attributeStatic()/] = ['commit traitement value'.apply_parameterMethodClassicIn()/];
        }
    
       /**
        * Initialisation du chargement. Debute une transaction et logs d information sur les ressources du programme. 
        */
       public static void ['init traitement'.apply_methodDefault()/] ()
       {
    	  ['LOG'.apply_attributeFinalStatic()/].info( "/******* DEBUT de la transaction du chargement dans [b.buildReferentielClassName()/]  *******/" );
    	  ['LOG'.apply_attributeFinalStatic()/].info( "Nom du repertoire des csv (variable d environment [b.getApplicationName()/].[b.name/].dbreferentiel.repcsv): " + [(b.name + ' referentiel').apply_classDefault()/].['get rep csv'.apply_methodDefault()/]() );
    	  ['LOG'.apply_attributeFinalStatic()/].info( "Nom du repertoire de log (variable d environment [b.getApplicationName()/].[b.name/].dbreferentiel.replogs): " + ['rep logs'.apply_attributeFinalStatic()/] + "\n");
    
    	  [b.buildParamPersistenceClassName()/].getUserPersistence().begin();	 
    	  [b.buildReferentielClassName()/].['set commit traitement'.apply_methodDefault()/](true);
       }
    
       /**
        * Finalisation du chargement. Commit ou rollback une transaction selon l'absence ou la présence d'erreur dans le chargement 
        */
       public static void ['finalize traitement'.apply_methodDefault()/] ()
       {
    	  if ( [b.buildReferentielClassName()/].['get commit traitement'.apply_methodDefault()/]() )
    	  {
           	 [b.buildParamPersistenceClassName()/].getUserPersistence().commit();
    	  	 ['LOG'.apply_attributeFinalStatic()/].info( "/******* FIN de la transaction du chargement dans [b.buildReferentielClassName()/] : COMMIT  *******/" );
    	  }
    	  else
    	  {
    		[b.buildParamPersistenceClassName()/].getUserPersistence().rollback();
    	  	['LOG'.apply_attributeFinalStatic()/].info( "/******* FIN de la transaction du chargement dans [b.buildReferentielClassName()/] : ROLLBACK  *******/" );
    		['referentiel utils'.apply_classDefault()/].['send error mail'.apply_methodDefault()/](
    			"Erreur dans le chargement de referentiel", 
    			"Le chargement du referentiel [b.name/] a généré des erreurs; le détail des erreurs est dans la log du programme."
    		);
    
    	  }
       }
    
    
       /**
        * Executable.
        * @param ['args'.apply_parameterMethodClassicIn()/]
        *           arguments
        * @throws Throwable
        *            exception
        */
       public static synchronized void main ( final String['['/]] ['args'.apply_parameterMethodClassicIn()/] ) throws Throwable
       {
    
    	  /** Debut de la transaction d'import du referentiel */
    	  ['init traitement '.apply_methodDefault()/]();
    
    	  /** Import des entites qui ne sont pas referencees par des relations 0..* ou 1..* */
    [for (it : entity::Entity | b.types->select(el | el.oclIsKindOf(entity::Entity)))]
      [if (not it.hasReferencingStar())]
        	  [it.buildReferentielEntityClassName()/].['charge entity'.apply_methodDefault()/](); 
      [/if]
    [/for]
    
    	  /** Import des entites qui sont referencees par des relations 0..* ou 1..* */
    [for (it : entity::Entity | b.types->select(el | el.oclIsKindOf(entity::Entity)))]
      [if (it.hasReferencingStar())]
        	  [it.buildReferentielEntityClassName()/].['charge entity'.apply_methodDefault()/](); 
      [/if]
    [/for]
    
    	  /** Import des references 0..1 */
    [for (it : entity::Entity | b.types->select(el | el.oclIsKindOf(entity::Entity)))]
      [for (r : environment::Reference | it.references)]
        [if (r.navigable)]
          [if (r.isRelationN1())]
            	  [r.buildReferentielReferenceClassName()/].['maj fk'.apply_methodDefault()/](); 
          [/if]
        [/if]
      [/for]
    [/for]
    
          /** Fin de la transaction d'import du referentiel */
    	  ['finalize traitement '.apply_methodDefault()/]();
    
       }
    
       // Methodes [b.buildReferentielClassName()/]
       [protected (b.getUserCodeId('Methodes ' + b.buildReferentielClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    
    
    }
  [/file]
  
[/template]

[query private isRelationNN(r : environment::Reference) : Boolean = if r.multiplicity = environment::MultiplicityKind::ZERO_STAR or r.multiplicity = environment::MultiplicityKind::ONE_STAR then if not (r.oppositeOf = null) then if r.oppositeOf.multiplicity = environment::MultiplicityKind::ZERO_STAR or r.oppositeOf.multiplicity = environment::MultiplicityKind::ONE_STAR then true else false endif else false endif else false endif/]

[query private isRelationN1(r : environment::Reference) : Boolean = if r.multiplicity = environment::MultiplicityKind::ZERO_ONE or r.multiplicity = environment::MultiplicityKind::ONE then if not (r.oppositeOf = null) then if r.oppositeOf.multiplicity = environment::MultiplicityKind::ZERO_STAR or r.oppositeOf.multiplicity = environment::MultiplicityKind::ONE_STAR then true else false endif else true endif else false endif/]

[query private isRelation1N(r : environment::Reference) : Boolean = if r.multiplicity = environment::MultiplicityKind::ZERO_STAR or r.multiplicity = environment::MultiplicityKind::ONE_STAR then if not (r.oppositeOf = null) then if r.oppositeOf.multiplicity = environment::MultiplicityKind::ZERO_ONE or r.oppositeOf.multiplicity = environment::MultiplicityKind::ONE then true else false endif else true endif else false endif/]