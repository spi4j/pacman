[module referentielReference('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::classesEntity/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public referentielReference(r : environment::Reference, b : environment::Namespace)]
  [r.licence()/]
  package  [r.buildPackagePersistenceReferentielReference()/];
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Date;
    
    [if (r.hasExcludeCriteria() or r.hasIncludeCriteria())]
      import java.util.Collection;
      import org.apache.commons.collections4.MultiMap;
    [/if]
    import org.apache.logging.log4j.Logger;
    import org.apache.logging.log4j.LogManager;
    
    import fr.spi4j.persistence.dao.Operator_Enum;
    import fr.spi4j.persistence.dao.TableCriteria;
    
    import fr.spi4j.exception.Spi4jValidationException;
    
    import [r.buildPackagePersistenceReferentiel()/].[b.buildReferentielClassName()/];
    import [r.buildPackagePersistence()/].[r.buildParamPersistenceClassName()/];
    
    import [r.buildPackagePersistenceReferentiel()/].ReferentielUtils;
    
    import [r.containingType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.containingType.oclAsType(entity::Entity).buildDaoInterfaceName()/];
    import [r.containingType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.containingType.oclAsType(entity::Entity).buildEntityInterfaceName()/];
    import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/];
    import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.referencedType.oclAsType(entity::Entity).buildDaoInterfaceName()/];
    import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/];
    import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/];
    
  [/protected]
  
  [r.comClass(r.roleReferentielReference())/]
  public final class [r.buildReferentielReferenceClassName()/] 
  {
  
  	// CONSTANTES
  
  	/** Le formater des dates pour les noms des fichiers d erreur */
  	private static final DateFormat ['date format err'.apply_attributeFinalStatic()/] = new SimpleDateFormat( "yyyyMMdd" );
  
  	/** Le logger de la classe */
      private static final Logger ['LOG'.apply_attributeFinalStatic()/] = LogManager.getLogger( [r.buildReferentielReferenceClassName()/].class );
  
  	/** Le dao de l'entite [r.containingType.oclAsType(entity::Entity).name/] */
      private static final [r.containingType.oclAsType(entity::Entity).buildDaoInterfaceName()/] [(r.containingType.oclAsType(entity::Entity).name + ' dao').apply_attributeFinalStatic()/] = [r.buildParamPersistenceClassName()/].getUserPersistence().[('get ' + r.containingType.oclAsType(entity::Entity).buildDaoName()).apply_methodDefault()/]();
  
  	/** Le dao de l'entite [r.referencedType.oclAsType(entity::Entity).name/] */
      private static final [r.referencedType.oclAsType(entity::Entity).buildDaoInterfaceName()/] [(r.referencedType.oclAsType(entity::Entity).name + ' dao').apply_attributeFinalStatic()/] = [r.buildParamPersistenceClassName()/].getUserPersistence().[('get ' + r.referencedType.oclAsType(entity::Entity).buildDaoName()).apply_methodDefault()/]();
  
  
  	// ATTRIBUTS
  
      [('Attributs ' + r.buildReferentielReferenceClassName()).displayClearUserCodeId()/]
      [protected (r.getUserCodeId('Attributs ' + r.buildReferentielReferenceClassName())) startTagPrefix('// ') endTagPrefix('// ')]

      [/protected]
  
  
  	// METHODES  
  
      /**
       * Constructeur.
       */
  	private [r.buildReferentielReferenceClassName()/] ()
  	{
  	}
  
     /**
      * Maj des relations de [r.containingType.name/] vers  [r.referencedType.name/].
      */
     public static void ['maj fk'.apply_methodDefault()/] ()
     {
  	  /** Initialisations, Log de début de traitement */	
   	  long  ['nb lignes traitees'.apply_variableDefault()/] = 0;
  	  long  ['nb lignes filtrees'.apply_variableDefault()/] = 0;
   	  long  ['nb lignes updates'.apply_variableDefault()/] = 0;
   	  long  ['nb lignes cle vide'.apply_variableDefault()/] = 0;
   	  long  ['nb lignes cle non trouvee'.apply_variableDefault()/] = 0;
  	  [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/] [(r.referencedType.name + 'Column' + r.containingType.name).apply_variableDefault()/] = null;
  	  [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/] [(r.containingType.name + 'Column' + r.containingType.name).apply_variableDefault()/] = null;
  	  List <String> ['liste cle non trouvee'.apply_variableDefault()/] = new ArrayList <String> ();
  	  String ['nom col fk critere'.apply_variableDefault()/] = "[r.fkCritere()/]";
  [for (att : environment::Attribute | r.referencedType.oclAsType(entity::Entity).attributes)]
    [if (att.physicalName().equalsIgnoreCase(r.fkCritere()))]
      	  [(r.referencedType.name + 'Column' + r.containingType.name).apply_variableDefault()/] = [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[att.nameSimpleProperty().apply_attributeEnum()/];
    [/if]
  [/for]
  [for (att : environment::Attribute | r.containingType.oclAsType(entity::Entity).attributes)]
    [if (att.physicalName().equalsIgnoreCase(r.fkCritere()))]
      	  [(r.containingType.name + 'Column' + r.containingType.name).apply_variableDefault()/] = [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[att.nameSimpleProperty().apply_attributeEnum()/];
    [/if]
  [/for]
        Date ['today'.apply_variableDefault()/] = new Date();
  	  String ['nom fic erreur fk'.apply_variableDefault()/] = ['date format err'.apply_attributeFinalStatic()/].format(['today'.apply_variableDefault()/]) + "_[('referentiel Reference ' + r.containingType.name + ' to ' + r.referencedType.name).apply_methodDefault() + '.key.err'/]";
  [if (r.hasExcludeCriteria())]
    
    	  /** Ajout d'un exclude criteria : [r.excludeCriteria()/] */
    	  String ['exclude criteria'.apply_variableDefault()/] = "[r.excludeCriteria()/]";
    	  MultiMap <String,String> ['map exclude criteria'.apply_variableDefault()/] = ['referentiel utils'.apply_classDefault()/].['split filter criteria'.apply_methodDefault()/] (['exclude criteria'.apply_variableDefault()/]);
  [/if]
  [if (r.hasIncludeCriteria())]
    
    	  /** Ajout d'un include criteria : [r.includeCriteria()/] */
    	  String ['include criteria'.apply_variableDefault()/] = "[r.includeCriteria()/]";
    	  MultiMap <String,String> ['map include criteria'.apply_variableDefault()/] = ['referentiel utils'.apply_classDefault()/].['split filter criteria'.apply_methodDefault()/] (['include criteria'.apply_variableDefault()/]);
  [/if]
  
  	  ['LOG'.apply_attributeFinalStatic()/].info( "/** DEBUT Import Referentiel Relation [r.name/], update de [r.containingType.name/] depuis [r.referencedType.name/] **/" );
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation de [r.containingType.name/] depuis [r.referencedType.name/], nom du fkCritere: " + ['nom col fk critere'.apply_variableDefault()/] );
  
     	  [('PreTraitement ' + r.buildReferentielReferenceClassName()).displayClearUserCodeId()/]
     	  [protected (r.getUserCodeId('PreTraitement ' + r.buildReferentielReferenceClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     	  [/protected]
  
  	  try
        {	
  		/** Traitement uniquement si le Fk Critere est correctement renseigné */
  	  	if ( ( [(r.referencedType.name + 'Column' + r.containingType.name).apply_variableDefault()/] != null ) && ( [(r.containingType.name + 'Column' + r.containingType.name).apply_variableDefault()/]  != null ) )
  		{
  		  /** On parcourt les [r.containingType.oclAsType(entity::Entity).name/] pour les mettre à jour */
  		  final List <[r.containingType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> ['all entities to update'.apply_variableFinal()/] = [(r.containingType.name + ' dao').apply_attributeFinalStatic()/].findAll();
            for ( [r.containingType.oclAsType(entity::Entity).buildEntityInterfaceName()/] ['entity to update'.apply_variableDefault()/] : ['all entities to update'.apply_variableFinal()/] )
  		  {
  	      	final TableCriteria <[r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/]> [('tableCriteria ' + r.referencedType.name).apply_variableFinal()/] = new TableCriteria <> ( "find by criteria en cherchant sur [r.referencedType.name/]" );
      	    /** on applique un order by date desc sur le table criteria pour que la premiere ligne lue soit la plus recente */
  			[('tableCriteria ' + r.referencedType.name).apply_variableFinal()/].addOrderByDesc( [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].['date de debut'.apply_attributeEnum()/] );
  
  			/** on positionne la foreign keys selon l'attribut correspondant au fkcritere*/ 				
  			String ['value code'.apply_variableFinal()/] = null;
  [for (att : environment::Attribute | r.referencedType.oclAsType(entity::Entity).attributes)]
    [if (att.physicalName().equalsIgnoreCase(r.fkCritere()))]
      		    ['value code'.apply_variableFinal()/] =  ['entity to update'.apply_variableDefault()/].[att.nameSimpleProperty().apply_methodGet()/]() ;
    [/if]
  [/for]
  
  			/**Ajout du critere de recherche sur le champ fkcriteria avant le find byCriteria */
         		[('tableCriteria ' + r.referencedType.name).apply_variableFinal()/].addCriteria( [(r.referencedType.name + 'Column' + r.containingType.name).apply_variableDefault()/], Operator_Enum.equals, ['value code'.apply_variableFinal()/] );
  
  [if (r.hasExcludeCriteria() or r.hasIncludeCriteria())]
    			/** par défaut, pas de filtre sur la ligne traitee */
    		  	boolean ['filter enregistrement'.apply_variableDefault()/] = false;
    
    [for (a : environment::Attribute | r.containingType.oclAsType(entity::Entity).attributesNoPk())]
      [if (r.hasExcludeCriteria())]
        [if (r.excludeCriteria().contains(a.physicalName().toString()))]
          			/** filtrage conditionnel de la ligne selon un exclude criteria */
          		 	@SuppressWarnings("unchecked")	
          		  	Collection <String> [('values exclude ' + a.nameSimpleProperty()).apply_variableDefault()/] = (Collection <String>) ['map exclude criteria'.apply_variableDefault()/].get( "[a.physicalName()/]" );
          		  	if ( [('values exclude ' + a.nameSimpleProperty()).apply_variableDefault()/].contains( ['entity to update'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]() ) ) 
          		  	{
          		  		['filter enregistrement'.apply_variableDefault()/] = true;
          		  	}	
        [/if]
      [/if]
      [if (r.hasIncludeCriteria())]
        [if (r.includeCriteria().contains(a.physicalName().toString()))]
          			/** filtrage conditionnel de la ligne selon un include criteria */
          		  	@SuppressWarnings("unchecked")	
          		  	Collection <String> [('values include ' + a.nameSimpleProperty()).apply_variableDefault()/] = (Collection <String>) ['map include criteria'.apply_variableDefault()/].get( "[a.physicalName()/]" );
          		  	if ( ![('values include ' + a.nameSimpleProperty()).apply_variableDefault()/].contains( ['entity to update'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodGet()/]() ) ) 
          		  	{
          		  		['filter enregistrement'.apply_variableDefault()/] = true;
          		  	}	
        [/if]
      [/if]
    [/for]
  [/if]
  
     		  	[('PreUpdate ' + r.buildReferentielReferenceClassName()).displayClearUserCodeId()/]
     		  	[protected (r.getUserCodeId('PreUpdate ' + r.buildReferentielReferenceClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     		  	[/protected]
  
            	/** Maj de la foreign key de [r.containingType.name/] vers  [r.referencedType.name/] */
  			if ( !"".equals(['value code'.apply_variableFinal()/]) )
  			{
  [if (r.hasExcludeCriteria() or r.hasIncludeCriteria())]
    				/** si la ligne est filtree, on ne met pas à jour la foreign key */
    				if (['filter enregistrement'.apply_variableDefault()/] )
    				{
    					['nb lignes filtrees'.apply_variableDefault()/] ++;
    				}
    				/** si la ligne n est pas filtree, on met à jour la foreign key */
    				else
    				{
  [/if]
  
  	        		final List <[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> [('list fk' + r.referencedType.name).apply_variableFinal()/] =  [(r.referencedType.name + ' dao').apply_attributeFinalStatic()/].findByCriteria( [('tableCriteria ' + r.referencedType.name).apply_variableFinal()/] );		  	
  					/** Si on trouve au mois une ligne dans l'entite referencee, on update la fk avec l'id de la l'enregistrement trouve*/
  					if ( [('list fk' + r.referencedType.name).apply_variableFinal()/].size() > 0) 
  					{
          				['entity to update'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodSet()/]( [('list fk' + r.referencedType.name).apply_variableFinal()/].get(0).getId() );
  						[(r.containingType.oclAsType(entity::Entity).name + ' dao').apply_attributeFinalStatic()/].update( ['entity to update'.apply_variableDefault()/]);
  						['nb lignes updates'.apply_variableDefault()/] ++;
  		  			}
  					/** Si on ne trouve pas de ligne dans l'entite referencee, on ajoute la ligne dans la liste de cles non trouvees*/
  					else
  					{
  						['liste cle non trouvee'.apply_variableDefault()/].add( ['value code'.apply_variableFinal()/] + "; " + ['entity to update'.apply_variableDefault()/] );
  						['nb lignes cle non trouvee'.apply_variableDefault()/] ++;
  					}
  [if (r.hasExcludeCriteria() or r.hasIncludeCriteria())]
    				}
  [/if]
  			}
  			else
  			{
  				['nb lignes cle vide'.apply_variableDefault()/] ++;
  			}
  		    ['nb lignes traitees'.apply_variableDefault()/] ++;
  
     		    [('PostUpdate ' + r.buildReferentielReferenceClassName()).displayClearUserCodeId()/]
     		    [protected (r.getUserCodeId('PostUpdate ' + r.buildReferentielReferenceClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     		    [/protected]
  
   		  }
  	    }
          else
          {
  		  /** Envoi d'une exception si le fkCritere est mal renseigné */	
  		  throw new Spi4jValidationException( "Metadata FK_CRITERE mal renseignée dans la relation de [r.containingType.name/] vers  [r.referencedType.name/]" );
  	    }
  	  }
  	  /** En cas d erreur, on affiche dans la log, et on positionne le flag de transaction à rollback */
        catch (Exception  ['exception'.apply_variableDefault()/])
        {
  		['LOG'.apply_attributeFinalStatic()/].error ( ['exception'.apply_variableDefault()/] );
  		[b.buildReferentielClassName()/].['set commit traitement'.apply_methodDefault()/](false);	  
  	  }
  
        /** Affichage des count en fin de traitement*/
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/],  nombre de relations traitees: " + ['nb lignes traitees'.apply_variableDefault()/] );
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/],  nombre de ligne(s) filtree(s): " + ['nb lignes filtrees'.apply_variableDefault()/] );
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/],  nombre de relations updatees: " + ['nb lignes updates'.apply_variableDefault()/] );
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/],  nombre de relations cle vide: " + ['nb lignes cle vide'.apply_variableDefault()/] );
  	  ['LOG'.apply_attributeFinalStatic()/].info( "Import Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/],  nombre de relations cle non trouvee: " + ['nb lignes cle non trouvee'.apply_variableDefault()/] );
  
  	  /** Remplissage du fichier des reference non trouvees, affichage dans la log */	
  	  if ( ['liste cle non trouvee'.apply_variableDefault()/].size() > 0 )
        {
  		 String ['entete fichier rejet'.apply_variableDefault()/] = "Colonne [r.fkCritere()/]; Entite [r.containingType.name/]";
  		 ['referentiel utils'.apply_classDefault()/].['store list'.apply_methodDefault()/] ( ['entete fichier rejet'.apply_variableDefault()/] ,  ['liste cle non trouvee'.apply_variableDefault()/], [(r.ancestors(environment::Namespace)->collect(temp1 | temp1.oclAsType(environment::Namespace))->collect(temp2 | temp2.name) + ' referentiel').apply_classDefault()/].['get rep logs'.apply_methodDefault()/]() + ['nom fic erreur fk'.apply_variableDefault()/] );
  		 ['LOG'.apply_attributeFinalStatic()/].error ( "Présence de reference cle non trouvee; Détail dans le fichier " + [(r.ancestors(environment::Namespace)->collect(temp3 | temp3.oclAsType(environment::Namespace))->collect(temp4 | temp4.name) + ' referentiel').apply_classDefault()/].['get rep logs'.apply_methodDefault()/]() + ['nom fic erreur fk'.apply_variableDefault()/] );
  		 [b.buildReferentielClassName()/].['set commit traitement'.apply_methodDefault()/](false);
  	  }		
  
  	  /** Log de fin du traitement */
  	  ['LOG'.apply_attributeFinalStatic()/].info( "/** FIN Import Referentiel Relation [r.containingType.name/], update de [r.containingType.name/] depuis [r.referencedType.name/]  **/\n" );
  
     	  [('PostTraitement ' + r.buildReferentielReferenceClassName()).displayClearUserCodeId()/]
     	  [protected (r.getUserCodeId(r.getUserCodeId('PostTraitement ' + r.buildReferentielReferenceClassName()))) startTagPrefix('// ') endTagPrefix('// ')]

     	  [/protected]
  
     }
  
     [protected ('Methodes ' + r.buildReferentielReferenceClassName()) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
  }[/template]

[query public roleReferentielReference(r : environment::Reference) : String = 'Classe de maj des foreign key dans la reference ' + r.containingType.name + ' vers ' + r.referencedType.name/]
