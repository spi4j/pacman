[comment encoding = UTF-8 /]
[module buildClassesEntityApi('http://www.obeonetwork.org/dsl/entity/3.0.0',
                              'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes /]
[import fr::pacman::commons::common::names /]
[import fr::pacman::commons::common::utils /]

[import fr::pacman::commons::convention::rule::classRule /]
[import fr::pacman::entity::api::common::names /]

[**
 * Paramétrage début
*/]

[query public buildEntityColumnEnumName(e : Entity) : String =
apply_classEnum(nameSimpleEntity(e) + ' columns')
 /]

[query public buildReferenceColumnEnumName(r : Reference) : String =
apply_classEnum(nameSimpleReference(r) + ' columns')
 /]

[query public buildDaoInterfaceName(e : Entity) : String =
apply_classInterface(nameSimpleEntity(e) + ' dao')
 /]

[query public buildReferenceDaoInterfaceName(r : Reference) : String =
apply_classInterface(nameSimpleReference(r) + ' dao')
 /]

[query public buildDaoName(e : Entity) : String =
apply_classDefault(nameSimpleEntity(e) + ' dao')
 /]

[query public buildDaoImplClassName(e : Entity) : String =
apply_classImplem(nameSimpleEntity(e) + ' dao')
 /]

[query public buildReferenceImplDaoClassName(r : Reference) : String =
apply_classImplem(nameSimpleReference(r) + ' dao')
 /]

[query public buildDaoTestClassName(e : Entity) : String =
apply_classTest(e.buildDaoName())
 /]

[query public buildH2DatabaseHelperClassName(any : OclAny) : String =
apply_classDefault(getApplicationName() + ' h2 database helper')
 /]

[query public buildEntityInterfaceName(e : Entity) : String =
apply_classInterface(nameSimpleEntity(e) + ' entity')
 /]

[query public buildReferenceEntityInterfaceName(r : Reference) : String =
apply_classInterface(nameSimpleReference(r)  + ' entity')
 /]

[query public buildEntityName(e : Entity) : String =
apply_classDefault(nameSimpleEntity(e) + ' entity')
 /]

[query public buildReferentielEntityClassName(e : Entity) : String =
apply_classDefault('referentiel entity' + nameSimpleEntity(e) )
 /]

[query public buildReferentielReferenceClassName(r : Reference) : String =
apply_classDefault('referentiel reference' +   r.containingType.name + ' to ' + r.referencedType.name )
 /]

[query public buildReferentielClassName(b : environment::Namespace) : String =
apply_classDefault(b.name + ' referentiel ' )
 /]


[**
 * Paramétrage fin
*/]

[query private hasPhysicalName(p : Property) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{p, 'PHYSICAL_NAME', false}) <> null
/]

[query private hasPhysicalName(r : Reference) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{r, 'PHYSICAL_NAME', false}) <> null
/]

[query private hasPhysicalName(e : Entity) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{e, 'PHYSICAL_NAME', false}) <> null
/]

[query public hasPhysicalShortName(any : OclAny) : Boolean =
    getAnnotation_PHYSICAL_SHORT_NAME(any) <> null
/]

[query public physicalShortName(any : OclAny) : String =
    getAnnotation_PHYSICAL_SHORT_NAME(any)
/]

[comment Query pour savoir s'il y a une annotation 'PHYSICAL_SHORT_NAME' de manière non récursive /]
[query private getAnnotation_PHYSICAL_SHORT_NAME(p_entityOuReference : OclAny) : String =
    invoke('fr.pacman.commons.services.AnnotationUtils', 'getAnnotation_PHYSICAL_SHORT_NAME(org.obeonetwork.dsl.environment.ObeoDSMObject, boolean)', Sequence{p_entityOuReference, false})
/]

[query public physicalName(e : Entity) : String =
if hasPhysicalName(e) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{e, 'PHYSICAL_NAME', false})
else
    e.name.sanitize().toUpper()
endif
/]

[query public physicalName(r : Reference) : String =
if hasPhysicalName(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'PHYSICAL_NAME', false})
else
     physicalName(r.referencedType.oclAsType(entity::Entity)).first(maxHalfColumnReferenceSize())
endif
/]

[query public physicalName(p : Property) : String =
if hasPhysicalName(p) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{p, 'PHYSICAL_NAME', false})
else
    p.name.sanitize().toUpper()
endif
/]

[query public physicalName(r : Reference, compteur : Integer) : String =
if hasPhysicalName(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'PHYSICAL_NAME', false})
else
     physicalName(r.referencedType.oclAsType(entity::Entity)).first(maxHalfColumnReferenceSize()) + '_' + compteur
endif
/]

[comment : On ajoute une securite supplementaire sur _id pour les noms des references avec .buildSimpleReferenceName() /]
[comment : Comme l'ID n'est pas present dans la vue physique, cela permet de s'assurer des erreurs de l'utilisateur /]
[comment : qui a oublie de rajouter _ID a la fin de la refence pour la cle etrangere. /]
[query public physicalNameId(r : Reference) : String =
     r.physicalName().buildSimpleReferenceName()
/]

[query public physicalNameId(r : Reference, compteur : Integer) : String =
     r.physicalName(compteur).buildSimpleReferenceName()
/]

[query public physicalNameReferencingId(r : Reference) : String =
     physicalNameReferencing(r).buildSimpleReferenceName()
/]

[query public physicalNameReferencingId(r : Reference, compteur : Integer) : String =
     physicalNameReferencing(r,compteur).buildSimpleReferenceName()
/]

[query public physicalNameReferencing(r : Reference) : String =
if hasPhysicalName(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'PHYSICAL_NAME', false})
else
     physicalName(r.containingType.oclAsType(entity::Entity)).first(maxHalfColumnReferenceSize())
endif
/]

[query public physicalNameReferencing(r : Reference, compteur : Integer) : String =
if hasPhysicalName(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'PHYSICAL_NAME', false})
else
     physicalName(r.containingType.oclAsType(entity::Entity)).first(maxHalfColumnReferenceSize()) + '_' + compteur
endif
/]

[query public physicalNameJointure(r : Reference) : String =
if hasPhysicalName(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'PHYSICAL_NAME', false})
else
    physicalName(r.containingType.oclAsType(entity::Entity)) +  r.name.toUpper()
endif
/]

[query public checkConstraint(a : Attribute) : String =
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{a, 'PHYSICAL_CHECK', false})
/]

[query public hasCheckConstraint(a : Attribute) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{a, 'PHYSICAL_CHECK', false}) <> null
/]

[query public uniqueIndex(e : Entity) : String =
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{e, 'PHYSICAL_UNIQUE', false})
/]

[query public hasUniqueIndex(e : Entity) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{e, 'PHYSICAL_UNIQUE', false}) <> null
/]

[query public uniqueIndex(a : Attribute) : String =
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{a, 'PHYSICAL_UNIQUE', false})
/]

[query public isUniqueIndex(a : Attribute) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{a, 'PHYSICAL_UNIQUE', false}) <> null
/]

[query public defaultValue(a : Attribute) : String =
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{a, 'PHYSICAL_DEFAULT', false})
/]

[query public hasDefaultValue(a : Attribute) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{a, 'PHYSICAL_DEFAULT', false}) <> null
/]

[comment]ENTITY : Teste si une propriete (attribut ou référence) est obligatoire[/comment]
[query public isMandatory(p : Property) : Boolean =
invoke('fr.pacman.commons.services.MandatoryUtils', 'isMandatoryEntity(org.obeonetwork.dsl.environment.Property)', Sequence{p})
/]

[comment]STRING : Teste si une liste de proprietes dans une annotation est obligatoire[/comment]
[query public isMandatory(e : Entity, s : String) : Boolean = 
invoke('fr.pacman.commons.services.MandatoryUtils', 'isMandatoryAnnotationProperties(org.obeonetwork.dsl.entity.Entity, java.lang.String)', Sequence{e, s})
/]

[query public buildServiceTestClassName(e : Entity) : String =
 e.apply_classTest(nameSimpleEntity(e) + ' service')
 /]
 
 [query private hasFkCritere(r : Reference) : Boolean =
invoke('fr.pacman.commons.services.AnnotationUtils',
    'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
    Sequence{r, 'FK_CRITERE', false}) <> null
/]

[query public fkCritere(r : Reference) : String =
if hasFkCritere(r) then
    invoke('fr.pacman.commons.services.AnnotationUtils',
        'getAnnotationBody(org.obeonetwork.dsl.environment.ObeoDSMObject, java.lang.String, boolean)',
        Sequence{r, 'FK_CRITERE', false})
else
''
endif
/]

[query private maxHalfRelationNameSize(any : OclAny) : Integer = 14 /]
[query private maxHalfColumnReferenceSize(any : OclAny) : Integer = 14 /]