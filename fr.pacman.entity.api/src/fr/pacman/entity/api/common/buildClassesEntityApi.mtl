[module buildClassesEntityApi('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::commons::services::AnnotationUtils/]
[import fr::pacman::commons::services::MandatoryUtils/]

[comment encoding = UTF-8 /]
[**
 * Paramétrage début
*/]
[query public buildEntityColumnEnumName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' columns').apply_classEnum()/]

[query public buildReferenceColumnEnumName(r : environment::Reference) : String = (r.nameSimpleReference() + ' columns').apply_classEnum()/]

[query public buildDaoInterfaceName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' dao').apply_classInterface()/]

[query public buildReferenceDaoInterfaceName(r : environment::Reference) : String = (r.nameSimpleReference() + ' dao').apply_classInterface()/]

[query public buildDaoName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' dao').apply_classDefault()/]

[query public buildDaoImplClassName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' dao').apply_classImplem()/]

[query public buildReferenceImplDaoClassName(r : environment::Reference) : String = (r.nameSimpleReference() + ' dao').apply_classImplem()/]

[query public buildDaoTestClassName(e : entity::Entity) : String = e.buildDaoName().apply_classTest()/]

[query public buildH2DatabaseHelperClassName(any : ecore::EObject) : String = (any.getApplicationName() + ' h2 database helper').apply_classDefault()/]

[query public buildEntityInterfaceName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' entity').apply_classInterface()/]

[query public buildReferenceEntityInterfaceName(r : environment::Reference) : String = (r.nameSimpleReference() + ' entity').apply_classInterface()/]

[query public buildEntityName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' entity').apply_classDefault()/]

[query public buildReferentielEntityClassName(e : entity::Entity) : String = ('referentiel entity' + e.nameSimpleEntity()).apply_classDefault()/]

[query public buildReferentielReferenceClassName(r : environment::Reference) : String = ('referentiel reference' + r.containingType.name + ' to ' + r.referencedType.name).apply_classDefault()/]

[query public buildReferentielClassName(b : environment::Namespace) : String = (b.name + ' referentiel ').apply_classDefault()/]

[**
 * Paramétrage fin
*/]
[query private hasPhysicalName(p : environment::Property) : Boolean = p.getAnnotationBody('PHYSICAL_NAME', false) <> null/]

[query private hasPhysicalName(r : environment::Reference) : Boolean = r.getAnnotationBody('PHYSICAL_NAME', false) <> null/]

[query private hasPhysicalName(e : entity::Entity) : Boolean = e.getAnnotationBody('PHYSICAL_NAME', false) <> null/]

[query public hasPhysicalShortName(any : ecore::EObject) : Boolean = any.getAnnotation_PHYSICAL_SHORT_NAME() <> null/]

[query public physicalShortName(any : ecore::EObject) : String = any.getAnnotation_PHYSICAL_SHORT_NAME()/]

[comment Query pour savoir s'il y a une annotation 'PHYSICAL_SHORT_NAME' de manière non récursive /]
[query private getAnnotation_PHYSICAL_SHORT_NAME(p_entityOuReference : ecore::EObject) : String = p_entityOuReference.getAnnotation_PHYSICAL_SHORT_NAME(false)/]

[query public physicalName(e : entity::Entity) : String = if e.hasPhysicalName() then e.getAnnotationBody('PHYSICAL_NAME', false) else e.name.sanitize().toUpper() endif/]

[query public physicalName(r : environment::Reference) : String = if r.hasPhysicalName() then r.getAnnotationBody('PHYSICAL_NAME', false) else r.referencedType.oclAsType(entity::Entity).physicalName().first(r.maxHalfColumnReferenceSize()) endif/]

[query public physicalName(p : environment::Property) : String = if p.hasPhysicalName() then p.getAnnotationBody('PHYSICAL_NAME', false) else p.name.sanitize().toUpper() endif/]

[query public physicalName(r : environment::Reference, compteur : Integer) : String = if r.hasPhysicalName() then r.getAnnotationBody('PHYSICAL_NAME', false) else r.referencedType.oclAsType(entity::Entity).physicalName().first(r.maxHalfColumnReferenceSize()) + '_' + compteur endif/]

[query public physicalNameId(r : environment::Reference) : String = r.physicalName() + r.nameSQL_REF_ID()/]

[query public physicalNameId(r : environment::Reference, compteur : Integer) : String = r.physicalName(compteur) + r.nameSQL_REF_ID()/]

[query public physicalNameReferencing(r : environment::Reference) : String = if r.hasPhysicalName() then r.getAnnotationBody('PHYSICAL_NAME', false) else r.containingType.oclAsType(entity::Entity).physicalName().first(r.maxHalfColumnReferenceSize()) endif/]

[query public physicalNameReferencing(r : environment::Reference, compteur : Integer) : String = if r.hasPhysicalName() then r.getAnnotationBody('PHYSICAL_NAME', false) else r.containingType.oclAsType(entity::Entity).physicalName().first(r.maxHalfColumnReferenceSize()) + '_' + compteur endif/]

[query public physicalNameReferencingId(r : environment::Reference) : String = r.physicalNameReferencing() + r.nameSQL_REF_ID()/]

[query public physicalNameReferencingId(r : environment::Reference, compteur : Integer) : String = r.physicalNameReferencing(compteur) + r.nameSQL_REF_ID()/]

[query public physicalNameJointure(r : environment::Reference) : String = if r.hasPhysicalName() then r.getAnnotationBody('PHYSICAL_NAME', false) else r.containingType.oclAsType(entity::Entity).physicalName() + r.name.toUpper() endif/]

[query public checkConstraint(a : environment::Attribute) : String = a.getAnnotationBody('PHYSICAL_CHECK', false)/]

[query public hasCheckConstraint(a : environment::Attribute) : Boolean = a.getAnnotationBody('PHYSICAL_CHECK', false) <> null/]

[query public uniqueIndex(e : entity::Entity) : String = e.getAnnotationBody('PHYSICAL_UNIQUE', false)/]

[query public hasUniqueIndex(e : entity::Entity) : Boolean = e.getAnnotationBody('PHYSICAL_UNIQUE', false) <> null/]

[query public uniqueIndex(a : environment::Attribute) : String = a.getAnnotationBody('PHYSICAL_UNIQUE', false)/]

[query public isUniqueIndex(a : environment::Attribute) : Boolean = a.getAnnotationBody('PHYSICAL_UNIQUE', false) <> null/]

[query public defaultValue(a : environment::Attribute) : String = a.getAnnotationBody('PHYSICAL_DEFAULT', false)/]

[query public hasDefaultValue(a : environment::Attribute) : Boolean = a.getAnnotationBody('PHYSICAL_DEFAULT', false) <> null/]

[comment NTITY : Teste si une propriete (attribut ou référence) est obligatoire/]
[query public isMandatory(p : environment::Property) : Boolean = p.isMandatoryEntity()/]

[comment TRING : Teste si une liste de proprietes dans une annotation est obligatoire/]
[query public isMandatory(e : entity::Entity, s : String) : Boolean = e.isMandatoryAnnotationProperties(s)/]

[query public buildServiceTestClassName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' service').apply_classTest()/]

[query private hasFkCritere(r : environment::Reference) : Boolean = r.getAnnotationBody('FK_CRITERE', false) <> null/]

[query public fkCritere(r : environment::Reference) : String = if r.hasFkCritere() then r.getAnnotationBody('FK_CRITERE', false) else '' endif/]

[query private maxHalfRelationNameSize(any : ecore::EObject) : Integer = 14/]

[query private maxHalfColumnReferenceSize(any : ecore::EObject) : Integer = 14/]