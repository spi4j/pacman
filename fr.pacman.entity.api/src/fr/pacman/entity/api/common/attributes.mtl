[module attributes('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::services::EntityFromDtoUtils/]
[import fr::pacman::commons::services::EnumerationUtils/]

[comment encoding = UTF-8 /]
[**
 * ******************
 * Paramétrage Début
*/]
[template public getProperty(a : environment::Attribute) post(self.trim())]
  private [a.getTypeAndName()/][/template]

[template public getProperty(r : environment::Reference) post(self.trim())]
  private [r.getTypeAndName()/][/template]

[template public getPropertyInverse(r : environment::Reference) post(self.trim())]
  private [r.getTypeAndNameInverse()/][/template]

[template public getTypeAndName(a : environment::Attribute) post(self.trim())]
  [a.genPropertyType()/] [a.nameSimpleProperty().apply_attributeDefault()/][/template]

[template public getTypeAndName(r : environment::Reference) post(self.trim())]
  [r.genPropertyType()/] [r.nameSimpleProperty().apply_attributeDefault()/][/template]

[template public getTypeAndNameInverse(r : environment::Reference) post(self.trim())]
  [r.genPropertyType()/] [r.nameSimplePropertyInverse().apply_attributeDefault()/][r.namePK_ID()/][/template]

[template public getRefListe(r : environment::Reference)]
  private List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> [r.name.toLowerFirst().apply_attributeMultiple()/];[/template]

[**
 * ******************
 * Paramétrage fin
*/]
[template public genPropertyTypeOrPK(a : environment::Attribute)]
  [if (a.isIdentifier)]
    [a.genPkType()/]
  [elseif (a.type = null)]
    String
  [else][a.type.genTypeName()/][/if]
[/template]

[template public genPropertyType(a : environment::Attribute) post(self.trim())]
  [if (a.isMultiple())]
    List<[a.genPropertyTypeOrPK()/]>
  [else]
    [a.genPropertyTypeOrPK()/]
  [/if]
[/template]

[template public genPropertyTypeNoGenerics(a : environment::Attribute) post(self.trim())]
  [a.genPropertyType()/][/template]

[comment la multiplicité n'est pas gérée car les ref* sont des ref qui pointent vers l'entité /]
[template public genPropertyType(r : environment::Reference) post(self.trim())]
  [r.genFkType()/][/template]

[template public mandatory(p : environment::Property)]
  [if (p.isMandatory())]true[else]false[/if][/template]

[comment : Placé ici car concerne la récupération de l'attribut xtopsup. /]
[template public completeXtopSupValue(e : entity::Entity, columnProp : String)]
  [if ('xtopsup'.equalsIgnoreCase(e.get_nameColumn(columnProp)))].get_value()[/if][/template]

[comment les attributs d'une entité qui ne sont pas des clé primaires /]
[query public attributesNoPk(e : entity::Entity) : OrderedSet(environment::Attribute) = e.attributes->select(a | not a.isIdentifier and not a.isComputed())->asOrderedSet()/]

[comment les attributs d'une entité qui ne sont pas des clé primaires /]
[query public attributesIncludingComputedNoPk(e : entity::Entity) : OrderedSet(environment::Attribute) = e.attributes->select(a | not a.isIdentifier)->asOrderedSet()/]

[comment les attributs d'une entité qui ne sont pas des clé primaires /]
[query public attributes(e : entity::Entity) : OrderedSet(environment::Attribute) = e.attributes->asOrderedSet()/]

[query public attributesNoPkNoVersion(e : entity::Entity) : OrderedSet(environment::Attribute) = e.attributes->select(a | not a.isIdentifier and not a.isVersion())->asOrderedSet()/]

[comment les références d'une entité sans multiplicité et les références multiple vers cette entité /]
[query public referencesNoStarAndReferencingStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.referencesNoStar()->union(e.referencingStar())->asOrderedSet()->sortedBy(temp1 | temp1.name.toLower())/]

[comment les références d'une entité sans multiplicité et les références multiple vers cette entité , navigables ou non/]
[query public referencesNoStarAndReferencingStarAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = e.referencesNoStarAllNavigability()->union(e.referencingStarAllNavigability())->asOrderedSet()->sortedBy(temp2 | temp2.name.toLower())/]

[comment les références d'une entité sans multiplicité et les références multiple vers cette entité , navigables ou non, pour une entité fk donnée/]
[query public referencesNoStarAndReferencingStarAllNavigability(e : entity::Entity, entFk : entity::Entity) : OrderedSet(environment::Reference) = e.referencesNoStarAllNavigability(entFk)->union(e.referencingStarAllNavigability(entFk))->asOrderedSet()->sortedBy(temp3 | temp3.name.toLower())/]

[comment les références d'une entité sans multiplicité /]
[query public referencesNoStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | not r.isMultiple() and r.navigable)->asOrderedSet()->sortedBy(temp4 | temp4.name.toLower())/]

[comment les références d'une entité sans multiplicité /]
[query public referencesNoStarAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | not r.isMultiple())->asOrderedSet()->sortedBy(temp5 | temp5.name.toLower())/]

[comment les références d'une entité sans multiplicité, pour une entité référencée donnée /]
[query public referencesNoStarAllNavigability(e : entity::Entity, entReferencee : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | not r.isMultiple() and r.referencedType.oclAsType(entity::Entity) = entReferencee)->asOrderedSet()->sortedBy(temp6 | temp6.name.toLower())/]

[comment les références d'une entité avec multiplicité Navigable/]
[query public referencesStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() and r.navigable)->asOrderedSet()->sortedBy(temp7 | temp7.name.toLower())/]

[comment les références avec multiplicité vers une entité /]
[query public referencingStar(e : entity::Entity) : OrderedSet(environment::Reference) = if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)->select(r | r.isMultiple() and r.referencedType = e and r.navigable and (r.oppositeOf = null or not r.oppositeOf.isMultiple()))->asOrderedSet()->sortedBy(temp8 | temp8.name.toLower()) endif/]

[comment les références avec multiplicité vers une entité /]
[query public referencingStarAllNavigability(e : entity::Entity, entReferencante : entity::Entity) : OrderedSet(environment::Reference) = if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)->select(r | r.isMultiple() and r.referencedType = e and r.containingType = entReferencante and r.oppositeOf = null)->asOrderedSet()->sortedBy(temp9 | temp9.name.toLower()) endif/]

[comment les références avec multiplicité vers une entité /]
[query public referencingStarAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)->select(r | r.isMultiple() and r.referencedType = e and (r.oppositeOf = null or not r.oppositeOf.isMultiple()))->asOrderedSet()->sortedBy(temp10 | temp10.name.toLower()) endif/]

[query public referencesStarStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null) and r.oppositeOf.isMultiple())->asOrderedSet()->sortedBy(temp11 | temp11.name.toLower())/]

[comment les références sans multiplicité vers une entité et naviagagle pour le génération sans match/]
[query public referencesStarStarNotMulti(e : entity::Entity) : OrderedSet(environment::Reference) = e.ownedReferences->select(r | not r.isMultiple() and r.navigable)->asOrderedSet()->sortedBy(temp12 | temp12.name.toLower())/]

[comment les références avec multiplicité vers une entité et naviagagle pour le génération sans match/]
[query public referencesStarStarMulti(e : entity::Entity) : OrderedSet(environment::Reference) = e.ownedReferences->select(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null))->asOrderedSet()->sortedBy(temp13 | temp13.name.toLower())/]

[query public referencesStarStarOwned(e : entity::Entity) : OrderedSet(environment::Reference) = e.ownedReferences->select(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null) and r.oppositeOf.isMultiple())->asOrderedSet()->sortedBy(temp14 | temp14.name.toLower())/]

[query private referencesStarStarAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() and not (r.oppositeOf = null) and r.oppositeOf.isMultiple())->asOrderedSet()->sortedBy(temp15 | temp15.name.toLower())/]

[query public referencingStarStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() and not (r.oppositeOf = null) and r.oppositeOf.isMultiple() and r.oppositeOf.navigable)->asOrderedSet()->sortedBy(temp16 | temp16.name.toLower())/]

[query public referencesStarNoStar(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() and r.navigable and not (not (r.oppositeOf = null) and r.oppositeOf.isMultiple()))->asOrderedSet()->sortedBy(temp17 | temp17.name.toLower())/]

[query public hasMandatoryFields(e : entity::Entity) : Boolean = e.attributesNoPk()->exists(a | a.isMandatory()) or e.referencesNoStarAndReferencingStar()->exists(r | r.isMandatory())/]

[query public hasMandatoryFieldsForDaoTest(e : entity::Entity) : Boolean = e.attributesNoPk()->exists(a | a.isMandatory())/]

[query public hasNullFields(e : entity::Entity) : Boolean = e.attributesNoPk()->exists(a | not a.isMandatory())/]

[query public hasStringFieldWithSize(e : entity::Entity) : Boolean = e.attributesNoPk()->exists(a | a.atributeHasSize())/]

[query public hasEnumImport(e : entity::Entity) : Boolean = e.attributesNoPk()->exists(a | a.metadatas.hasSize() and a.type.name = 'String')/]

[comment est ce que l entite a des références avec multiplicité la referencant /]
[query public hasReferencingStar(e : entity::Entity) : Boolean = if e.eContainer(entity::Root) = null then false else e.eContainer(entity::Root).eAllContents(environment::Reference)->exists(r | r.isMultiple() and r.referencedType = e and r.navigable and (r.oppositeOf = null or not r.oppositeOf.isMultiple())) endif/]

[comment est ce que l entite a des références * * /]
[query public hasReferencesStarStar(e : entity::Entity) : Boolean = e.references->exists(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null) and r.oppositeOf.isMultiple())/]

[comment etourne true si la propriété possède une taille/]
[query public atributeHasSize(p : environment::Property) : Boolean = if p.metadatas <> null then p.metadatas.hasSize() else false endif/]

[query public getInheritDtoAttributes(e : entity::Entity) : Sequence(environment::Attribute) = e.getAttributes()/]

[query public isReferenceNoStar(e : entity::Entity, r : environment::Reference) : Boolean = e.references->includes(r) and not r.isMultiple() and r.navigable/]

[query public isReferenceStar(e : entity::Entity, r : environment::Reference) : Boolean = e.references->includes(r) and r.isMultiple() and r.navigable/]

[query public isReferencingStar(e : entity::Entity, r : environment::Reference) : Boolean = r.isMultiple() and r.referencedType = e and r.navigable/]

[query public isComputed(p : environment::Property) : Boolean = not (p.metadatas = null) and p.metadatas.metadatas->exists(m | not (m = null) and not (m.oclAsType(environment::Annotation).title = null) and m.oclAsType(environment::Annotation).title.equalsIgnoreCase('COMPUTED'))/]

[query public navigableProperties1(e : entity::Entity) : OrderedSet(environment::Property) = e.attributesNoPk()->union(e.references->select(r | r.navigable)->asOrderedSet()->union(e.referencingStar())->sortedBy(temp18 | temp18.name.toLower()))->asOrderedSet()/]

[query public navigableProperties(e : entity::Entity) : OrderedSet(environment::Property) = e.attributesNoPk()->union(e.ownedReferences->select(r | r.isMultiple() and r.navigable and not (r.oppositeOf = null))->asOrderedSet())->union(e.ownedReferences->select(r | not r.isMultiple() and r.navigable)->asOrderedSet())->sortedBy(temp19 | temp19.name.toLower())->asOrderedSet()/]

[comment Renvoie sous la forme d'un OrderedSet la liste des attributs d'une Entity qui possèdent une méta-donnée Annotation de titre "COMPUTED". /]
[query public attributesNotComputed(e : entity::Entity) : OrderedSet(environment::Attribute) = e.getAttributes()->select(a | not a.isComputed())->asOrderedSet()/]

[query public getAttributes(e : entity::Entity) : Sequence(environment::Attribute) = e.getAttributesJavaService()/]

[comment les entites referencees ou referencantes /]
[query public entitiesReferencedOrReferencing(e : entity::Entity) : OrderedSet(entity::Entity) = e.referencesNoStarAllNavigability()->asSequence()->collect(temp20 | temp20.referencedType)->collect(temp21 | temp21.oclAsType(entity::Entity))->union(e.referencingStarAllNavigability()->asSequence()->collect(temp22 | temp22.containingType)->collect(temp23 | temp23.oclAsType(entity::Entity)))->asOrderedSet()/]

[query public isTypeOfEnumeration(a : environment::Attribute) : Boolean = a.type.oclIsTypeOf(environment::Enumeration) and not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty()/]

[comment : Retourne la taille de l'attribut selon que cela soit une énumération ou un primitif/]
[query public attributeSize(a : environment::Attribute) : String = if a.isTypeOfEnumeration() then a.type.oclAsType(environment::Enumeration).getMaxSqlSizeForEnumeration() else a.metadatas.size() endif/]
