[module xtoutils('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::services::MandatoryUtils/]
[import fr::pacman::commons::services::StringUtils/]

[comment encoding = UTF-8 /]
[query public getNamespaceXto(e : entity::Entity) : String = (e.getApplicationPackage() + e.categoryHierarchy()).reverse('\\.', '.')/]

[query public clientNeedXto(any : ecore::EObject) : Boolean = any.getClientTypes()->exists(client | client.equalsIgnoreCase('GWT'))/]

[template public nameClassXto(e : entity::Entity)]
  [e.nameBaseXto().toUpperFirst()/][/template]

[template public nameClassXto(r : environment::Reference)]
  [r.nameBaseXto().toUpperFirst()/][/template]

[template public importUserItf(any : ecore::EObject)]
  import fr.spi4j.lib.security.User_Itf;[/template]

[template public getXtoReferenceId(r : environment::Reference)]
  private [r.genPkType()/] [r.name.normalize().apply_attributeDefault()/][r.namePK_ID()/];[/template]

[template public getXtoReference(r : environment::Reference)]
  private [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/] [r.name.normalize().apply_attributeDefault()/];[/template]

[template public getRefListeXto(r : environment::Reference)]
  private List<[r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]> [r.name.normalize().apply_attributeMultiple()/];[/template]

[template public getXtoReferenceInverseId(r : environment::Reference)]
  private [r.genPkType()/] [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/];[/template]

[template public nameBaseXto(e : entity::Entity)]
  [e.buildXtoClassNameFromEntity().toLowerFirst()/][/template]

[template public nameBaseXto(r : environment::Reference)]
  [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity().toLowerFirst()/][/template]

[template public nameBaseXtoUP(e : entity::Entity)]
  [e.buildXtoClassNameFromEntity().toUpperFirst()/][/template]

[template public getGetterXto(r : environment::Reference)]
  public [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/] [r.name.normalize().apply_methodGet()/] ()[/template]

[template public getGetterListXto(r : environment::Reference)]
  public List<[r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]> [r.getNameGetterListEntity()/] ()[/template]

[template public getSetterXtoReference(r : environment::Reference)]
  public void [r.name.normalize().apply_methodSet()/] (final [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/] [r.referencedType.name.normalize().apply_parameterMethodClassicIn()/])[/template]

[template public getSetterListXto(r : environment::Reference)]
  public void [r.getNameSetterListEntity()/] (final List<[r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]> [r.referencedType.name.normalize().apply_parameterMethodMultiple()/])[/template]

[template public getGetterInverseIdEntity(r : environment::Reference)]
  public [r.genPkType()/] [r.nameBaseReferenceInverse().apply_methodGet()/][r.namePK_ID()/] ()[/template]

[template public getNameSetterListEntity(r : environment::Reference)]
  [('set ' + r.name.normalize().apply_attributeMultiple()).apply_methodDefault()/][/template]

[template public getComParamInverseIdIn(r : environment::Reference)]
      * @param [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]
      *           (In)[if (r.isMandatory())](*)[/if]
   [r.descriptionInverse(false)/][/template]

[template public getSetterInverseIdEntity(r : environment::Reference)]
  public void [r.nameBaseReferenceInverse().apply_methodSet()/][r.namePK_ID()/] (final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/])[/template]

[query public isMandatory(p : environment::Property) : Boolean = p.isMandatorySoa()/]