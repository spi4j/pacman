[module serviceutils('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::commons::services::MandatoryUtils/]

[comment encoding = UTF-8 /]
[template public comParamInverseIdIn(r : environment::Reference)]
      * @param [r.nameParamInverseId().apply_parameterMethodClassicIn()/]
      *           (In)[if (r.isMandatory())](*)[/if] [r.descriptionInverse(false)/][/template]

[comment OA : Teste si une propriété (attribut ou référence) est obligatoire/]
[query public isMandatory(p : environment::Property) : Boolean = p.isMandatorySoa()/]

[template public getImportEntity(e : entity::Entity)]
  import [e.buildPackageBusinessApiEntity()/].[e.buildEntityImplClassName()/];[/template]

[template public getImportServiceRequirements(e : entity::Entity)]
  import [e.buildPackageBusinessImplementationServiceEntity()/].[e.buildServiceRequirementsClassName()/];[/template]

[template public nameBaseReference(r : environment::Reference)]
  [r.name.sanitize().toLowerFirst()/][/template]

[template public nameParamInverseId(r : environment::Reference)]
  [r.nameBaseReferenceInverse()/] id[/template]

[template public nameBaseReferenceInverse(r : environment::Reference)]
  [if (r.oppositeOf = null)][r.containingType.oclAsType(entity::Entity).buildSimpleEntityName().toLowerFirst()/][else][r.oppositeOf.nameBaseReference()/][/if][/template]

[template public getImportEnum(e : entity::Entity)]
  import [e.buildPackagePersistenceApiEntity()/].[e.buildEntityColumnEnumName()/];[/template]

[query public buildServiceClassImplName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' service').apply_classImplem()/]

[template public getImportServiceInterface(e : entity::Entity)]
  import [e.buildPackageBusinessApiServiceEntity()/].[e.buildServiceInterfaceName()/];[/template]

[query public buildServiceTestClassName(e : entity::Entity) : String = (e.nameSimpleEntity() + ' service').apply_classTest()/]

[query public buildPackageBusinessImplementation(any : ecore::EObject) : String = any.getApplicationPackage() + '.' + any.getPackageBusiness() + '.' + any.getPackageImplServer()/]

[query public buildPackageBusinessApiEntity(e : entity::Entity) : String = e.buildPackageBusinessApi() + e.categoryHierarchy()/]

[query public buildPackageBusinessApiServiceEntity(e : entity::Entity) : String = if not (e = null) then e.buildPackageBusinessApiEntity() else 'PACKAGE NOT FOUND FOR SERVICE AND ENTITY NULL' endif/]

[query public buildPackageBusinessGwtClientService(e : entity::Entity) : String = if not (e = null) then e.buildPackageBusinessGwtClient() + e.categoryHierarchy() else 'PACKAGE NOT FOUND FOR Service Entity' endif/]

[query public buildServiceGwtInterfaceName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' gwt service').apply_classDefault()/]

[query public buildPackageBusinessGwtClient(any : ecore::EObject) : String = any.buildPackageGwtClient() + '.' + any.getPackageBusiness()/]

[query private buildPackageGwtClient(any : ecore::EObject) : String = any.getApplicationPackage() + '.client'/]

[query public buildServiceGwtAsyncClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' gwt service async').apply_classDefault()/]

[query public buildPackageBusinessGwtServerService(e : entity::Entity) : String = if not (e = null) then e.buildPackageBusinessGwtServer() + e.categoryHierarchy() else 'PACKAGE NOT FOUND FOR SERVICE' endif/]

[query private buildPackageBusinessGwtServer(any : ecore::EObject) : String = any.buildPackageGwtServer() + '.' + any.getPackageBusiness()/]

[query private buildPackageGwtServer(any : ecore::EObject) : String = any.getApplicationPackage() + '.server'/]

[query public buildServiceGwtImplementationName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' gwt service impl').apply_classDefault()/]

[template public getImportXtoGwt(e : entity::Entity)]
  import [e.buildPackageWsApiEntity()/].[e.buildXtoClassNameFromEntity()/];[/template]

[comment : interface -> impl  ????????!!!!! /]
[template public nameServiceInterfaceGwt(e : entity::Entity)]
  [e.buildServiceImplClassName()/][/template]

[query public buildMapperClassName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' mapper').apply_classImplem()/]

[query public buildMapperInterfaceName(e : entity::Entity) : String = (e.buildSimpleEntityName() + ' mapper').apply_classInterface()/]

[template public nameParamId(e : entity::Entity)]
  [e.nameBaseEntity()/] id[/template]

[template public nameBaseEntity(e : entity::Entity)]
  [e.buildSimpleEntityName().toLowerFirst()/][/template]

[template public nameParamInverse(r : environment::Reference)]
  [r.nameBaseReferenceInverse()/][/template]
