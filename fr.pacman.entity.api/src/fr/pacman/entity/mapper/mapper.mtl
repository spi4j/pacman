[module mapper('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[template public mapper(e : entity::Entity)]
  [e.licence()/]
  package [e.buildPackageEntityMapper()/];
  
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import fr.spi4j.mapper.EntityMapper_Abs;
    import fr.spi4j.mapper.EntityMapper_Itf;
    import fr.spi4j.ws.xto.Xto_Itf;
    import fr.spi4j.persistence.entity.Entity_Itf;
    
    import [e.buildPackagePersistenceApiEntity()/].[e.buildEntityInterfaceName()/];
    import [e.buildPackagePersistenceImplementationJdbcEntity()/].[e.buildEntityImplClassName()/];
    import [e.buildPackageWsApiEntity()/].[e.buildXtoClassNameFromEntity()/];
    
    [if (e.references->exists(r | r.navigable))]
      import [e.buildPackageMapper()/].[e.buildAppliUserMapperGenClassName()/];
    [/if]
    
  [/protected]
  
  
  /**
   * Impl√©mentation pour le Mapper (= Entity <-> Xto) sur le type '[e.buildEntityImplClassName()/]'.
   * @author [e.getAuthorName()/]
   */
  public class [e.buildEntityMapperImplClassName()/] extends [e.getClassNameForEntityMapper_Abs()/]<[e.buildEntityInterfaceName()/], [e.buildXtoClassNameFromEntity()/]> implements [e.buildEntityMapperInterfaceName()/]
  {
  
     @Override
     public [e.buildXtoClassNameFromEntity()/] convertEntityToXto (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/])
     {
        final [e.buildXtoClassNameFromEntity()/] ['xto'.apply_variableFinal()/] = super.convertEntityToXto(['entity'.apply_parameterMethodClassicIn()/]);
  
        ['convertEntityToXto'.displayClearUserCodeId()/]
        [protected (e.getUserCodeId('convertEntityToXto')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
        return ['xto'.apply_variableFinal()/];
     }
  
     @Override
     public [e.buildEntityInterfaceName()/] convertXtoToEntity (final [e.buildXtoClassNameFromEntity()/] ['xto'.apply_parameterMethodClassicIn()/])
     {
        final [e.buildEntityInterfaceName()/] ['entity'.apply_variableFinal()/] = super.convertXtoToEntity(['xto'.apply_parameterMethodClassicIn()/]);
  
        ['convertXtoToEntity'.displayClearUserCodeId()/]
        [protected (e.getUserCodeId('convertXtoToEntity')) startTagPrefix('// ') endTagPrefix('// ')]
          
        [/protected]
  
  
        return ['entity'.apply_variableFinal()/];
     }
  
     @Override
     protected [e.buildEntityImplClassName()/] getInstanceOfEntity ()
     {
        return new [e.buildEntityImplClassName()/]();
     }
  
     @Override
     protected [e.buildXtoClassNameFromEntity()/] getInstanceOfXto ()
     {
        return new [e.buildXtoClassNameFromEntity()/]();
     }
  
     @Override
     protected [e.getClassNameForEntityMapper_Itf()/]<? extends [e.getClassNameForEntity_Itf()/]<?>, ? extends [e.getClassNameForXto_Itf()/]<?>> getSpecificMapper (final String ['field name'.apply_parameterMethodClassicIn()/])
     {
  [for (r : environment::Reference | e.referencesNoStar())]
          if ("[r.name.apply_attributeDefault()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          { 
             return [r.buildAppliUserMapperGenClassName()/].[('get ' + r.containingType.oclAsType(entity::Entity).buildEntityMapperImplClassName()).apply_methodDefault()/]();
          }
  [/for]
  [for (r : environment::Reference | e.referencesStarStar())]
          if ("[r.name.apply_attributeMultiple()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          { 
             return [r.buildAppliUserMapperGenClassName()/].[('get ' + r.containingType.oclAsType(entity::Entity).buildEntityMapperImplClassName()).apply_methodDefault()/]();
          }
  [/for]
  [for (r : environment::Reference | e.referencesStarNoStar())]
          if ("[r.name.apply_attributeMultiple()/]".equals(['field name'.apply_parameterMethodClassicIn()/]))
          { 
             return [r.buildAppliUserMapperGenClassName()/].[('get ' + r.containingType.oclAsType(entity::Entity).buildEntityMapperImplClassName()).apply_methodDefault()/]();
          }
  [/for]
        return super.getSpecificMapper(['field name'.apply_parameterMethodClassicIn()/]);
     }
  
     [e.nameMapper().displayClearUserCodeId()/]
     [protected (e.getUserCodeId(e.getUserCodeId(e.nameMapper()))) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  }[/template]
