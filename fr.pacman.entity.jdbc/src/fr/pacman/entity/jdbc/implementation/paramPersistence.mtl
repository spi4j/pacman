[module paramPersistence('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::entity::jdbc::common::packages/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::commonRule/]

[comment encoding = UTF-8 /]
[template public paramPersistence(r : entity::Root)]
  [r.licence()/]
  package [r.buildPackagePersistence()/]; // NOPMD
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    import java.io.File;
    
    import javax.naming.NamingException;
    
    import org.apache.logging.log4j.LogManager;
    import org.apache.logging.log4j.Logger;
    
    import fr.spi4j.Parameters;
    import fr.spi4j.exception.Spi4jRuntimeException;
    import fr.spi4j.persistence.ElemResourceManager;
    import fr.spi4j.persistence.ParamPersistence_Abs;
    import fr.spi4j.persistence.dao.jdbc.DefaultJdbcDao;
    import fr.spi4j.persistence.resource.DefaultResourcePhysical;
    import fr.spi4j.persistence.resource.ResourcePhysical_Abs;
    import fr.spi4j.persistence.resource.ResourceType_Enum;
    import fr.spi4j.persistence.resource.jdbc.NonXAJndiResourcePhysical;
    import [r.getApplicationPackage()/].[r.buildParamAppliClassName()/];
    
  [/protected]
  
  
  [r.comClass('Implémentation permettant de centraliser le paramétrage de persistance de l\'application')/]
  public final class [r.buildParamPersistenceClassName()/] extends ParamPersistence_Abs implements [r.buildParamAppliClassName()/]
  {
     private static final Logger ['log'.apply_attributeFinalStatic()/] = LogManager.getLogger([r.buildParamPersistenceClassName()/].class);
  
     // Resources Physiques
     [protected (r.getUserCodeId('Resources Physiques')) startTagPrefix('// ') endTagPrefix('// ')]
       
          /** Chemin de la base H2 (test ou base embarquee). */
          private static final String ['chemin base h2'.apply_attributeFinalStatic()/] = "./h2/[r.getApplicationNameUpperFirst()/]";
       
     [/protected]
  
  
     /** Propriété positionnée à "true" (par maven-surefire-plugin) lorsque l'application est lancée en mode h2. */
     private boolean ['h2 mode'.apply_attributeDefault()/] = Boolean.FALSE;
  
  [if (r.isLibrary())]
       /**
        * Le gestionnaire de connexions par défaut si renseigné.
        */
       private static ElemResourceManager ['default ElemResourceManager'.apply_attributeFinal()/];
    
  [/if]
     /**
      * Le gestionnaire de connexions comprenant des ResourcePhysique et renvoyant le ResourceManager correspondant au mode de fonctionnement de l'appli.
      */
     private final ElemResourceManager ['ElemResourceManager'.apply_attributeFinal()/];
  
     /**
      * Constructeur.
      */
     public [r.buildParamPersistenceClassName()/] ()
     {
        super(['id appli'.apply_attributeFinalStatic()/]);
  
        // Constructeur
        [protected (r.getUserCodeId('Constructeur')) startTagPrefix('// ') endTagPrefix('// ')]
          
          	  // Positionne l'indicateur à "true" si l'application est lancée en mode h2.
                [r.getAffectationPrefix()/]['h2 mode'.apply_attributeDefault()/] = ['check if h2 mode'.apply_methodDefault()/]();
          
          [if (r.isLibrary())]
                  if (['default ElemResourceManager'.apply_attributeFinal()/] == null)
                  {
                     // La ressource physique SGBD.
                     [r.getAffectationPrefix()/]['ElemResourceManager'.apply_attributeFinal()/] = new ElemResourceManager(['id appli'.apply_attributeFinalStatic()/], ['create resource physical'.apply_methodDefault()/]());
                  }
                  else
                  {
                     [r.getAffectationPrefix()/]['ElemResourceManager'.apply_attributeFinal()/] = ['default ElemResourceManager'.apply_attributeFinal()/];
                  }
          [else]
                  // La ressource physique SGBD.
                  [r.getAffectationPrefix()/]['ElemResourceManager'.apply_attributeFinal()/] = new ElemResourceManager(['id appli'.apply_attributeFinalStatic()/], ['create resource physical'.apply_methodDefault()/]());
          [/if]
          
          [if (r.hasAdditionnalLibraries())]
            	[('inject ' + r.getApplicationName() + ' ElemResourceManagerInLibraries').apply_methodDefault()/]();
          [/if]
          
        [/protected]
  
     }
  
  	/**
  	 * Initialise l'indicateur de mode de lancement pour l'application. Soit on part
  	 * sur une base H2 dans le cadre des tests unitaires ou d'une base embarquée,
  	 * soit on se connecte sur une base externe. Dans le cas d'une base embarquée, 
  	 * on force directement l'indicateur et on se contente de le retourner. 
  	 */
     private boolean ['check if h2 mode'.apply_methodDefault()/]() {
  	
  [if (r.useH2EmbeddedDatabase())]
    		// On vérouille sur la base embarquée de type H2.
    		return Boolean.TRUE;
  [else]
          boolean ['h2 mode'.apply_variableDefault()/];
          try {
    
             final String ['with h2 bool'.apply_variableDefault()/] = Parameters.getParameter(Parameters.c_h2, Boolean.toString(Boolean.FALSE));
             ['h2 mode'.apply_variableDefault()/] = ['with h2 bool'.apply_variableDefault()/].equalsIgnoreCase(Boolean.toString(Boolean.TRUE));
    
    	  } catch (final IllegalStateException v_e) {
    
             ['h2 mode'.apply_variableDefault()/] = Boolean.FALSE;
          }
    	  return ['h2 mode'.apply_variableDefault()/];
  [/if]
     }
  
     /**
      * Initialiser les instances du paramétrage de la couche persistance.
      */
     private static synchronized void ['init instance'.apply_methodDefault()/] ()
     {
        [r.buildParamPersistenceClassName()/] ['param persistence'.apply_variableObjectDefault()/] = ([r.buildParamPersistenceClassName()/]) getParamPersistence(['id appli'.apply_attributeFinalStatic()/]);
        // Si pas d'instance
        if (['param persistence'.apply_variableObjectDefault()/] == null)
        {
           // Instancier 'ParamPersistenceApp'
           ['param persistence'.apply_variableObjectDefault()/] = new [r.buildParamPersistenceClassName()/]();
           // Mémoriser l'instance 'ParamPersistence'
           setParamPersistence(['id appli'.apply_attributeFinalStatic()/], ['param persistence'.apply_variableObjectDefault()/]);
  
           // Instancier un '[r.buildUserPersistenceAppClassName()/]'
           final [r.buildUserPersistenceAppClassName()/] ['user persistence'.apply_variableObjectFinal()/] = new [r.buildUserPersistenceAppClassName()/](['param persistence'.apply_variableObjectDefault()/]);
           // Mémoriser l'instance 'UserPersistence'
           setUserPersistence(['id appli'.apply_attributeFinalStatic()/], ['user persistence'.apply_variableObjectFinal()/]);
  
           // Initialiser les éléments du paramétrage
           ['param persistence'.apply_variableObjectDefault()/].initElemParamPersistence();
        }
     }
  
     /**
      * Permet d'obtenir le 'UserPersistence' de l'application.
      * @return Une instance de '[r.buildUserPersistenceAppClassName()/]'
      */
     public static [r.buildUserPersistenceAppClassName()/] ['get user persistence'.apply_methodDefault()/] ()
     {
        return ['user persistence static holder'.apply_classDefault()/].['user persistence'.apply_attributeFinalStatic()/];
     }
  
     /**
      * Design pattern "Static Holder": Classe pour initialiser au besoin (c'est-à-dire à la première demande)<br>
      * le userPersistence de l'application sans nécessiter d'ajouter "synchronized" sur la méthode static getUserPersistence().<br>
      * Ajouter "synchronized" pourrait devenir une contention car la méthode est static et est appelée très souvent dans l'application.<br>
      * Le Static Holder permet d'initialiser l'attribut en étant automatiquement synchronisé par l'initialisation de la classe dans le ClassLoader.<br>
      */
     private static final class ['user persistence static holder'.apply_classDefault()/]
     {
        /** Le 'UserPersistence' de l'application. */
        private static final [r.buildUserPersistenceAppClassName()/] ['user persistence'.apply_attributeFinalStatic()/];
  
        static
        {
           // Initialiser la couche de persistance
           ['init instance'.apply_methodDefault()/]();
           // Obtenir le 'UserPersistence' de l'application
           ['user persistence'.apply_attributeFinalStatic()/] = ([r.buildUserPersistenceAppClassName()/]) getUserPersistence(['id appli'.apply_attributeFinalStatic()/]);
           // finalise l'initialisation du ParamPersistence
           (([r.buildParamPersistenceClassName()/]) getParamPersistence(['id appli'.apply_attributeFinalStatic()/])).['after init'.apply_methodDefault()/]();
        }
  
        /**
         * Constructeur.
         */
        private ['user persistence static holder'.apply_classDefault()/] ()
        {
           super();
        }
     }
  
     @Override
     protected void ['after init'.apply_methodDefault()/] ()
     {
        // afterInit
        [protected (r.getUserCodeId('afterInit')) startTagPrefix('// ') endTagPrefix('// ')]
          
          	  // Uniquement si application en mode h2.
          	  if([r.getAffectationPrefix()/]['h2 mode'.apply_attributeDefault()/]) {
          
                	// suppression de l'ancienne base si elle existe encore
                	final File ['db file'.apply_variableFinal()/] = new File(['chemin base h2'.apply_attributeFinalStatic()/] + ".mv.db").getAbsoluteFile();
                	if (['db file'.apply_variableFinal()/].exists())
                	{
                  	['log'.apply_attributeFinalStatic()/].info("Suppression de la base existante : " + ['db file'.apply_variableFinal()/].getName());
                   	if (!['db file'.apply_variableFinal()/].delete())
                   	{
                      	['log'.apply_attributeFinalStatic()/].warn("La base existante n'a pas pu être supprimée : " + ['db file'.apply_variableFinal()/].getName());
                   	}
                	}
                	try
                	{
          			['log'.apply_attributeFinalStatic()/].info("Création de la base (version usine) : " + ['db file'.apply_variableFinal()/].getName());
                   	[r.buildH2DatabaseHelperClassName()/].['initialize database'.apply_methodDefault()/]();
                	}
                	catch (final Throwable ['t'.apply_variableFinal()/])
                	{
                  	['log'.apply_attributeFinalStatic()/].error("Impossible d'initialiser la base de données, "
                            + "vérifier les scripts d'initialisation de la base de données", ['t'.apply_variableFinal()/]);
                	}
          	  }
        [/protected]
  
     }
  
     /**
      * Paramétrage de la persistance.
      */
     // CHECKSTYLE:OFF
     @Override
     // CHECKSTYLE:ON
     protected void initElemParamPersistence () // NOPMD
     {
        // Ajout de différentes ressources au ElemResourceManager
        // Ajout Resources
        [protected (r.getUserCodeId('Ajout Resources')) startTagPrefix('// ') endTagPrefix('// ')]
                // ['ElemResourceManager'.apply_attributeFinal()/].addResourcePhysical(['Local resource physical'.apply_attributeFinalStatic()/], fr.spi4j.persistence.Mode_Enum.nomade);
        [/protected]
  
  
        // Default Dao
        [protected (r.getUserCodeId('Default Dao')) startTagPrefix('// ') endTagPrefix('// ')]
                // Ajouter le paramétrage pour le DAO par défaut
                setDefaultDao(DefaultJdbcDao.class, ['ElemResourceManager'.apply_attributeFinal()/]);
        [/protected]
  
  
  [for (e : entity::Entity | r.eAllContents(entity::Entity))]
    [if (not e.isNotPersistent() or e.useMatching())]
            // [e.buildPackagePersistenceApiEntity() + '.' + e.buildEntityInterfaceName()/]
            [protected (e.getUserCodeId(e.buildPackagePersistenceApiEntity() + '.' + e.buildEntityInterfaceName())) startTagPrefix('// ') endTagPrefix('// ')]
                    // Ajouter le paramétrage pour l'entité "[e.buildPackagePersistenceApiEntity()/].[e.buildEntityInterfaceName()/]"
                    addElemParamPersistence([e.buildPackagePersistenceApiEntity()/].[e.buildEntityInterfaceName()/].class, new ElemParamPersistence(
                             [e.buildPackagePersistenceImplementationJdbcEntity()/].[e.buildEntityImplClassName()/].class,
                             [e.buildPackagePersistenceImplementationJdbcEntity()/].[e.buildDaoImplClassName()/].class, ['ElemResourceManager'.apply_attributeFinal()/]));
            [/protected]
      
    [/if]
  [/for]
     }
  
     /**
      * Création de la ressource physique.
      * @return ResourcePhysical_Abs
      */
     private ResourcePhysical_Abs ['create resource physical'.apply_methodDefault()/] ()
     {
  
  	  // Creation resource physique
  	  [protected (r.getUserCodeId('Creation resource physique')) startTagPrefix('// ') endTagPrefix('// ')]
       
       	  final ResourcePhysical_Abs ['resource physical'.apply_variableDefault()/];
            
             // On regarde si on démarre en mode base h2 embarque ou sur une base externe.
       	  if(['h2 mode'.apply_attributeDefault()/]){
       
       			// Chargement de la base H2.
       			['log'.apply_attributeFinalStatic()/].info("Démarrage du serveur/application sur base H2.");
       			['resource physical'.apply_variableDefault()/] = new DefaultResourcePhysical("jdbc:h2:" + ['chemin base h2'.apply_attributeFinalStatic()/], "sa", "",
                         ResourceType_Enum.ressourceH2NonXA);
       	  } else {
       [if (r.isWebApplication())]
         			// Récupération du nom jndi pour la ressource.
               		final String ['jndi name'.apply_variableDefault()/] = Parameters.getParameter("[r.getApplicationName().toLower()/].datasource", 
                           "java:comp/env/[r.getApplicationName().toLower()/]/datasource");
         			try {
         
                	 		// Chargement de la ressource via son nom jndi.
                  		['log'.apply_attributeFinalStatic()/].info("Démarrage du serveur en utilisant la datasource : " + ['jndi name'.apply_variableDefault()/]);
         				['resource physical'.apply_variableDefault()/] = new NonXAJndiResourcePhysical(['jndi name'.apply_variableDefault()/]);
         
         			} catch(NamingException ['e'.apply_variableDefault()/]) {
                 		
         				 throw new Spi4jRuntimeException(['e'.apply_variableDefault()/], "Nom JNDI inconnu : " +  ['jndi name'.apply_variableDefault()/],
                           "Vérifier le nom JNDI de la DataSource");
         			}
       [else]
         
         			// Chargement de la ressource.
         			['log'.apply_attributeFinalStatic()/].info("Démarrage de l'application avec la couche de persistence...");
         			['resource physical'.apply_variableDefault()/] = new DefaultResourcePhysical("jdbc:", "", "", ResourceType_Enum.ressourceDbcpNonXA);
       [/if]
       	  }
             return ['resource physical'.apply_variableFinal()/];
     [/protected]
  
     }
  
  [if (r.isLibrary())]
       /**
        * Setter pour que l'application puisse fournir sa propre gestion de ressources à la gestion de persistance de la librairie.
        * @param ['elemResourceManager'.apply_parameterMethodObjectIn()/]
        *           ElemResourceManager
        */
       public static void ['set ElemResourceManager'.apply_methodDefault()/] (final ElemResourceManager ['elemResourceManager'.apply_parameterMethodObjectIn()/])
       {
          ['default ElemResourceManager'.apply_attributeFinal()/] = ['elemResourceManager'.apply_parameterMethodObjectIn()/];
       }
    
  [/if]
  [if (r.hasAdditionnalLibraries())]
       /**
        * Injection du ElemResourceManager de [r.getApplicationName()/] dans le(s) librairie(s) pour utiliser la même connexion jdbc (plus économique en ressources bdd et ne nécessite pas XA)
        */
       private void [('inject ' + r.getApplicationName() + ' ElemResourceManagerInLibraries').apply_methodDefault()/] ()
       {
          // [('inject ' + r.getApplicationName() + ' ElemResourceManagerInLibraries').apply_methodDefault()/]
          [protected (r.getUserCodeId(('inject ' + r.getApplicationName() + ' ElemResourceManagerInLibraries').apply_methodDefault())) startTagPrefix('// ') endTagPrefix('// ')]
                  // TODO renseigner le(s) initialisation(s) de paramPersistence des librairies avec celui de [r.getApplicationName()/]
            	
            [for (prop : String | r.getAdditionnalLibraries())]
              [if (prop.isLibraryDatabaseConnected(prop))]
                	  // [prop.getLibraryPackage(prop)/].persistence.[(prop.getLibraryName(prop) + ' param persistence').apply_classDefault()/].['set ElemResourceManager'.apply_methodDefault()/](['ElemResourceManager'.apply_attributeFinal()/]);
              [/if]
            [/for]
            	
          [/protected]
    
       }
  [/if]
  
     // Methodes
     [protected (r.getUserCodeId('Methodes')) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  }[/template]

[template public contextDatasource(r : entity::Root)]
  <?xml version="1.0" encoding="UTF-8"?>
  <Context>
  
  <!-- Modifier la datasource avec le nom de la machine hébergeant la base de données, 
   	le nom de la base, le nom et le mot de passe utilisateur puis, copier la datasource 
      correspondante dans le fichier de paramétrage du serveur. -->
  
  [if (r.isDbMySql())]
    <!-- Connexion à une base de données Mysql -->
    <Resource name="[r.getApplicationName().toLower()/]/datasource" auth="Container" type="javax.sql.DataSource" 
    	driverClassName="org.mariadb.jdbc.Driver" factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
        maxIdle="3" initialSize="2" maxTotal="4" maxWaitMillis="10000" username="['['/]identifiant]" 
        password="['['/]mot de passe]" url="jdbc:mysql://localhost:3306/['['/]nom de la base]"/>
    
  [/if]
  
  [if (r.isDbMariaDB())]
    <!-- Connexion à une base de données MariaDB -->
    <Resource name="[r.getApplicationName().toLower()/]/datasource" auth="Container" type="javax.sql.DataSource" 
    	driverClassName="cdata.jdbc.mariadb.MariaDBDriver" factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
        maxIdle="3" initialSize="2" maxTotal="4" maxWaitMillis="10000" username="['['/]identifiant]" 
        password="['['/]mot de passe]" url="jdbc:mariadb://localhost:3306/['['/]nom de la base]"/>
    
  [/if]
  
  [if (r.isDbOracle())]
    <!-- Connexion à une base de données Oracle -->
    <Resource name="[r.getApplicationName().toLower()/]/datasource" auth="Container" type="javax.sql.DataSource" 
        driverClassName="oracle.jdbc.OracleDriver" defaultAutoCommit="false" 
        maxActive="100" maxIdle="3" maxWait="10000" username="['['/]identifiant]" 
        password="['['/]mot de passe]" url="jdbc:oracle:thin://localhost:1521 /['['/]nom de la base]" 
        connectionProperties="charSet=ISO8859_15"/>
    
  [/if]
  [if (r.isDbOracle32())]
  [/if]
  [if (r.isDbPostgresql())]
    <!-- Connexion à une base de données Postgresql -->
    <Resource name="[r.getApplicationName().toLower()/]/datasource" auth="Container" type="javax.sql.DataSource" 
        driverClassName="org.postgresql.Driver" defaultAutoCommit="false" 
        maxActive="100" maxIdle="3" maxWait="10000" username="['['/]identifiant]" 
        password="['['/]mot de passe]" url="jdbc:postgresql://localhost:5432/['['/]nom de la base]" 
        connectionProperties="charSet=ISO8859_15"/>
    
  [/if]
  [if (r.isDbSqlServer())]
    <!-- Connexion à une base de données Sql Server -->
    <Resource name="[r.getApplicationName().toLower()/]/datasource" auth="Container" type="javax.sql.DataSource" 
        driverClassName="net.sourceforge.jtds.jdbc.Driver" defaultAutoCommit="false" 
        maxActive="100" maxIdle="3" maxWait="10000" username="['['/]identifiant]" 
        password="['['/]mot de passe]" url="jdbc:jtds:sqlserver://localhost:1433/['['/]nom de la base]" 
        connectionProperties="charSet=ISO8859_15"/>
  [/if]
  </Context>[/template]