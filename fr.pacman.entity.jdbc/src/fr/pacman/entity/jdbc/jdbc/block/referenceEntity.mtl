[module referenceEntity('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::requests::counterQueries/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::classesEntity/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::jdbc::common::packages/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::commonRule/]
[import fr::pacman::commons::convention::rule::variableRule/]

[comment encoding = UTF-8 /]
[comment sur la base de PersonneEntity en r97 /]
[template public referenceEntityJdbc(r : environment::Reference)]
  [r.licence()/]
  package [r.containingType.oclAsType(entity::Entity).buildPackagePersistenceImplementationJdbcEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [r.writeImports()/]
    
  [/protected]
  
  
  [r.comClass(r.roleEntity())/]
  public class [r.buildReferenceImplClassName()/] [if (r.hasAutomaticColumns())]extends [r.buildAppliEntityAbstractClassName()/]<[r.genPkType()/]> [/if]
  implements [r.buildReferenceEntityInterfaceName()/][if (r.containingType.oclAsType(entity::Entity).hasVersion())], JdbcOptimistLocked_Itf[/if]
  
  {
     // CONSTANTES
  
     /**
      * SerialUid.
      */
     private static final long serialVersionUID = -1;
  
     // Constantes [r.buildReferenceImplClassName()/]
     [protected (r.getUserCodeId('Constantes ' + r.buildReferenceImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
     // ATTRIBUTS
    // Methodes [r.buildReferenceImplClassName()/]
    [protected (r.getUserCodeId('Methodes ' + r.buildReferenceImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]
      
    [/protected]
  
   	 /** Id. */
      private [r.genPkType()/] [r.nameSimpleReferencePropertyID().apply_attributeDefault()/];
  
  	/** [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID()/]. */
      private [r.genPkType()/] [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
  
  	/** [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID()/]. */
      private [r.genPkType()/] [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
  	
  
     // Attributs [r.buildReferenceImplClassName()/]
     [protected (r.getUserCodeId('Attributs ' + r.buildReferenceImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
     // METHODES
  
     /**
      * Constructeur sans paramètre de l'entité '[r.nameSimpleReference()/]'. <br>
      * Attention à ne pas appeler ce constructeur directement, mais à bien passer par UserPersistence.
      */
     public [r.buildReferenceImplClassName()/] ()
     {
        super();
     }
  
   @Override
     public [r.genPkType()/] getId ()
     {
        return [r.nameSimpleReferencePropertyID().apply_attributeDefault()/];
     }
  
     @Override
     public void setId (final [r.genPkType()/] ['id'.apply_parameterMethodClassicIn()/])
     {
        [r.getAffectationPrefix()/][r.nameSimpleReferencePropertyID().apply_attributeDefault()/] = ['id'.apply_parameterMethodClassicIn()/];
     }
  
  	/**
          Obtenir [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
          @return [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
      */
  
   @Override
     public [r.genPkType()/] [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault().apply_methodGet()/] ()
     {
        return [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
     }
  
  	 /**
  		Affecter [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
       */
  
     @Override
     public void [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault().apply_methodSet()/]([r.genPkType()/] [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/])
     {
        [r.getAffectationPrefix()/][r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/] = [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
     }
  
  
  	/**
          Obtenir [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
          @return [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
      */
  
  	@Override
     public [r.genPkType()/] [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault().apply_methodGet()/] ()
     {
        return [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
     }
  
  	 /**
          Affecter [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]
       */
  
     @Override
     public void [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault().apply_methodSet()/]([r.genPkType()/] [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/])
     {
        [r.getAffectationPrefix()/][r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/] = [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/];
     }
  
  	
  
  
  
     @Override
     public String toString ()
     {
        return super.toString() + " : " + [r.nameSimpleReferencePropertyID().apply_attributeDefault()/]  + ", " + [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/] + ", " + [r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/] ;
     }
  
     @Override
     public void validate () throws Spi4jValidationException
     {
  	
       	 // aucun champ obligatoire
  	
     }
  
  
     // Methodes 2 [r.buildReferenceImplClassName()/]
     [protected (r.getUserCodeId('Methodes 2 ' + r.buildReferenceImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
  
  
  }[/template]

[template private validProperty(e : entity::Entity, p : environment::Property)]
  [if (p.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = EntityUtil.checkMandatoryField("[p.nameSimpleProperty()/]", [p.nameSimpleProperty().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
  [if (p.oclIsTypeOf(environment::Attribute))][e.validateSize(p.oclAsType(environment::Attribute))/][/if]
[/template]

[template private validInverseProperty(e : entity::Entity, r : environment::Reference)]
  [if (r.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = EntityUtil.checkMandatoryField("[r.nameSimplePropertyInverse()/]", [r.nameSimplePropertyInverse().apply_attributeDefault()/][e.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[template private validPropertyWhenHasAutomaticColumns(e : entity::Entity, p : environment::Property)]
  [if (p.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = EntityUtil.checkMandatoryField("[p.nameSimpleProperty()/]", [p.nameSimpleProperty().apply_attributeDefault()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
  [if (p.oclIsTypeOf(environment::Attribute))][e.validateSize(p.oclAsType(environment::Attribute))/][/if]
[/template]

[template private validInversePropertyWhenHasAutomaticColumns(e : entity::Entity, r : environment::Reference)]
  [if (r.isMandatory())]
          ['champs invalides'.apply_variableDefault()/] = EntityUtil.checkMandatoryField("[r.nameSimplePropertyInverse()/]", [r.nameSimplePropertyInverse().apply_attributeDefault()/][e.namePK_ID()/], ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[query public roleEntity(r : environment::Reference) : String = 'Entité du type ' + r.buildReferenceImplClassName()/]

[template private validateSize(e : entity::Entity, a : environment::Attribute)]
  [if (a.metadatas.hasSize() and a.type.name = 'String')]
          ['champs invalides'.apply_variableDefault()/] = EntityUtil.checkFieldSize("[a.nameSimpleProperty()/]", [a.nameSimpleProperty().apply_attributeDefault()/], [e.buildEntityColumnEnumName()/].[a.nameSimpleProperty().apply_attributeEnum()/].getSize(), ['champs invalides'.apply_variableDefault()/]);
  [/if]
[/template]

[comment  : Write all required imports. /]
[template private writeImports(r : environment::Reference) post(self.trim())]
  [r.initImports()/]
  [r.addImport('fr.spi4j.persistence.entity.EntityUtil')/]
  [r.addImport('fr.spi4j.exception.Spi4jValidationException')/]
  [r.addImport('fr.spi4j.persistence.dao.jdbc.JdbcOptimistLocked_Itf', r.containingType.oclAsType(entity::Entity).hasVersion())/]
  [r.addImport('fr.spi4j.persistence.dao.jdbc.JdbcVersion', r.containingType.oclAsType(entity::Entity).hasVersion())/]
  [r.addImport(r.containingType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.buildReferenceEntityInterfaceName())/]
  [r.addImport(r.containingType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.buildReferenceColumnEnumName(), r.containingType.oclAsType(entity::Entity).hasEnumImport())/]
  [r.addImport(r.buildPackagePersistenceImplJdbc() + '.' + r.buildAppliEntityAbstractClassName(), r.hasAutomaticColumns())/]
  [r.flushImports()/][/template]