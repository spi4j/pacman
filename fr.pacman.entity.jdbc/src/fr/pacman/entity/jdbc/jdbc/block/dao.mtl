[module dao('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::types::packages/]
[import fr::pacman::commons::types::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::services::SecurityUtils/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::entity::api::common::commentaires/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::entity::jdbc::common::packages/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]

[comment encoding = UTF-8 /]
[comment sur la base de PersonneDao en r97 /]
[template public daoJdbc(e : entity::Entity)]
  [e.licence()/]
  package [e.buildPackagePersistenceImplementationJdbcEntity()/];
  [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.writeImports()/]
    
  [/protected]
  
  [e.comClass(e.roleDao())/]
  public class [e.buildDaoImplClassName()/] extends [e.getClassNameForDaoJdbc_Abs()/]<[e.buildEntityInterfaceName()/], [e.buildEntityColumnEnumName()/]> implements [e.buildDaoInterfaceName()/]
  {
     // CONSTANTES
  
     [('Constantes ' + e.buildDaoImplClassName()).displayClearUserCodeId()/]
     [protected (e.getUserCodeId('Constantes ' + e.buildDaoImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
     // ATTRIBUTS
  
     [('Attributs ' + e.buildDaoImplClassName()).displayClearUserCodeId()/]
     [protected (e.getUserCodeId('Attributs ' + e.buildDaoImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
     // METHODES
  
     /**
      * Constructeur par d√©faut.
      */
     public [e.buildDaoImplClassName()/] ()
     {
  [if (e.hasAutomaticColumns())]
          super ([e.buildEntityColumnEnumName()/].['table name'.apply_attributeFinalStatic()/], [e.buildEntityColumnEnumName()/].values (), [e.buildAppliColumnClassName()/].values ());
  [else]
          super ([e.buildEntityColumnEnumName()/].['table name'.apply_attributeFinalStatic()/], [e.buildEntityColumnEnumName()/].values ());
  [/if]
     }
  
  [for (r : environment::Reference | e.referencesStarStarOwned())]
    
       @Override
       public List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> [('find list ' + r.name.normalize() + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/] (final [r.genPkType()/] [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_parameterMethodObjectIn()/])
       {
          // utilisation de la table de jointure de la relation N-N
          final String ['jointure sql'.apply_variableFinal()/] = " inner join " + [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[('table name ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity() + r.name.sanitize()).apply_attributeFinalStatic()/] + " on "
                   + [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].['table name'.apply_attributeFinalStatic()/] + "." + [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeEnum()/] + " = "
                   + [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[('table name ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity() + r.name.sanitize()).apply_attributeFinalStatic()/] + "." + [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeEnum()/]
                   + " where " + [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[('table name ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity() + r.name.sanitize()).apply_attributeFinalStatic()/] + "." + [r.containingType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeEnum()/] 
                   + " = :[r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]";
          final Map<String, Long> ['params'.apply_variableFinal()/] = Collections.singletonMap ("[r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_attributeDefault()/]", [r.containingType.oclAsType(entity::Entity).nameSimplePropertyID().apply_parameterMethodObjectIn()/]);
          return [r.referencedType.oclAsType(entity::Entity).buildParamPersistenceClassNameForEntity()/].['get user persistence'.apply_methodDefault()/]().[('get ' + r.referencedType.oclAsType(entity::Entity).buildDaoName()).apply_methodDefault()/]().findByCriteria (['jointure sql'.apply_variableFinal()/], ['params'.apply_variableFinal()/]);
       }
    
  [/for]
     @Override
     protected Map<String, Object> getMapValueByLogicalNameFromEntity (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodObjectIn()/])
     {
        final Map<String, Object> ['value by column name'.apply_variableMultipleMap()/] = new LinkedHashMap<>();
        ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].getId());
  [for (a : environment::Attribute | e.attributesNoPk())]
    [if (not a.isComputed())]
      [if (a.type.genTypeNameWithPreCheck() = 'Binary')]
              if (['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]()==null)
              {
                 ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), null);
              }
              else
              {
                 ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]()[if (a.type.genTypeNameWithPreCheck() = 'Binary')].getInputStream()[/if]);
              }
      [else]
              ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]()[if (a.type.oclIsTypeOf(environment::Enumeration))].getValue()[/if]);
      [/if]
    [/if]
  [/for]
  [for (a : environment::Attribute | e.getInheritDtoAttributes())]
    [if (a.type.genTypeNameWithPreCheck() = 'Binary')]
            if (['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]()==null)
            {
               ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), null);
            }
            else
            {
               ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]()[if (a.type.oclIsTypeOf(environment::Enumeration))].getValue()[/if][if (a.type.genTypeNameWithPreCheck() = 'Binary')].getInputStream()[/if]);
            }
    [else]
            ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[a.nameSimpleProperty().apply_methodGet()/]());
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp1 | temp1.name.toLower()))]
    [if (r.containingType.oclAsType(entity::Entity) = e)]
            ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[r.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[r.nameSimpleProperty().apply_methodGet()/]());
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp2 | temp2.name.toLower()))]
    [if (r.oppositeOf = null)]
            ['value by column name'.apply_variableMultipleMap()/].put([e.buildEntityColumnEnumName()/].[r.nameBaseReferenceInverse().apply_attributeEnum()/][r.namePK_ID()/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[r.nameSimplePropertyInverse().apply_methodGet()/][r.namePK_ID()/]());
    [/if]
  [/for]
  [if (e.hasAutomaticColumns())]
    [for (columnProp : String | e.get_automaticColumnsProperties())]
      [if (e.columnHasName(columnProp) and e.columnHasType(columnProp))]
              ['value by column name'.apply_variableMultipleMap()/].put([e.buildAppliColumnClassName()/].[e.get_nameEnumField(columnProp)/].getLogicalColumnName(), ['entity'.apply_parameterMethodObjectIn()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]()[e.completeXtopSupValue(columnProp)/]);
      [/if]
    [/for]
  [/if]
        return ['value by column name'.apply_variableMultipleMap()/];
     }
  
     @Override
     protected [e.buildEntityInterfaceName()/] getEntityFromMapValueByLogicalName (final Map<String, Object> ['value by column name'.apply_parameterMethodMultipleMap()/])
     {
        final [e.buildEntityInterfaceName()/] ['entity'.apply_variableDefault()/] = new [e.buildEntityImplClassName()/] ();
        ['entity'.apply_variableDefault()/].setId(([e.genPkType()/]) ['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID().apply_attributeEnum()/].getLogicalColumnName()));
  [for (a : environment::Attribute | e.attributesNoPk())]
    [if (not a.isComputed())]
      [if (a.useSpi4jSecurity() and not a.useMatching() and e.entityIsUser() and a.name = 'identifiant')]
              ['entity'.apply_variableDefault()/].setIdentifiant([if (a.type.oclIsTypeOf(environment::Enumeration))] [a.genPropertyType()/].valueOf ((String)[else]([a.genPropertyType()/]) [/if]['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName ()))[if (a.type.oclIsTypeOf(environment::Enumeration))])[/if];
      [else]
              ['entity'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/]([if (a.type.oclIsTypeOf(environment::Enumeration))] [a.genPropertyType()/].['get enum by value'.apply_methodDefault()/] ((String)[else]([a.genPropertyType()/]) [/if]['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName ()))[if (a.type.oclIsTypeOf(environment::Enumeration))])[/if];
      [/if]
    [/if]
  [/for]
  [for (a : environment::Attribute | e.getInheritDtoAttributes())]
    [if (not a.isComputed())]
            ['entity'.apply_variableDefault()/].[a.nameSimpleProperty().apply_methodSet()/](([a.genPropertyType()/]) ['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[a.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName()));
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencesNoStarAllNavigability()->asOrderedSet()->sortedBy(temp3 | temp3.name.toLower()))]
    [if (r.containingType.oclAsType(entity::Entity) = e)]
      [if (not r.isComputed())]
              ['entity'.apply_variableDefault()/].[r.nameSimpleProperty().apply_methodSet()/](([r.genPkType()/]) ['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[r.nameColumnProperty().apply_attributeEnum()/].getLogicalColumnName()));
      [/if]
    [/if]
  [/for]
  [for (r : environment::Reference | e.referencingStarAllNavigability()->asOrderedSet()->sortedBy(temp4 | temp4.name.toLower()))]
    [if (r.oppositeOf = null)]
      [if (not r.isComputed())]
              ['entity'.apply_variableDefault()/].[r.nameSimplePropertyInverse().apply_methodSet()/][r.namePK_ID()/](([r.genPkType()/]) ['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildEntityColumnEnumName()/].[r.nameBaseReferenceInverse().apply_attributeEnum()/][r.namePK_ID()/].getLogicalColumnName()));
      [/if]
    [/if]
  [/for]
  [if (e.hasAutomaticColumns())]
    [for (columnProp : String | e.get_automaticColumnsProperties())]
      [if (e.columnHasName(columnProp) and e.columnHasType(columnProp))]
              ['entity'.apply_variableDefault()/].[e.get_nameColumn(columnProp).toLower().apply_methodSet()/](([e.get_typeColumn(columnProp)/]) ['value by column name'.apply_parameterMethodMultipleMap()/].get([e.buildAppliColumnClassName()/].[e.get_nameEnumField(columnProp)/].getLogicalColumnName()));
      [/if]
    [/for]
  [/if]
        return ['entity'.apply_variableDefault()/];
     }
  
     [('Methodes ' + e.buildDaoImplClassName()).displayClearUserCodeId()/]
     [protected (e.getUserCodeId('Methodes ' + e.buildDaoImplClassName())) startTagPrefix('// ') endTagPrefix('// ')]

     [/protected]
  
  }[/template]

[comment : Build the name for persistance class, depends from entity position (project or library). /]
[template private buildParamPersistenceClassNameForEntity(e : entity::Entity) post(self.trim())]
  [if (e.isLibraryEntity(e.getApplicationName()))]
    [e.getLibraryNameForEntity(e.getApplicationName()).buildParamPersistenceLibraryClassName()/]
  [else][e.buildParamPersistenceClassName()/][/if]
[/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport(e.buildPackagePersistenceApi() + '.' + e.buildAppliColumnClassName(), e.hasAutomaticColumns())/]
  [e.addImport(e.buildPackagePersistenceApiEntity() + '.' + e.buildEntityColumnEnumName())/]
  [e.addImport(e.buildPackagePersistenceApiEntity() + '.' + e.buildDaoInterfaceName())/]
  [e.addImport(e.buildPackagePersistenceApiEntity() + '.' + e.buildEntityInterfaceName())/]
  [e.addImport(e.getImportForDaoJdbc_Abs())/]
  [e.addImport('java.util.LinkedHashMap')/]
  [e.addImport('fr.spi4j.type.XtopSup')/]
  [e.addImport('java.util.Map')/]
  [if (not e.referencesStarStarOwned()->isEmpty())]
    	[e.addImport(e.buildPackagePersistence() + '.' + e.buildParamPersistenceClassName())/]
    	[e.addImport('java.util.Collections')/]
    	[e.addImport('java.util.List')/]
    
    [for (r : environment::Reference | e.referencesStarStarOwned())]
      		[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName())/]
      		[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName())/]
    [/for]
  [/if]
  
  [for (enum : environment::Enumeration | e.getRoot().eAllContents(environment::Enumeration))]
    	[e.addImport(enum.buildPackageEnum() + '.' + enum.buildEnumName())/]
  [/for]
  
  [e.flushImports()/][/template]

[query public roleDao(e : entity::Entity) : String = 'Impl√©mentation JDBC du DAO ' + e.nameSimpleEntity()/]
