[module serviceGwtImpl('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::utils/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]

[comment encoding = UTF-8 /]
[comment le Service existe sans Entity /]
[template public serviceGwtImpl(e : entity::Entity)]
  [e.licence()/]
  [let self = if not (e = null) then e else 'PACKAGE NOT FOUND FOR SERVICE' endif]
    package [e.buildPackageBusinessGwtServerService()/];
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [e.writeImports()/]
      
    [/protected]
    
    
    /**
     * Interface de services appelables par le client.
     * @author [e.getAuthorName()/]
     */
    public class [e.buildServiceGwtImplementationName()/] extends SpiRemoteServiceImpl implements [e.buildServiceGwtInterfaceName()/]
    {
    
       private static final long serialVersionUID = 1L;
    
       protected [e.buildMapperInterfaceName()/] getMapper ()
       {
          // Mapper
          [protected (e.getUserCodeId('Mapper')) startTagPrefix('// ') endTagPrefix('// ')]
            
                  return [e.buildAppliUserMapperGenClassName()/].[('get ' + e.buildMapperClassName()).apply_methodDefault()/]();
          [/protected]
    
       }
    
       protected [e.buildServiceInterfaceName()/] getService ()
       {
          // Service
          [protected (e.getUserCodeId('Service')) startTagPrefix('// ') endTagPrefix('// ')]
                  return [e.buildAppliUserBusinessGenClassName()/].[('get ' + e.buildServiceClassName()).apply_methodDefault()/]();
          [/protected]
    
       }
    
    	@Override
       protected SerializationPolicy doGetSerializationPolicy (final HttpServletRequest request,
                final String moduleBaseURL, final String strongName)
       {
          // TODO Auto-generated method stub
          return super.doGetSerializationPolicy(request, getServletContext().getInitParameter("moduleBaseURL"), strongName);
       }
    
    [for (r : environment::Reference | e.referencingStar())]
         @SuppressWarnings("unchecked")
         @Override
         public List<[e.buildXtoClassNameFromEntity()/]> [('find list ' + r.name + ' by ' + r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/])
         {
            return getMapper().convertListEntityToListXto((List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]>)(List<?>) 
                     getService().[('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/]([r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]));
         }
      
    [/for]
    [for (r : environment::Reference | e.referencesStarStar())]
      
         @SuppressWarnings("unchecked")
         @Override
         public List<[r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]> [('find list ' + r.name + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/] (final [r.genPkType()/] [r.containingType.oclAsType(entity::Entity).nameParamId().apply_parameterMethodClassicIn()/])
         {
            return [r.buildAppliUserMapperGenClassName()/].[('get ' + r.referencedType.oclAsType(entity::Entity).buildMapperClassName()).apply_methodDefault()/]().convertListEntityToListXto((List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]>)(List<?>) 
                     getService().[('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()).apply_methodDefault()/]([r.containingType.oclAsType(entity::Entity).nameParamId().apply_parameterMethodClassicIn()/]));
         }
    [/for]
    
       @Override
    	public [e.buildXtoClassNameFromEntity()/] save([e.buildXtoClassNameFromEntity()/] ['xto'.apply_parameterMethodClassicIn()/]) throws Spi4jValidationException 
    	{
    
    	 	return getMapper().convertEntityItfToXto(getService().save(getMapper().convertXtoItfToEntity(['xto'.apply_parameterMethodClassicIn()/])));
    
    	}
    
    	@Override
    	public [e.buildXtoClassNameFromEntity()/] findById(Long ['id'.apply_parameterMethodClassicIn()/]) 
    	{
    		return getMapper().convertEntityItfToXto(getService().findById(['id'.apply_parameterMethodClassicIn()/]));
    	}
    
    	@Override
    	public List<[e.buildXtoClassNameFromEntity()/]> findAll()
    	{
    		return getMapper().convertListEntityToListXto(getService().findAll());
    	}
    
    	@Override
    	public void delete([e.buildXtoClassNameFromEntity()/] ['xto'.apply_parameterMethodClassicIn()/]) throws Spi4jValidationException 
        {
    		getService().delete(getMapper().convertXtoItfToEntity(['xto'.apply_parameterMethodClassicIn()/]));		
    	}
    
       // [e.nameServiceInterfaceGwt()/]
       [protected (e.getUserCodeId(e.nameServiceInterfaceGwt())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport('fr.spi4j.ui.gwt.server.SpiRemoteServiceImpl')/]
  [e.addImport('fr.spi4j.exception.Spi4jValidationException')/]
  [e.addImport('jakarta.servlet.http.HttpServletRequest')/]
  [e.addImport('com.google.gwt.user.server.rpc.SerializationPolicy')/]
  [e.addImport(e.buildPackageBusinessApiService() + '.' + e.buildServiceInterfaceName())/]
  [e.addImport(e.buildPackageEntityMapper() + '.' + e.buildMapperInterfaceName())/]
  [e.addImport(e.buildPackageBusinessGwtClientService() + '.' + e.buildServiceGwtInterfaceName())/]
  [e.addImport(e.buildPackageBusiness() + '.' + e.buildAppliUserBusinessGenClassName())/]
  [e.addImport(e.buildPackageMapper() + '.' + e.buildAppliUserMapperGenClassName())/]
  [e.addImport(e.buildPackageWsApiEntity() + '.' + e.buildXtoClassNameFromEntity())/]
  
  [for (r : environment::Reference | e.referencesStarStar())]
    	[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackageWsApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity())/]
    	[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName())/]
  [/for]
  
  [for (r : environment::Reference | e.referencingStar())]
    	[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackageWsApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity())/]
    	[e.addImport(r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity() + '.' + r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName())/]
  [/for]
  
  [e.flushImports()/][/template]