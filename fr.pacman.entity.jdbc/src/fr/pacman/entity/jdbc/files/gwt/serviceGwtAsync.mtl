[module serviceGwtAsync('http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities', 'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::common::xtoutils/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::methodRule/]

[comment encoding = UTF-8 /]
[comment le Service existe sans Entity /]
[template public serviceGwtAsync(e : entity::Entity)]
  [e.licence()/]
  [let self = if not (e = null) then e else 'PACKAGE NOT FOUND FOR SERVICE AND Entity NULL' endif]
    package [e.buildPackageBusinessGwtClientService()/];
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [e.writeImports()/]
      
    [/protected]
    
    
    /**
     * Interface de services appelables par le client.
     * @author [e.getAuthorName()/]
     */
    public interface [e.buildServiceGwtAsyncClassName()/] extends GwtRemoteServiceAsync<[e.genPkType()/], [e.buildXtoClassNameFromEntity()/]>
    {
    
    [for (r : environment::Reference | e.referencingStar())]
         /**
          * Obtenir la liste d'objets de type '[e.buildEntityImplClassName()/]' associés à l'instance de type '[r.containingType.oclAsType(entity::Entity).buildEntityImplClassName()/]'.
      [r.getComParamInverseIdIn()/]
          * @param callback
          *           le callback pour retourner une liste de [e.buildXtoClassNameFromEntity()/] ayant [r.nameBaseReferenceInverse().apply_attributeDefault()/][r.namePK_ID()/] = [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/]
          */
         void [('find list ' + r.name + ' by ' + r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameBaseReferenceInverse().apply_parameterMethodClassicIn()/][r.namePK_ID()/], final AsyncCallback<List<[e.buildXtoClassNameFromEntity()/]>> callback);
      
    [/for]
    [for (r : environment::Reference | e.referencesStarStar())]
         /**
          * Obtenir la liste d'objets de type '[r.referencedType.oclAsType(entity::Entity).buildSimpleEntityName()/]' associés à l'instance de type '[r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()/]'.
          * @param [r.containingType.name.apply_parameterMethodClassicIn()/][r.namePK_ID()/]
          *           (In)(*) [r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()/].
          * @param callback
          *           le callback pour retourner une liste de [r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]
          */
         void [('find list ' + r.name + ' by ' + r.containingType.oclAsType(entity::Entity).buildSimpleEntityName()).apply_methodDefault()/] (final [r.genPkType()/] [r.containingType.name.apply_parameterMethodClassicIn()/][r.namePK_ID()/], final AsyncCallback<List<[r.referencedType.oclAsType(entity::Entity).buildXtoClassNameFromEntity()/]>> callback);
      
    [/for]
       // [e.buildServiceGwtAsyncClassName()/]
       [protected (e.getUserCodeId(e.buildServiceGwtAsyncClassName())) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
    }[/let]
[/template]

[comment : Write all required imports. /]
[template private writeImports(e : entity::Entity) post(self.trim())]
  [e.initImports()/]
  [e.addImport('java.util.List')/]
  [e.addImport('com.google.gwt.user.client.rpc.AsyncCallback')/]
  [e.addImport('fr.spi4j.ui.gwt.client.services.GwtRemoteServiceAsync')/]
  [if (not (e = null))]
    	[e.addImport(e.getImportXtoGwt())/]
    [for (r : environment::Reference | e.referencesStarStar())]
      		[e.addImport(r.referencedType.oclAsType(entity::Entity).getImportXtoGwt())/]
    [/for]
  [/if]
  [e.flushImports()/][/template]