[module service('http://www.obeonetwork.org/dsl/environment/3.0.0', 'http://www.obeonetwork.org/dsl/entity/3.0.0', 'http://www.obeonetwork.org/dsl/entity/2.0.0/utilities')/]

[import fr::pacman::commons::common::licence/]
[import fr::pacman::commons::common::imports/]
[import fr::pacman::commons::common::attributes/]
[import fr::pacman::commons::common::packages/]
[import fr::pacman::commons::common::classes/]
[import fr::pacman::commons::convention::rule::classRule/]
[import fr::pacman::commons::convention::rule::attributeRule/]
[import fr::pacman::commons::convention::rule::methodRule/]
[import fr::pacman::commons::convention::rule::parameterRule/]
[import fr::pacman::commons::convention::rule::variableRule/]
[import fr::pacman::commons::convention::project::surcouche/]
[import fr::pacman::entity::api::common::serviceutils/]
[import fr::pacman::entity::api::common::packages/]
[import fr::pacman::entity::api::common::names/]
[import fr::pacman::entity::api::common::methodes/]
[import fr::pacman::entity::api::common::attributes/]
[import fr::pacman::entity::api::common::buildClassesEntityApi/]
[import fr::pacman::entity::api::sql::common/]
[import fr::pacman::commons::common::properties/]
[import fr::pacman::commons::common::names/]
[import fr::pacman::commons::common::utils/]

[comment encoding = UTF-8 /]
[comment le Service existe sans Entity /]
[comment le Service et le Entity existent /]
[template public service(e : entity::Entity)]
  [e.licence()/]
  [let self = if not (e = null) then e else if not (e = null) then e else 'PACKAGE NOT FOUND FOR SERVICE AND Entity NULL' endif endif]
    package [e.buildPackageBusinessImplementationServiceEntity()/];
    
    [protected ('for imports') startTagPrefix('// ') endTagPrefix('// ')]
      
      [if (not e.referencesStarStar()->isEmpty())]
        import java.util.HashMap;
        import java.util.Map;
      [/if]
      import java.util.Date;
      
      import [e.buildPackageServiceApiEntity()/].[e.buildServiceInterfaceName()/];
      import [e.buildPackagePersistence()/].[e.buildParamPersistenceClassName()/];
      import [e.buildPackagePersistence()/].[e.buildUserPersistenceAppClassName()/];
      import java.util.List;
      [if (not e.isNotPersistent())]
        import [e.buildPackagePersistenceApiEntity()/].[e.buildDaoInterfaceName()/];
        [e.getImportEnum()/]
      [/if]
      import [e.buildPackagePersistenceApiEntity()/].[e.buildEntityInterfaceName()/];
      [for (r : environment::Reference | e.referencingStar())]
        [if (not e.buildEntityImplClassName().equalsIgnoreCase(r.referencedType.oclAsType(entity::Entity).buildEntityImplClassName()))]
          import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceImplementationJdbcEntity()/].[r.referencedType.oclAsType(entity::Entity).buildEntityImplClassName()/];
        [/if]
      [/for]
      [for (r : environment::Reference | e.referencesStarStar())]
        [if (not e.buildEntityColumnEnumName().equalsIgnoreCase(r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()))]
          import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/];
        [/if]
        import [r.referencedType.oclAsType(entity::Entity).buildPackagePersistenceApiEntity()/].[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/];
      [/for]
      [if (e.useServiceRequirements())]
        [e.getImportServiceRequirements()/]
      [/if]
      [if (not e.isNotPersistent())]
        import [e.getImportForEntityService_Abs()/];
      [/if]
      import fr.spi4j.exception.Spi4jValidationException;
      [if (e.useEjb())]
        import jakarta.ejb.Stateless;
      [/if]
      
    [/protected]
    
    
    /**
     * Implémentation du contrat de services spécifiques pour un type '[e.buildEntityInterfaceName()/]'. <br>
     * Pour rappel, les services sont sans état.
     * @author [e.getAuthorName()/]
     */
    // Annotations Service
    [protected (e.getUserCodeId('Annotations Service')) startTagPrefix('// ') endTagPrefix('// ')]
      [if (e.useEjb())]
        @Stateless
      [/if]
    [/protected]
    
    public class [e.buildServiceImplClassName()/] [if (not e.isNotPersistent())]extends [e.getClassNameForEntityService_Abs()/]<[e.genPkType()/], [e.buildEntityInterfaceName()/], [e.buildEntityColumnEnumName()/]>[/if]
     implements [e.buildServiceInterfaceName()/]
    {
    
       // Rappel : les services sont sans état.
       // attributs
       [protected (e.getUserCodeId('attributs')) startTagPrefix('// ') endTagPrefix('// ')]
         
       [/protected]
    
     
    [if (e.useServiceRequirements())]
         @SuppressWarnings("all")
         private final [e.buildServiceRequirementsClassName()/] ['requirements'.apply_attributeFinal()/] = new [e.buildServiceRequirementsClassName()/](); // NOPMD
    [/if]
    
    
        // Methodes [e.buildServiceClassName()/]
        [protected (e.getUserCodeId('Methodes ' + e.buildServiceClassName())) startTagPrefix('// ') endTagPrefix('// ')]
          
          [if (not e.isNotPersistent())]
                /**
                * Obtenir l'instance de dao sur le type '[e.nameSimpleEntity()/]Dao'.
                * @return L'instance désirée.
                */
                @Override
                protected [e.buildDaoInterfaceName()/] getDao ()
               {
                  final [e.buildUserPersistenceAppClassName()/] ['user persistence'.apply_variableFinal()/] = [e.buildParamPersistenceClassName()/].['get user persistence'.apply_methodDefault()/]();
                  return ['user persistence'.apply_variableFinal()/].[('get ' + e.nameSimpleEntity() + 'Dao').apply_methodDefault()/]();
               }
            
                /**
                * Sauvegarde l'entité de type '[e.buildEntityInterfaceName()/]'  ainsi que ses relations de type * *
                * @return L'entite  sauvegardée.
                */
                @Override
                public [e.buildEntityInterfaceName()/] save (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/] ) throws Spi4jValidationException
                {
            [if (e.hasReferencesStarStar())]
                      if (['entity'.apply_parameterMethodClassicIn()/].getId() != null)
                      {
              [for (r : environment::Reference | e.referencesStarStar())]
                           [('delete ' + r.name.normalize()).apply_methodDefault()/] ( ['entity'.apply_parameterMethodClassicIn()/] );
              [/for]
                      }
              
            [/if]
            [if (e.hasAutomaticColumns())]
                      //TODO Renseigner avec la bonne valeur de champs automatiques
              [for (columnProp : String | e.get_automaticColumnsProperties())]
                        if (['entity'.apply_parameterMethodClassicIn()/].[e.get_nameColumn(columnProp).toLower().apply_methodGet()/]() == null)
                        {
                           ['entity'.apply_parameterMethodClassicIn()/].[e.get_nameColumn(columnProp).toLower().apply_methodSet()/]([e.get_typeColumn(columnProp).defaultValueForColumnType()/]);
                        }
              [/for]
              
            [/if]
                    final [e.buildEntityInterfaceName()/] ['created entity'.apply_variableFinal()/] = super.save(['entity'.apply_parameterMethodClassicIn()/]);
            
            [for (r : environment::Reference | e.referencesStarStar())]
                      ['created entity'.apply_variableFinal()/].[r.getNameSetterListEntity()/] ( ['entity'.apply_parameterMethodClassicIn()/].[r.getNameGetterListEntity()/]() );
                      [('save ' + r.name.normalize()).apply_methodDefault()/] (['created entity'.apply_variableFinal()/], ['created entity'.apply_variableFinal()/].[r.getNameGetterListEntity()/]() );
              
            [/for]
            
                    return ['created entity'.apply_variableFinal()/];
                }
            
                /**
                * Delete l'entité de type '[e.buildEntityInterfaceName()/]'  ainsi que ses relations de type * *
                * @return
                */
                @Override
                public void delete (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/] ) throws Spi4jValidationException
                {
            [for (r : environment::Reference | e.referencesStarStar())]
                      [('delete ' + r.name.normalize()).apply_methodDefault()/] (['entity'.apply_parameterMethodClassicIn()/]);
            [/for]
                    super.delete(['entity'.apply_parameterMethodClassicIn()/]);
                }
            
            [for (r : environment::Reference | e.referencingStar())]
                 @Override
                 public List<[e.buildEntityInterfaceName()/]> [('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/] (final [r.genPkType()/] [r.nameParamInverseId().apply_parameterMethodClassicIn()/])
                 {
                    return findByColumn([e.buildEntityColumnEnumName()/].[r.nameSimpleProperty().apply_attributeEnum()/], [r.nameParamInverseId().apply_parameterMethodClassicIn()/]);
                 }
              
            [/for]
            [for (r : environment::Reference | e.referencesStarStar())]
                  /**
                  * Sauvegarde les elements de la relation '[r.name.normalize().apply_parameterMethodMultiple()/]'  pour l'entity [e.buildEntityInterfaceName()/]
                  * @param ['entity'.apply_parameterMethodClassicIn()/]
                  *           le entity
                  * @param [r.name.normalize().apply_parameterMethodMultiple()/]
                  *           les relations à ajouter
                  */
                  public void [('save ' + r.name.normalize()).apply_methodDefault()/] (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/], final List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> [r.name.normalize().apply_parameterMethodMultiple()/])
                   {
                     if ([r.name.normalize().apply_parameterMethodMultiple()/] != null)
                     {
                       // construction de la requête
                       final String [('query ' + r.name.normalize() + ' insert').apply_variableFinal()/] = "insert into " + [e.buildEntityColumnEnumName()/].[('table name ' + e.nameSimpleEntity() + r.name.sanitize()).apply_attributeFinalStatic()/] + "(" + [e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID()/] + ", " + [r.referencedType.oclAsType(entity::Entity).buildEntityColumnEnumName()/].[r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID()/] + ") values (:[e.nameSimplePropertyID()/], :[r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID()/])";
                       // initialisation des paramètres de la requête
                       final Map<String, Long> ['params'.apply_variableFinal()/] = new HashMap<>(2);
                       ['params'.apply_variableFinal()/].put("[e.nameSimplePropertyID()/]", ['entity'.apply_parameterMethodClassicIn()/].getId());
                       for (final [r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/] ['entity fk'.apply_variableFinal()/] : [r.name.normalize().apply_parameterMethodMultiple()/])
                       {
                          ['params'.apply_variableFinal()/].put("[r.referencedType.oclAsType(entity::Entity).nameSimplePropertyID()/]", ['entity fk'.apply_variableFinal()/].getId());
                          // insertion en base
                          getDao().executeUpdate([('query ' + r.name.normalize() + ' insert').apply_variableFinal()/], ['params'.apply_variableFinal()/]);
                       }
                     }
                  }
              
                  /**
                  * Obtenir la liste d'entité de type '[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName().toUpperFirst()/]' pour la relation [r.name.sanitize()/] avec pour identifiant [e.nameSimpleEntity().apply_parameterMethodClassicIn()/][r.namePK_ID()/]
                  * @param [e.nameSimpleEntity().apply_parameterMethodClassicIn().apply_parameterMethodClassicIn()/][r.namePK_ID()/]/]
                  *           (In)(*) [r.referencedType.oclAsType(entity::Entity).buildEntityImplClassName()/]
                  * @return une liste de [r.referencedType.oclAsType(entity::Entity).buildEntityImplClassName()/]
                  */
                  @Override
                  public List<[r.referencedType.oclAsType(entity::Entity).buildEntityInterfaceName()/]> [('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/] (final [r.genPkType()/] [e.nameSimpleEntity().apply_parameterMethodClassicIn()/][r.namePK_ID()/]){
                    return getDao().[('find list ' + r.name.sanitize() + ' by ' + r.containingType.oclAsType(entity::Entity).nameSimpleEntity()).apply_methodDefault()/]([(e.nameSimpleEntity() + r.namePK_ID()).apply_parameterMethodClassicIn()/]);
                  }
              
                  /**
                  * Supprime les relations [r.name/] pour une entity [e.buildEntityInterfaceName()/]
                  * @param ['entity'.apply_parameterMethodClassicIn()/]
                  *           le Entity
                  */
                  public void [('delete ' + r.name.normalize()).apply_methodDefault()/] (final [e.buildEntityInterfaceName()/] ['entity'.apply_parameterMethodClassicIn()/])
                  {
                    if (['entity'.apply_parameterMethodClassicIn()/] != null)
                    {
                       final long ['entity id'.apply_variableFinal()/] = ['entity'.apply_parameterMethodClassicIn()/].getId();
                       final String [('query ' + r.name.normalize() + ' delete').apply_variableFinal()/] = "delete from " + [e.buildEntityColumnEnumName()/].[('table name ' + e.nameSimpleEntity() + r.name.sanitize()).apply_attributeFinalStatic()/] + " where " + [e.buildEntityColumnEnumName()/].[e.nameSimplePropertyID()/] + "=:[e.nameSimplePropertyID()/]";
              
                       final Map<String, Long> ['params'.apply_variableFinal()/] = new HashMap<>(1);
                       ['params'.apply_variableFinal()/].put("[e.nameSimplePropertyID()/]", ['entity id'.apply_variableFinal()/]);
              
                       // suppression en base
                       getDao().executeUpdate([('query ' + r.name.normalize() + ' delete').apply_variableFinal()/], ['params'.apply_variableFinal()/]);
                    }
                  }
              
            [/for]
          [/if]
          
        [/protected]
    
    
    }[/let]
[/template]

[template private defaultValueForColumnType(type : String)]
  [if (type.equalsIgnoreCase('String'))]"Str"[elseif (type.equalsIgnoreCase('Boolean'))]false[elseif (type.equalsIgnoreCase('Integer'))]2[elseif (type.equalsIgnoreCase('Long'))]2L[elseif (type.equalsIgnoreCase('Float'))]2F[elseif (type.equalsIgnoreCase('Double'))]2D[elseif (type.equalsIgnoreCase('Date'))]new Date()[elseif (type.equalsIgnoreCase('Timestamp'))]new Timestamp(new Date().getTime())[elseif (type.equalsIgnoreCase('Time'))]new Time(new Date().getTime())[elseif (type.equalsIgnoreCase('Binary'))]getRandomBinary()[elseif (type.equalsIgnoreCase('Char'))]'X'[else]null[/if]
[/template]