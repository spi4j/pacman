/**
 * (C) Copyright Ministere des Armees (France)
 *
 * Apache License 2.0
 */
package fr.application.persistence.impl_jdbc.annuaire;
// Start of user code for imports

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import fr.spi4j.Parameters;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import fr.application.persistence.ApplicationParamPersistence;
import fr.application.persistence.ApplicationUserPersistence;
import fr.application.persistence.api.annuaire.PersonneDao_Itf;
import fr.application.persistence.api.annuaire.PersonneEntity_Itf;

// End of user code

/**
 * Classe de tests pour les méthodes spécifiques à l'implémentation JDBC du DAO. 
 * Cette classe est générée uniquement car 'Personne' est annoté 'Referentiel'.
 * @author safr@n
 */
// Annotation for class
// Start of user code Annotation for class
// End of user code
public class PersonneDaoJdbc_Test
{

   /** Le 'UserPersistence' de l'application. */
   private static ApplicationUserPersistence userPersistence;

   /** Le 'PersonneDao_Itf' testé. */
   private static PersonneDao_Itf dao;

   /**
    * Méthode d'initialisation de la classe de tests.
    */
   @BeforeAll
   public static void setUpBeforeAll ()
   {
	  Parameters.setH2Database();
      userPersistence = ApplicationParamPersistence.getUserPersistence();
      dao = userPersistence.getPersonneDao();

      // set up before all
      // Start of user code set up before all
      // End of user code
   }

   /**
    * Méthode d'initialisation de tests.
    */
   @BeforeEach
   public void setUp ()
   {
      userPersistence.begin();

      // set up
      // Start of user code set up
      // End of user code
   }

   /**
    * Construit une Map des valeurs de l'entity, ayant les noms logiques des colonnes comme clés.
    */
   @Test
   public void getMapValueByLogicalNameFromEntity ()
   {
      assertTrue(dao instanceof PersonneDao, "Le DAO est bien une implémentation JDBC");
      final PersonneEntity_Itf v_entity = userPersistence.getPersonneEntity();

      // remplissage entity
      // Start of user code remplissage entity

      // End of user code

      final PersonneDao v_daoJdbc = (PersonneDao) dao;
      final Map<String, Object> v_map = v_daoJdbc.getMapValueByLogicalNameFromEntity(v_entity);
      assertNotNull(v_map, "La map est vide");
      assertFalse(v_map.isEmpty(), "La map est vide");

      // vérification map
      // Start of user code vérification map

      // End of user code
   }

   /**
    * Méthode de fin de test : rollback.
    */
   @AfterEach
   public void tearDown ()
   {
      userPersistence.rollback();

      // tear down
      // Start of user code tear down
      // End of user code
   }

   // specific service test
   // Start of user code specific service test

   // End of user code

}