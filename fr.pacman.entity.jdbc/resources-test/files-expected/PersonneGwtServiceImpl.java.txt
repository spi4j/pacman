/**
 * (C) Copyright Ministere des Armees (France)
 *
 * Apache License 2.0
 */
package fr.application.server.business.annuaire;
// Start of user code for imports

import com.google.gwt.user.server.rpc.SerializationPolicy;
import fr.application.business.ApplicationUserBusiness;
import fr.application.business.api.annuaire.PersonneService_Itf;
import fr.application.client.business.annuaire.PersonneGwtService;
import fr.application.mapper.ApplicationUserMapper;
import fr.application.mapper.annuaire.PersonneMapper_Itf;
import fr.application.persistence.api.annuaire.PersonneEntity_Itf;
import fr.application.ws.api.annuaire.PersonneXto;
import fr.spi4j.exception.Spi4jValidationException;
import fr.spi4j.ui.gwt.server.SpiRemoteServiceImpl;
import jakarta.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

// End of user code

/**
 * Interface de services appelables par le client.
 * @author safr@n
 */
public class PersonneGwtServiceImpl extends SpiRemoteServiceImpl implements PersonneGwtService
{

   private static final long serialVersionUID = 1L;

   protected PersonneMapper_Itf getMapper ()
   {
      // Mapper
      // Start of user code Mapper

      return ApplicationUserMapper.getPersonneMapper();
      // End of user code
   }

   protected PersonneService_Itf getService ()
   {
      // Service
      // Start of user code Service
      return ApplicationUserBusiness.getPersonneService();
      // End of user code
   }

	@Override
   protected SerializationPolicy doGetSerializationPolicy (final HttpServletRequest request,
            final String moduleBaseURL, final String strongName)
   {
      // TODO Auto-generated method stub
      return super.doGetSerializationPolicy(request, getServletContext().getInitParameter("moduleBaseURL"), strongName);
   }

   @SuppressWarnings("unchecked")
   @Override
   public List<PersonneXto> findListParentDeByPersonne (final Long p_personneParentDe_id)
   {
      return getMapper().convertListEntityToListXto((List<PersonneEntity_Itf>)(List<?>) 
               getService().findListParentDeByPersonne(p_personneParentDe_id));
   }


   @Override
	public PersonneXto save(PersonneXto p_xto) throws Spi4jValidationException 
	{

	 	return getMapper().convertEntityItfToXto(getService().save(getMapper().convertXtoItfToEntity(p_xto)));

	}

	@Override
	public PersonneXto findById(Long p_id) 
	{
		return getMapper().convertEntityItfToXto(getService().findById(p_id));
	}

	@Override
	public List<PersonneXto> findAll()
	{
		return getMapper().convertListEntityToListXto(getService().findAll());
	}

	@Override
	public void delete(PersonneXto p_xto) throws Spi4jValidationException 
    {
		getService().delete(getMapper().convertXtoItfToEntity(p_xto));		
	}

   // PersonneService
   // Start of user code PersonneService

   // End of user code
}