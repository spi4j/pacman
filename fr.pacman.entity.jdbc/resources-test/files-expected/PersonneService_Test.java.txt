/**
 * (C) Copyright Ministere des Armees (France)
 *
 * Apache License 2.0
 */
package fr.application.business.api.annuaire;
// Start of user code for imports

import fr.application.business.ApplicationUserBusinessEntity;
import fr.application.business.api.annuaire.PersonneService_Itf;
import fr.application.persistence.ApplicationParamPersistence;
import fr.application.persistence.ApplicationUserPersistence;
import fr.application.persistence.api.annuaire .PersonneEntity_Itf;
import fr.application.persistence.api.annuaire.AdresseEntity_Itf;
import fr.application.persistence.api.annuaire.PaysEntity_Itf;
import fr.application.persistence.api.annuaire.PersonneEntity_Itf;
import fr.application.persistence.impl_jdbc.annuaire.AdresseEntity;
import fr.application.persistence.impl_jdbc.annuaire.PaysEntity;
import fr.application.persistence.impl_jdbc.annuaire.PersonneEntity;
import fr.application.persistence.impl_jdbc.ref.GradeEntity;
import fr.application.types.enums.TypeCompetence_Enum;
import fr.spi4j.persistence.entity.EntityUtil;
import import fr.spi4j.Parameters;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

// End of user code

/**
 * Classe de test du service 'PersonneService_Itf'.
 * @author safr@n
 */
// Annotation for class
// Start of user code Annotation for class
// End of user code
public class PersonneService_Test
{
   /** Le 'UserPersistence' de l'application. */
   private static ApplicationUserPersistence userPersistence;

   /** Le 'PersonneService_Itf' testé. */
   private static PersonneService_Itf service;

   // Spécifique
   // Start of user code Spécifique

   /** L'id du 'PersonneEntity_Itf' stocké en base. */
   private static Long crudId;

   /**
    * Définition du crudId.
    * @param p_crudId
    *           le crudId
    */
   public static void setCrudId (final Long p_crudId)
   {
      PersonneService_Test.crudId = p_crudId;
   }
	
	// End of user code

   /**
    * Méthode d'initialisation de la classe de tests.
    */
   @BeforeAll
   public static void setUpBeforeAll ()
   {
      Parameters.setH2Database();
      userPersistence = ApplicationParamPersistence.getUserPersistence();
      service = ApplicationUserBusinessEntity.getPersonneService();

      // set up before all
      // Start of user code set up before all
      // End of user code
   }

   /**
    * Méthode d'initialisation de tests.
    */
   @BeforeEach
   public void setUp ()
   {
      userPersistence.begin();

      // set up
      // Start of user code set up
      // End of user code
   }

	/**
    * Méthode de fin de test : rollback.
    */
   @AfterEach
   public void tearDown ()
   {
      userPersistence.rollback ();

      // tear down
      // Start of user code tear down
      // End of user code
   }
	
	// Methodes PersonneService_Test
	// Start of user code Methodes PersonneService_Test


    // End of user code

   /**
    * Test de recherche de toutes les entitys.
    * @throws Throwable
    *            exception
    */
   @Test
   public void testFindAll () throws Throwable
   {
      testCreate();

      final List<PersonneEntity_Itf> v_all = service.findAll();
      assertNotNull(EntityUtil.findInCollectionById(v_all, crudId), 
			"Le entity n'a pas été trouvé dans la liste de tous les entity");

   }

   /**
    * Test de création de l'entity.
    * @throws Throwable
    *            exception
    */
   @Test
   public void testCreate () throws Throwable
   {
      final PersonneEntity_Itf v_entity = new PersonneEntity();

      // create
      // Start of user code create
      // TODO renseigner données de test
      v_entity.set_nom ("s");
      v_entity.set_prenom ("s");
      v_entity.set_civil (false);
      v_entity.set_dateNaissance (new Date());
      v_entity.set_salaire (1D);
      v_entity.set_grade_id(1L);
      v_entity.set_marieAvec_id(1L);
      v_entity.set_personneParentDe_id (1L);

      // End of user code

      final PersonneEntity_Itf v_createdEntity = service.save (v_entity);

      setCrudId (v_createdEntity.getId ());

      assertNotNull (v_createdEntity.getId (), "Le entity créé devrait avoir une clé primaire renseignée");

      // create assertions
      // Start of user code create assertions


      // End of user code

   }

   /**
    * Test de recherche par identifiant de l'entity.
    * @throws Throwable
    *            exception
    */
   @Test
   public void testFindById () throws Throwable
   {
      testCreate ();

      final PersonneEntity_Itf v_entity = service.findById (crudId);
      assertNotNull (v_entity, "L'Entity devrait exister dans le référentiel");
      assertNotNull (v_entity.getId (), "L'Entity créée devrait avoir une clé primaire renseignée");
      assertNotNull (v_entity.toString (), "L'Entity créée devrait avoir un toString");

   }

   /**
    * Test de mise à jour de l'entity.
    * @throws Throwable
    *            exception
    */
   @Test
   public void testUpdate () throws Throwable
   {
      testCreate();

      final PersonneEntity_Itf v_entity = service.findById (crudId);
      final PersonneEntity_Itf v_updatedEntity = service.save (v_entity);

      assertNotNull (v_updatedEntity.getId (), "L'Entity mis à jour devrait avoir une clé primaire renseignée");
   }

   /**
    * Test de suppression de l'entity.
    * @throws Throwable
    *            exception
    */
   @Test
   public void testDelete () throws Throwable
   {
      testCreate();

      final PersonneEntity_Itf v_entity = service.findById (crudId);

      service.delete (v_entity);
      final List<PersonneEntity_Itf> v_all = service.findAll ();
      assertNull(EntityUtil.findInCollectionById (v_all, crudId), 
			"L'Entity ne devrait plus exister dans la liste de tous les entitées");

   }

    /**
    * Test de la méthode 'getColumn'.
    */
    @Test
    public void testGetColumn ()
    {

    }

}